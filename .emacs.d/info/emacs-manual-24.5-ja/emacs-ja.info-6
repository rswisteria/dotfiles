This is emacs-ja.info, produced by makeinfo version 6.1 from emacs.texi.

This is the ‘GNU Emacs Manual’, updated for Emacs version 24.5.

   Copyright © 2015–2016 Ayanokoji Takesi <ayanokoji.takesi@gmail.com>
Copyright © 1985–1987, 1993–2015 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with the Invariant Sections being “The GNU Manifesto,”
     “Distribution” and “GNU GENERAL PUBLIC LICENSE,” with the
     Front-Cover Texts being “A GNU Manual,” and with the Back-Cover
     Texts as in (a) below.  A copy of the license is included in the
     section entitled “GNU Free Documentation License.”

     (a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
     modify this GNU manual.  Buying copies from the FSF supports it in
     developing GNU and promoting software freedom.”
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Emacs: (emacs).            拡張可能なセルフドキュメント形式のテキストエディター。
END-INFO-DIR-ENTRY


File: emacs-ja.info,  Node: Dabbrev Customization,  Prev: Dynamic Abbrevs,  Up: Abbrevs

29.7 動的abbrevのカスタマイズ
=============================

動的abbrev展開は通常、展開結果の検索で大文字小文字を無視します。したがっ
て、展開結果と展開する単語は、大文字小文字が一致する必要はありません。

   この機能は変数‘dabbrev-case-fold-search’により制御されます。この値が
‘t’の場合、検索で大文字小文字は無視されます。‘nil’の場合、単語と展開結果
は大文字小文字が一致していなければなりません。値が‘case-fold-search’(デ
フォルト)の場合、変数‘case-fold-search’が展開結果の検索で、大文字小文字
を無視するかどうかを制御します(*note Search Case::を参照してください)。

   動的abbrev展開は通常、大文字小文字のパターンにしたがって展開結果を変
換することにより、_展開する動的abbrev_の大文字小文字のパターンを維持しま
す。

   変数‘dabbrev-case-replace’は、動的abbrevの大文字小文字のパターンを維
持するかどうかを制御します。この値が‘t’の場合、動的abbrevの大文字小文字
のパターンはほとんどのケースで維持されます。‘nil’の場合、展開結果は常に
そのままコピーされます。値が‘case-replace’(デフォルト)の場合、変数
‘case-replace’が展開結果をそのままコピーするかどうかを制御します(*note
Replacement and Case::を参照してください)。

   しかし、展開結果が複雑にミックスされた大文字小文字のパターンを含む場
合、そして動的abbrevがそのパターンにある程度マッチする場合、これらの変数
の値にかかわらず、展開結果は常にそのままコピーされます。したがって、たと
えばバッファーが‘variableWithSillyCasePattern’というテキストを含む場合、
‘v a M-/’とタイプすると、大文字小文字のパターンを含めて展開結果をコピー
します。

   変数‘dabbrev-abbrev-char-regexp’が非‘nil’の場合、これは動的展開の目的
のために、どの文字を単語の一部とするかを制御します。正規表現は2文字以上
ではなく、ただ1文字だけにマッチしなければなりません。同じ正規表現が、ど
の文字が展開結果の一部となるかも決定します。値が‘nil’の場合は特別な意味
をもちます。動的abbrevは単語構成文字から構成されますが、展開結果は単語と
シンボル文字から構成されます。

   シェルスクリプトおよびmakefileでは、変数名にプレフィクス‘$’があるとき
と、ないときがあります。このタイプのテキストのためのメジャーモードは、オ
プションのプレフィクスを扱うために、変数
‘dabbrev-abbrev-skip-leading-regexp’をセットして、動的abbrev展開をカスタ
マイズできます。この値には、動的abbrev展開が無視すべきオプションのプレフ
ィクスにマッチする正規表現を指定します。


File: emacs-ja.info,  Node: Dired,  Next: Calendar/Diary,  Prev: Abbrevs,  Up: Top

30 Dired (ディレクトリーエディター)
***********************************

Diredはディレクトリー、およびオプションでそれのサブディレクトリーのリス
トを含む、Emacsバッファーを作成します。このバッファー内を移動するために
、通常のEmacsコマンドと、リストされたファイルを操作するための、特別なコ
マンドを使うことができます。

   Diredバッファーは“読み取り専用”で、テキストの挿入はできません。‘d’や
‘x’のような通常のプリント文字は、特別なDiredコマンドに再定義されています
。Diredコマンドには、“カレントファイル”(カレント行のファイルのこと)を“マ
ーク”したり、“フラグ”をつけるものがいくつかあり、他のコマンドは、マーク
されたファイルやフラグがつけられたファイルにたいして処理を行ないます。最
初に特定のファイルをマークして、それらすべてにたいして1つのコマンドで操
作を行なうのです。

   Dired-Xパッケージは、Diredモードのためのさまざまな特別の機能を提供し
ます。*note Dired-X: (dired-x)Top.を参照してください。

   ディレクトリーのファイルのリストは、‘C-x C-d’ (‘list-directory’)でも
閲覧することができます。Diredとは異なり、このコマンドではリストされたフ
ァイルにたいする操作はできません。*note Directories::を参照してください
。

* Menu:

* Enter: Dired Enter.        Diredの呼び出し方。
* Navigation: Dired Navigation.  Diredバッファーでの特別な移動コマンド。
* Deletion: Dired Deletion.  Diredでのファイルの削除。
* Flagging Many Files::      ファイル名にもとづくファイルへのフラグ付け。
* Visit: Dired Visiting.     Diredによるその他のファイル操作。
* Marks vs Flags::           削除のためのフラグとマーク。
* Operating on Files::       1つまたは複数ファイルにたいするコピー、リネーム、プリント、圧縮など。
* Shell Commands in Dired::  マークしたファイルにたいするシェルコマンドの実行。
* Transforming File Names::  複数ファイルのリネームにパターンを使う。
* Comparison in Dired::      Diredの様式で‘diff’を実行する。
* Subdirectories in Dired::  Diredバッファーにたいするサブディレクトリーの追加。
* Subdir Switches:: Diredでのサブディレクトリーのスイッチ。
* Subdirectory Motion::      サブディレクトリー間の移動、上下への移動。
* Hiding Subdirectories::    サブディレクトリーの表示・非表示。
* Updating: Dired Updating.  重要でないファイル行の削除。
* Find: Dired and Find.      Diredでファイルを選択するために‘find’を使う。
* Wdired::                   Diredバッファーの編集によりファイルを操作する。
* Image-Dired::              Diredでのイメージサムネイルの閲覧。
* Misc: Misc Dired Features.  その他のさまざまな機能。


File: emacs-ja.info,  Node: Dired Enter,  Next: Dired Navigation,  Up: Dired

30.1 Diredの起動
================

Diredを呼び出すには、‘C-x d’ (‘dired’)とタイプします。これはミニバッファ
ーを使用してディレクトリー名を読み取り、そのディレクトリーのファイルを一
覧するする“Diredバッファー”を開きます。ミニバッファーの引数に、ワイルド
カードによるファイル名パターンを与えることもできます。この場合、Dliredバ
ッファーには、そのパターンにマッチする、すべてのファイルが一覧されます。
ミニバッファーでは、通常のヒストリーコマンドと、補完コマンドを使うことが
できます。特に‘M-n’は、(もしあれば)visitされたファイルの名前をミニバッフ
ァーに配します(*note Minibuffer History::を参照してください)。

   ‘C-x C-f’ (‘find-file’)にディレクトリー名を与えて、Diredを呼び出すこ
ともできます。

   変数‘dired-listing-switches’は、ディレクトリーをリストするために、
‘ls’に与えるオプションを指定します。この文字列には、‘-l’が_含まれていな
ければなりません_。‘dired’コマンドにプレフィクス引数を使用した場合、ディ
レクトリーの指定の前に、‘ls’のためのスイッチを指定できます。スイッチが指
定される方法は問いません。‘ls’のスイッチには、引数を要求しない短いオプシ
ョン(1文字)と、長いオプション(‘--’で始まり、引数は‘=’で指定される)を含め
ることができます。

   システムの‘ls’コマンドが‘--dired’オプションをサポートする場合、
Diredは自動的にそのオプションを渡します。これにより、Diredが名前を解析で
きないという特殊なファイル名にたいして、‘ls’が特別なエスケープシーケンス
を付します。Emacsセッションで最初にDiredを実行するとき、‘ls’コマンドに
‘--dired’オプションを指定して呼び出すことにより、そのスイッチをサポート
するかどうかチェックします。exitコードが0の場合、それ以降Diredは
‘--dired’オプションを使用し、それ以外の場合は使用しません。変数
‘dired-use-ls-dired’をカスタマイズすることにより、このチェックを抑止する
ことができます。値‘unspecified’(デフォルト)は、チェックを行なうことを意
味します。その他の非‘nil’値は、‘--dired’オプションを使用することを意味し
ます。‘nil’は、‘--dired’オプションを使用しないことを意味します。

   MS-WindowsおよびMS-DOSシステムでは、Emacsが‘ls’をエミュレートします。
このエミュレーションのオプションと特性については、*note ls in Lisp::を参
照してください。

   Diredバッファーを他のウィンドウに表示するには、‘C-x 4 d’
(‘dired-other-window’)を使用します。‘C-x 5 d’ (‘dired-other-frame’)は、
Diredバッファーを別のフレームに表示します。

   ‘q’ (‘quit-window’)とタイプすると、Diredバッファーは隠され(bury)ます
。ウィンドウがそのバッファーのためだけに作成された場合は、そのウィンドウ
を削除します。


File: emacs-ja.info,  Node: Dired Navigation,  Next: Dired Deletion,  Prev: Dired Enter,  Up: Dired

30.2 Diredバッファーでの移動
============================

Emacsの通常のカーソル移動コマンドは、Diredバッファーでも利用可能です。キ
ー‘C-n’および‘C-p’は、行の先頭ではなくファイル名の先頭にカーソルを配する
ように、再定義されています。

   特に利便性のために、Diredでの<SPC>および‘n’は、‘C-n’と等価になってい
ます。‘p’は‘C-p’と等価です(行の移動はDiredでは一般的な操作なので、タイプ
しやすいようにするべきです)。<DEL>(上に移動してフラグを外す)は、単なる上
への移動でも便利なときがあります(*note Dired Deletion::を参照してくださ
い)。

   ‘j’ (‘dired-goto-file’)は、ミニバッファーを使用してファイル名の入力を
求め、Diredバッファーで、そのファイルが記述されている行にポイントを移動
します。

   ‘M-s f C-s’ (‘dired-isearch-filenames’)は、Diredバッファーで前方への
インクリメンタル検索を行ないます。これはファイル名にたいするマッチだけを
検索し、それ以外のバッファーのテキストは無視します。‘M-s f M-C-s’
(‘dired-isearch-filenames-regexp’)も同じことを行ないますが、これは正規表
現による検索です。変数‘dired-isearch-filenames’を‘t’に変更した場合、通常
の検索コマンドも検索対象がファイル名だけに制限されるようになります。たと
えば‘C-s’は、‘M-s f C-s’と同様に振る舞います。変数の値が‘dwim’の場合、ポ
イントの最初の位置がファイル名にあるときだけ、検索コマンドはファイル名に
マッチします。インクリメンタル検索についての情報は、*note Search::を参照
してください。

   複数ディレクトリーにたいするものも含めて、Diredバッファーでは追加の移
動コマンドが利用可能です。*note Subdirectory Motion::を参照してください
。


File: emacs-ja.info,  Node: Dired Deletion,  Next: Flagging Many Files,  Prev: Dired Navigation,  Up: Dired

30.3 Diredでのファイルの削除について
====================================

もっともよく使われるDiredの使用法は、最初にファイルを削除するために“フラ
グ(flag)”をつけて、その後にフラグがつけられたファイルを削除をする方法で
す。

‘d’
     削除するために、このファイルにフラグをつけます
     (‘dired-flag-file-deletion’)。
‘u’
     削除フラグを外します(‘dired-unmark’)。
‘<DEL>’
     その行の削除フラグを外して、ポイントを前の行に移動します
     (‘dired-unmark-backward’)。
‘x’
     削除のフラグがつけられたファイルを削除します
     (‘dired-do-flagged-delete’)。

   ファイルが記述されている行に移動して、‘d’
(‘dired-flag-file-deletion’)とタイプすることにより、ファイルを削除するた
めのフラグをつけることができます。削除フラグは行頭に‘D’が表示されます。
このコマンドはポイントを次の行に移動するので、‘d’コマンドを繰り返すこと
により、連続してファイルにフラグをつけることができます。数引数は繰り返し
回数を指定します。負の引数は前のファイルにフラグをつけることを意味します
。

   リージョンがアクティブの場合、‘d’コマンドはリージョンのすべてのファイ
ルに削除のフラグをつけます。この場合、コマンドはポイントを移動せず、プレ
フィクス引数も無視します。

   ファイルを即座に削除せず、削除のフラグをファイルにつける理由は、意図
しないファイルを削除する危険を軽減するためです。フラグがついたファイルを
Diredに削除をさせる前に、コマンド‘u’または<DEL>で、削除フラグを外すこと
ができます。‘u’ (‘dired-unmark’)は‘d’と同じように機能しますが、これはフ
ラグをつけるのではなくフラグを外します。<DEL> (‘dired-unmark-backward’)は
、上に移動してフラグを外します。これは‘u’に引数−1を指定するのと同じです
。どちらのコマンドも、数引数は繰り返し回数で、負の引数は反対方向にフラグ
を外していくことを意味します。リージョンがアクティブの場合、ポイントを移
動せずにリージョン内のすべてのファイルのフラグを外します。

   フラグがついたファイルを削除するには、‘x’
(‘dired-do-flagged-delete’)とタイプします。このコマンドは削除フラグがつ
いた、すべてのファイルのリストを表示して、確認を求めます。もしこれに
‘yes’と応えた場合、Diredはフラグがついたファイルを削除して、それらのファ
イルにたいするDiredバッファーの行を削除します。Diredバッファーの行数は少
し減り、バッファーは選択されたまま残ります。

   確認を求められたとき‘no’と応えるか、‘C-g’で中断した場合は、即座に
Diredに戻ります。バッファーの削除フラグはそのまま残り、実際に削除された
ファイルはありません。

   空のディレクトリーは他のファイルと同じように削除できますが、Diredは通
常、空でないディレクトリーは削除できません。変数
‘dired-recursive-deletes’が非‘nil’の場合、Diredはディレクトリーの内容も
含めて、空でないディレクトリーを削除できますが、これは少し危険です。

   変数‘delete-by-moving-to-trash’を‘t’に変更した場合、上記の削除コマン
ドは対象となるファイルおよびディレクトリーを削除するかわりに、システムの
Trash(ゴミ箱)に移動します。*note Misc File Ops::を参照してください。


File: emacs-ja.info,  Node: Flagging Many Files,  Next: Dired Visiting,  Prev: Dired Deletion,  Up: Dired

30.4 大量のファイルに一度にフラグをつける
=========================================

コマンド‘#’、‘~’、‘.’、‘% &’、‘% d’は、ファイル名にもとづき多くのファイ
ルにフラグをつけます。

‘#’
     すべての自動保存ファイル(名前の最初と最後が‘#’のファイル)にたいして
     、削除のフラグをつけます(*note Auto Save::を参照してください)。

‘~’
     すべてのバックアップファイル(名前の最後が‘~’のファイル)にたいして、
     削除のフラグをつけます(*note Backup::を参照してください)。

‘. (ピリオド)’
     余分な番号付きバックアップファイルに、削除のフラグをつけます。一番
     古いものと、一番新しいバックアップのいくつかは除外され、その中間の
     ファイルにフラグがつけられます。

‘% &’
     簡単にファイルを再作成できることを示唆する、特定の種類の名前をもつ
     すべてのファイルに削除のフラグをつけます。

‘% d REGEXP <RET>’
     正規表現REGEXPにマッチする名前の、すべてのファイルに削除のフラグを
     つけます。

   ‘#’ (‘dired-flag-auto-save-files’)は、名前が自動保存ファイルに見える
— つまり名前の最初と最後が‘#’の、すべてのファイルにフラグをつけます。
*note Auto Save::を参照してください。

   ‘~’ (‘dired-flag-backup-files’)は、名前がバックアップファイルであるこ
とを告げる — つまり名前の最後が‘~’の、すべてのファイルにフラグをつけます
。*note Backup::を参照してください。

   ‘.’ (ピリオド、‘dired-clean-directory’)は、いくつかのバックアップファ
イルだけに削除のフラグをつけます。つまり、最古と最新のいくつかのファイル
を除く、すべてのファイルです。残すべき最新バージョンの数は通常、変数
‘dired-kept-versions’(‘kept-new-versions’では_ありません_。これは保存時
だけ適用されます)で与えられます。残すべき最古バージョンの数は、変数
‘kept-old-versions’により与えられます。

   ‘C-u 3 .’のように、ピリオドに正の数引数を指定すると、
‘dired-kept-versions’をオーバーライドして、残すべき最新バージョンの数を
指定します。負の引数は‘kept-old-versions’をオーバーライドします。引数の
値にマイナスをつけると、残すべき最古バージョンの数を指定します。

   ‘% &’ (‘dired-flag-garbage-files’)は、変数
‘dired-garbage-files-regexp’で指定される正規表現に、名前がマッチするファ
イルにフラグをつけます。デフォルトでは、TeXにより生成される‘.bak’ファイ
ルと、‘patch’により生成される‘.orig’ファイルと‘.rej’ファイルにマッチしま
す。

   ‘% d’は、指定された正規表現に名前がマッチするすべてのファイルにフラグ
をつけます(‘dired-flag-files-regexp’)。マッチングにはファイル名の非ディ
レクトリー部分だけが使用されます。マッチのアンカーとして‘^’と‘$’を使用で
きます。‘% d’を使用するとき、特定のサブディレクトリーを隠して除外できま
す。*note Hiding Subdirectories::を参照してください。


File: emacs-ja.info,  Node: Dired Visiting,  Next: Marks vs Flags,  Prev: Flagging Many Files,  Up: Dired

30.5 Diredのファイルをvisitする
===============================

Diredバッファーにリストされたファイルをvisitしたり、調べるためのDiredコ
マンドが、いくつかあります。これらのコマンドは、すべてカレント行のファイ
ルに適用されます。そのファイルが実際にはディレクトリーの場合、これらのコ
マンドは(別のDiredバッファーを作成して)、そのサブディレクトリーにたいし
てDiredを呼び出します。

‘f’
     ‘C-x C-f’とタイプしてファイル名を指定したときと同じように、カレント
     行に記述されたファイルをvisitします(‘dired-find-file’)。*note
     Visiting::を参照してください。

‘<RET>’
‘e’
     ‘f’と等価です。

‘o’
     ‘f’と同じですが、そのファイルのバッファーに別のウィンドウを使用しま
     す(‘dired-find-file-other-window’)。Diredバッファーは、最初のウィン
     ドウに表示されたまま残ります。これは‘C-x 4 C-f’を使用して、ファイル
     をvisitするのと似ています。*note Windows::を参照してください。

‘C-o’
     カレント行に記述されたファイルをvisitし、そのバッファーを別のウィン
     ドウで表示しますが、そのウィンドウを選択しません
     (‘dired-display-file’)。

‘Mouse-1’
‘Mouse-2’
     クリックした名前のファイルをvisitします
     (‘dired-mouse-find-file-other-window’)。これは‘o’コマンドのように、
     ファイルの表示に別のウィンドウを使います。

‘v’
     カレント行に記述されたファイルを、Viewモードで表示します
     (‘dired-view-file’)。Viewモードは、バッファーを移動するための便利な
     コマンドを提供しますが、バッファーの変更はできません。*note View
     Mode::を参照してください。

‘^’
     カレントディレクトリーの親ディレクトリーをvisitします
     (‘dired-up-directory’)。これは、‘..’の行に移動して‘f’をタイプするの
     と等価です。


File: emacs-ja.info,  Node: Marks vs Flags,  Next: Operating on Files,  Prev: Dired Visiting,  Up: Dired

30.6 Diredでのマークとフラグ
============================

ファイルに‘D’というフラグをつけるのではなく、他の文字(通常は‘*’)でファイ
ルを“マーク”することもできます。ほとんどのDiredコマンドは、‘*’でマークさ
れたファイルにたいしてコマンドを処理します。フラグ付けされたファイルだけ
に作用するコマンドは、それらのファイルを削除する‘x’だけです。

   以下は‘*’でマークしたり、マークを外したり、マークにたいして操作を行な
うコマンドです(ファイルにたいしてフラグをつけたり外すコマンドについては
、*note Dired Deletion::を参照してください)。

‘m’
‘* m’
     カレントファイルを‘*’でマークします(‘dired-mark’)。リージョンがアク
     ティブの場合、かわりにリージョン内のすべてのファイルをマークします
     。そうでない場合、数引数Nが与えられたときは、カレント行から数えて、
     次のN個のファイルまでをマークします(Nが負の場合、前の−N個のファイル
     をマークします)。

‘* *’
     すべての実行ファイルを‘*’でマークします(‘dired-mark-executables’)。
     数引数を指定すると、それらのファイルのマークを外します。

‘* @’
     すべてのシンボリックリンクを、‘*’でマークします
     (‘dired-mark-symlinks’)。数引数を指定すると、それらのファイルのマー
     クを外します。

‘* /’
     ‘.’と‘..’を除く、すべてのディレクトリーを‘*’でマークします
     (‘dired-mark-directories’)。数引数を指定すると、それらのディレクト
     リーのマークを外します。

‘* s’
     ‘.’と‘..’を除く、カレントのサブディレクトリー内のすべてのファイルを
     マークします(‘dired-mark-subdir-files’)。

‘u’
‘* u’
     この行の任意のマークを外します(‘dired-unmark’)。リージョンがアクテ
     ィブの場合は、かわりにリージョン内のすべてのファイルのマークを外し
     ます。そうでない場合、数引数Nが与えられた場合は、カレントファイルか
     ら数えて、次のN個のファイルのマークを外します(Nが負の場合、前の−N個
     のファイルのマークを外します)。

‘<DEL>’
‘* <DEL>’
     ポイントを前の行に移動して、その行のマークを外します
     (‘dired-unmark-backward’)。リージョンがアクティブの場合、かわりにリ
     ージョン内のすべてのファイルのマークを外します。そうでない場合、数
     引数Nが与えられたときは、カレントファイルから数えて、前のN個のファ
     イルのマークを外します(Nが負の場合、次の−N個のファイルのマークを外
     します)。

‘* !’
‘U’
     Diredバッファーの、すべてのファイルのマークを外します
     (‘dired-unmark-all-marks’)。

‘* ? MARKCHAR’
‘M-<DEL>’
     文字MARKCHARを使用する、すべてのマークを外します
     (‘dired-unmark-all-files’)。引数は1文字です — これを終了させるため
     に<RET>を使用しないでください。以下の‘* c’の説明を参照してください
     。これは1つのマーク文字を、他の文字に置換します。

     数引数を指定した場合、このコマンドはマークされたファイルごとに、マ
     ークを外すか確認します。‘y’はyes(はい)で、‘n’はno(いいえ)、‘!’は残
     りのファイルにたいして確認を行なわずにマークを外します。

‘* C-n’
‘M-}’
     次にマークされたファイルへ下に移動します
     (‘dired-next-marked-file’)。“マークされた”ファイルとは、任意の種類
     のマークがついているファイルです。

‘* C-p’
‘M-{’
     前のマークされたファイルへ、上に移動します
     (‘dired-prev-marked-file’)。

‘t’
‘* t’
     すべてのマークを切り替えます(‘dired-toggle-marks’)。つまり、‘*’でマ
     ークされたファイルのマークを外し、マークされていないファイルを‘*’で
     マークします。他の方法でマークされたファイルは影響を受けません。

‘* c OLD-MARKCHAR NEW-MARKCHAR’
     文字OLD-MARKCHARを使ったすべてのマークを、文字NEW-MARKCHARを使った
     マークに置き換えます(‘dired-change-marks’)。このコマンドは主に‘*’や
     ‘D’以外の文字を使用したマークを作成するのに使われます。引数は1文字
     です — 終了させるために<RET>を使用しないでください。

     このコマンドは、マーク文字としてほとんどの任意の文字を使用できるの
     で、ファイルをさまざまなクラスに分類することができます。
     OLD-MARKCHARがスペース(‘ ’)の場合、このコマンドは、すべてのマークさ
     れていないファイルにたいして処理を行ないます。NEW-MARKCHARがスペー
     スの場合、このコマンドは対象となるファイルのマークを外します。

     このコマンドの威力を知る例として、以下ではマークされていないファイ
     ルすべてにフラグ‘D’をセットして、すでに‘D’フラグがついているものは
     フラグを外しています:

          * c D t  * c <SPC> D  * c t <SPC>

     この例では、すでに‘t’でマークされたファイルがないと仮定しています。

‘% m REGEXP <RET>’
‘* % REGEXP <RET>’
     名前が正規表現REGEXPにマッチするすべてのファイルを、(‘*’で)マークし
     ます(‘dired-mark-files-regexp’)。このコマンドは‘% d’と似ていますが
     、‘D’のフラグをつけるかわりに、‘*’でマークします。

     マッチングには、ファイル名のディレクトリー部分以外だけが使用されま
     す。マッチのアンカーとして、‘^’と‘$’が使用できます。サブディレクト
     リーを一時的に隠すことにより、それらを除外できます(*note Hiding
     Subdirectories::を参照してください)。

‘% g REGEXP <RET>’
     ファイルの_内容_が正規表現REGEXPにマッチする、すべてのファイルを
     (‘*’で)マークします(‘dired-mark-files-containing-regexp’)。このコマ
     ンドは‘% m’と似ていますが、ファイル名ではなくファイル内容を検索しま
     す。

‘C-/’
‘C-x u’
‘C-_’
     Diredバッファーでの、マークの追加や削除などの変更をアンドゥします
     (‘dired-undo’)。_このコマンドは実際のファイル操作をリバートしたり、
     失われたファイルを回復しません!_ これは単にバッファー自身にたいする
     変更をアンドゥするだけです。

     ファイルを操作するコマンドの後でこれを使用することにより、問題が起
     こる場合もあります。たとえば1つ以上のファイルをリネームしてから、
     Diredバッファーで‘dired-undo’により元の名前にリストアした場合、
     Diredバッファーと、そのディレクトリーの実際の内容が、同期しなくなり
     ます。


File: emacs-ja.info,  Node: Operating on Files,  Next: Shell Commands in Dired,  Prev: Marks vs Flags,  Up: Dired

30.7 ファイルにたいする操作
===========================

このセクションでは、1つまたは複数のファイルを操作する、基本的なDiredコマ
ンドを説明します。これらのコマンドはすべて大文字で、引数を読み取ったり、
実際に動作する前に確認を求めるのに、ミニバッファーを使用します。これらの
コマンドはすべて、以下の方法により操作するファイルを指定します:

   • コマンドに数引数Nを与えると、カレントファイルから数えて、次のN個の
     ファイルを操作します(Nが負の場合、コマンドはカレント行の前の、−N個
     のファイルを操作します)。

   • 上記以外の場合、‘*’でマークされたファイルがあるときは、コマンドはそ
     れらすべてのファイルを操作します。

   • 上記以外の場合、コマンドはカレントファイルだけを操作します。

コマンド‘!’や‘%’のような他のDiredコマンドにも、操作対象となるファイルを
決定するのに、同じ規則を使うものがあります。

   ファイルのコピーやリネーム、それらにたいするリンクを作成するような、
対象ディレクトリーを尋ねるコマンドは、操作のためにデフォルトの対象ディレ
クトリーの推論を試みます。これらのコマンドは通常、Diredバッファーのデフ
ォルトディレクトリーを提案しますが、変数‘dired-dwim-target’が非‘nil’で、
次のウィンドウに他のDiredバッファーが存在しない場合は、その他のバッファ
ーのディレクトリーをかわりに提案します。

   以下は、ファイルにたいして操作を行なうDiredコマンドです。

‘C NEW <RET>’
     指定されたファイルをコピーします(‘dired-do-copy’)。引数NEWはコピー
     先のディレクトリー、または(1つのファイルをコピーする場合は)新しいフ
     ァイル名です。これはシェルコマンド‘cp’と似ています。

     ‘dired-copy-preserve-time’が非‘nil’の場合、このコマンドでコピーする
     ことにより、‘cp -p’でコピーしたときのように、古いファイルの最終修正
     時刻(modification time)が保持されます。

     変数‘dired-recursive-copies’は、(‘cp -r’のように)ディレクトリーを再
     帰的にコピーするかを制御します。デフォルトは‘top’で、これはディレク
     トリーを再帰的にコピーする前に、確認を求めることを意味します。

‘D’
     指定されたファイルを削除します(‘dired-do-delete’)。これはシェルコマ
     ンド‘rm’と似ています。

     このセクションの他のコマンドと同様、このコマンドは_マークされたファ
     イル_、または次のN個のファイルを操作します。対照的に‘x’
     (‘dired-do-flagged-delete’)は、“フラグがついた”すべてのファイルを削
     除します。

‘R NEW <RET>’
     指定されたファイルをリネームします(‘dired-do-rename’)。1つのファイ
     ルをリネームする場合、引数NEWはファイルの新しい名前です。複数のファ
     イルをリネームする場合、引数NEWはファイルを移動するディレクトリーで
     す(これはシェルコマンド‘mv’と似ています)。

     Diredはリネームされたファイルに関連付けられたバッファーにより
     visitされたファイルの名前を自動的に変更するので、これらのバッファー
     は新しい名前を参照します。

‘H NEW <RET>’
     指定されたファイルのハードリンクを作成します(‘dired-do-hardlink’)。
     これはシェルコマンド‘ln’と似ています。引数NEWはリンクを中に作成する
     ディレクトリー、または(1つのリンクだけを作成する場合は)リンクに与え
     る名前です。

‘S NEW <RET>’
     指定されたファイルのシンボリックリンクを作成します
     (‘dired-do-symlink’)。これは‘ln -s’と似ています。引数NEWはリンクを
     中に作成するディレクトリー、または(1つのリンクだけを作成する場合は
     )リンクに与える名前です。

‘M MODESPEC <RET>’
     指定されたファイルのモード(“パーミッションビット”とも呼ばれる)を変
     更します(‘dired-do-chmod’)。MODESPECには、‘chmod’プログラムで扱われ
     る引数のような、8進かシンボル表記を指定できます。

‘G NEWGROUP <RET>’
     指定されたファイルのグループを、NEWGROUPに変更します
     (‘dired-do-chgrp’)。

‘O NEWOWNER <RET>’
     指定されたファイルの所有者を。NEWOWNERに変更します
     (‘dired-do-chown’。ほとんどのシステムでは、これを行なうことができる
     のはスーパーユーザーだけです)。

     変数‘dired-chown-program’は、処理を行なうために使用するプログラムの
     名前を指定します(システムが異なると、‘chown’が違う場所に配されてい
     る場合があります)。

‘T TIMESTAMP <RET>’
     指定されたファイルにtouchします。これはファイルの修正時刻を、現在時
     刻で更新することを意味します。これはシェルコマンド‘touch’に似ていま
     す。

‘P COMMAND <RET>’
     指定されたファイルを印刷します(‘dired-do-print’)。それらを印刷する
     ためのコマンドを指定しなければなりませんが、ミニバッファー開始時に
     は、変数‘lpr-command’および‘lpr-switches’(‘lpr-buffer’が使用するの
     と同じ変数。*note Printing::を参照してください)を使用することにより
     推定された、適切な初期値が示されます。

‘Z’
     指定されたファイルを圧縮します(‘dired-do-compress’)。ファイルがすで
     に圧縮されているように見える場合は、それらを解凍します。

‘:d’
     指定されたファイルを復号化します(‘epa-dired-do-decrypt’)。*note
     (epa)Dired integration::を参照してください。

‘:v’
     指定されたファイルのデジタル署名を検証します
     (‘epa-dired-do-verify’)。*note (epa)Dired integration::を参照してく
     ださい。

‘:s’
     指定されたファイルにデジタル署名します(‘epa-dired-do-sign’)。*note
     (epa)Dired integration::を参照してください。

‘:e’
     指定されたファイルを暗号化します(‘epa-dired-do-encrypt’)。*note
     (epa)Dired integration::を参照してください。

‘L’
     指定されたEmacs Lispファイルをロードします(‘dired-do-load’)。*note
     Lisp Libraries::を参照してください。

‘B’
     指定されたEmacs Lispファイルをバイトコンパイルします
     (‘dired-do-byte-compile’)。*note Byte Compilation: (elisp)Byte
     Compilation.を参照してください。

‘A REGEXP <RET>’
     指定されたすべてのファイルにたいして、正規表現REGEXPを検索します
     (‘dired-do-search’)。

     このコマンドは‘tags-search’の変種です。検索は、最初のマッチが見つか
     ると停止します。‘M-,’を使用して検索を再開し、次のマッチを探します。
     *note Tags Search::を参照してください。

‘Q REGEXP <RET> TO <RET>’
     指定された各ファイルにたいして‘query-replace-regexp’を行い、
     REGEXPにたいするマッチを、文字列TOに置換します
     (‘dired-do-query-replace-regexp’)。

     このコマンドは‘tags-query-replace’の変種です。問い合わせ置換のルー
     プを抜けた場合、‘M-,’を使用して、より多くのマッチにたいする検索と置
     換を再開できます。*note Tags Search::を参照してください。


File: emacs-ja.info,  Node: Shell Commands in Dired,  Next: Transforming File Names,  Prev: Operating on Files,  Up: Dired

30.8 Diredでのシェルコマンド
============================

Diredコマンド‘!’ (‘dired-do-shell-command’)は、ミニバッファーでシェルの
コマンド文字列を読み取り、そのシェルコマンドを1つ以上のファイルにたいし
て実行します。シェルコマンドが処理するファイルは、Diredコマンドが操作す
るファイルを決定する方法と同じです(*note Operating on Files::を参照して
ください)。コマンド‘X’は、‘!’の別名です。

   コマンド‘&’ (‘dired-do-async-shell-command’)は同じことを行ないますが
、これはシェルコマンドを非同期で実行する点が異なります(‘!’でシェルコマン
ドの最後に文字‘&’を追加しても、同じことを行なうことができます)。コマンド
が複数のファイルを処理する場合、ファイルごとに指定したシェルコマンドの複
数コピーを並行で実行します。例外として、指定されたシェルコマンドが‘;’ま
たは‘;&’で終わる場合、バックグラウンドで実行されるシェルコマンドは、各フ
ァイルにたいして順番に実行されます。Emacsは次のコマンドを実行する前に、
呼び出したシェルコマンドが終了するのを待ちます。

   ‘!’と‘&’のどちらも、シェルコマンドの作業ディレクトリーは、Diredバッフ
ァーのトップレベルのディレクトリーです。

   ‘!’または‘&’に複数ファイルを処理させる場合、シェルコマンド文字列は、
シェルコマンドにそれらのファイルを渡す方法を決定します。

   • コマンド文字列の中で、空白文字に囲まれた‘*’を使用した場合、コマンド
     は1度だけ実行され、‘*’はファイル名のリストに置換されます。ファイル
     名の順番は、Diredバッファーでの出現順になります。

     したがって‘! tar cf foo.tar * <RET>’は、ファイル名全体のリストにた
     いして‘tar’を実行し、それらをtarファイル‘foo.tar’に格納します。

     空白文字で囲まれたシェルのワイルドカードとして‘*’を使用したい場合は
     、‘*""’と記述します。シェルではこれは‘*’と等価です。しかし‘*’が空白
     文字で囲まれていないので、Diredはこれを特別に扱うことができるのです
     。

   • 上記以外の場合で、コマンド文字列が空白文字で囲まれた‘?’を含むとき、
     Emacsは_各ファイル_ごとに一度シェルコマンドを実行します。その際、
     ‘?’はカレントファイルに置換されます。コマンドで複数回‘?’を使用でき
     、それぞれ同じファイル名に置換されます。

   • コマンド文字列が‘*’と‘?’のどちらも含まない場合、Emacsは各ファイルに
     たいしてシェルコマンドを1度実行し、その際ファイル名はコマンド文字列
     の最後に追加されます。たとえば‘! uudecode <RET>’は、各ファイルにた
     いして‘uudecode’を実行します。

   もっと複雑な方法でファイル名を繰り返すには、明示的なシェルループを使
用します。たとえば以下は、各ファイルをuuencodeして、入力ファイル名に
‘.uu’を追加して出力ファイル名を作成する例です:

     for file in * ; do uuencode "$file" "$file" >"$file".uu; done

   コマンド‘!’および‘&’は、新しいファイル、または変更されたファイルを表
示するために、Diredバッファーを更新しようとはしません。なぜならこれらの
コマンドは、どのファイルが変更されたかを知らないからです。Diredバッファ
ーを更新するには、‘g’を使用します(*note Dired Updating::を参照してくださ
い)。

   Diredの外でシェルコマンドを実行する情報に関しては、*note Single
Shell::を参照してください。


File: emacs-ja.info,  Node: Transforming File Names,  Next: Comparison in Dired,  Prev: Shell Commands in Dired,  Up: Dired

30.9 Diredでのファイル名の変更
==============================

このセクションでは、ファイル名を系統的な方法で変更する、Diredコマンドを
説明します。各コマンドは、既存の名前を変換することにより作成される新しい
名前を使って、マークされたファイルのいくつか、またはすべてのマークされた
ファイルを操作します。

   基本的なDiredのファイル操作コマンド(*note Operating on Files::を参照
してください)と同じように、ここで説明するコマンドは次のNファイル、または
‘*’でマークされたすべてのファイル、またはカレントファイルにたいして操作
を行ないます(ファイルをマークする方法は*note Marks vs Flags::で説明され
ています)。

   このセクションで説明するすべてのコマンドは、_対話的_に機能します。つ
まり候補となるファイルごとに確認を求めます。したがって、実際に操作が必要
なファイルより多くのファイルを選択(たとえばregexpにより多くのファイルを
選択)して、コマンドが確認を求めるときに‘y’または‘n’をタイプすることによ
り、選択されたファイルを絞り込むことができます。

‘% u’
     選択されたファイルを、大文字の名前にリネームします
     (‘dired-upcase’)。古いファイル名が‘Foo’と‘bar’の場合、新しい名前は
     ‘FOO’と‘BAR’になります。

‘% l’
     選択されたファイルを、小文字の名前にリネームします
     (‘dired-downcase’)。古いファイル名が‘Foo’と‘bar’の場合、新しい名前
     は‘foo’と‘bar’になります。

‘% R FROM <RET> TO <RET>’
‘% C FROM <RET> TO <RET>’
‘% H FROM <RET> TO <RET>’
‘% S FROM <RET> TO <RET>’
     これら4つのコマンドは、それぞれリネーム、コピー、ハードリンクの作成
     、ソフトリンクの作成を行い、古いファイル名にたいして正規表現による
     置換を行って、新しい名前を作成します。

   正規表現の置換を行なう4つのコマンドは、実際には選択されたファイルの名
前にたいして検索と置換を行ないます。これらのコマンドは2つの引数を読み取
ります。それは式FROMと、置換パターンTOです。これらは“古い”ファイル名にマ
ッチしたFROMを、TOに置き換えます。‘replace-regexp’ (*note Regexp
Replace::を参照してください)のように、古い名前にマッチしたパターンの全体
または一部を参照するために、TOの中で‘\&’や‘\DIGIT’を使用できます。正規表
現がファイル名の複数の箇所にマッチする場合は、最初のマッチだけが置換され
ます。

   たとえば‘% R ^.*$ <RET> x-\& <RET>’は、選択された各ファイルの名前の前
に‘x-’を追加してリネームします。逆に各ファイル名の前の‘x-’を削除すること
も可能です。1つは‘% R ^x-\(.*\)$ <RET> \1 <RET>’とする方法です。他にも‘%
R ^x- <RET> <RET>’とする方法もあります(ファイル名の範囲を指定するために
、アンカーへのマッチ‘^’および‘$’を使用しています)。

   置換処理は通常、ファイルのディレクトリー名は考慮しません。これはディ
レクトリーにあるファイル名だけを操作します。しかし数引数を0にした場合、
置換はディレクトリー名を含めた絶対ファイル名に作用します(非0の引数は、操
作するファイルの個数を指定します)。

   一連のファイルを操作対象に選択するために、それらを操作するときに使う
のと同じ正規表現FROMを使いたいと思うかもしれません。これを行なうには‘% m
FROM <RET>’でそれらのファイルをマークして、それらのファイルを操作するコ
マンドで同じ正規表現を使用します。もっと便利にするために、ファイルを操作
する‘%’コマンドは、最後の‘%’コマンドで指定された正規表現をデフォルトで使
用します。


File: emacs-ja.info,  Node: Comparison in Dired,  Next: Subdirectories in Dired,  Prev: Transforming File Names,  Up: Dired

30.10 Diredでのファイル比較
===========================

‘=’ (‘dired-diff’)コマンドは、‘diff’プログラムを使用して、カレントファイ
ル(ポイント位置のファイル)と他のファイル(ミニバッファーを使用して指定)を
比較します。ミニバッファーで指定されたファイルは、‘diff’の1番目の引数と
なり、ポイント位置のファイルは2番目の引数になります。‘diff’プログラムの
出力は、Diffモードを使用するバッファーで表示されます(*note Comparing
Files::を参照してください)。

   リージョンがアクティブの場合、ミニバッファーを使って読み取られるファ
イル名のデフォルトは、マーク(Diredのマークではなく、Emacsの通常のマーク
のこと。*note Setting Mark::を参照してください)の位置のファイルになりま
す。リージョンがアクティブでない場合、ポイント位置のファイルがバックアッ
プファイル(*note Backup::を参照してください)のときは、それがデフォルトに
なります。


File: emacs-ja.info,  Node: Subdirectories in Dired,  Next: Subdir Switches,  Prev: Comparison in Dired,  Up: Dired

30.11 Diredでのサブディレクトリー
=================================

Diredバッファーは通常、1つのディレクトリーだけを表示しますが、オプション
でサブディレクトリーも同様に含めることができます。

   1つのDiredバッファーに複数のディレクトリーを含める一番簡単な方法は、
‘ls’にオプション‘-lR’を指定して実行する方方です(Diredを実行するとき数引
数を指定すると、ミニバッファーでこれらのオプションを指定できます)。これ
はすべてのサブディレクトリーの、すべてのレベルにたいして、再帰的にディレ
クトリーを一覧します。

   特定のサブディレクトリーだけを見たいときもあります。これは‘i’
(‘dired-maybe-insert-subdir’)により行なうことができます:

‘i’
     サブディレクトリーの内容を、バッファーの最後に挿入します。

ディレクトリーを記述する行でこのコマンドを使用した場合、同じDiredバッフ
ァーにそのディレクトリーの内容を挿入して、そこに移動します。サブディレク
トリーの内容は、‘ls -lR’の出力と同じように、Diredバッファーのトップレベ
ルのディレクトリーの後に挿入されます。

   サブディレクトリーの内容がすでにバッファーに表示されている場合、‘i’コ
マンドはそこに移動するだけです。

   どちらの場合もm‘i’は移動する前にマークをセットするので、‘C-u
C-<SPC>’でDiredバッファーの元の位置に戻ることができます(*note Setting
Mark::を参照してください)。‘^’を使って、同じDiredバッファーの親ディレク
トリーに戻ることもできます(*note Dired Visiting::を参照してください)。

   ‘l’ (‘dired-do-redisplay’)コマンドを使用すると、サブディレクトリーの
内容を更新し、サブディレクトリーのヘッダー行で‘C-u k’を使用すると、サブ
ディレクトリーのリストを削除します(*note Dired Updating::を参照してくだ
さい)。挿入したサブディレクトリーを、隠したり表示したりすることもできま
す(*note Hiding Subdirectories::を参照してください)。


File: emacs-ja.info,  Node: Subdir Switches,  Next: Subdirectory Motion,  Prev: Subdirectories in Dired,  Up: Dired

30.12 Diredでのサブディレクトリーにたいするスイッチ
===================================================

‘C-u i’を使うことにより、‘ls’のスイッチを指定して、Diredバッファーにサブ
ディレクトリーを挿入できます。すでに挿入されたサブディレクトリーの‘ls’ス
イッチを変更するには、その位置で‘C-u l’を使用します。

   バッファーをリバートしたとき、Diredはこれらのスイッチを保持します。サ
ブディレクトリーを削除すると、それにたいするスイッチは忘れられます。

   ‘dired-undo’ (*note Marks vs Flags::を参照してください) を使用するこ
とにより、スイッチを明示的に指定して挿入されたサブディレクトリーにたいし
て、それらのスイッチを記憶する(または忘れる)ためのDiredの機構をバイパス
して、それらのサブディレクトリーの再挿入または削除を行なうことができます
。‘dired-undo’を使用してサブディレクトリーを削除しても、それのスイッチは
記憶されています。後で‘i’を使ってサブディレクトリーを再挿入すると、これ
は古いスイッチを使用してサブディレクトリーを再挿入します。
(‘dired-undo’ではなく)通常のDiredコマンドを使って削除されたサブディレク
トリーを、‘dired-undo’を使って再挿入すると、最初は古いスイッチを使ってサ
ブディレクトリーを挿入します。しかしバッファーをリバートすると。バッファ
ーのデフォルトのスイッチを使って再リストします。これが問題な場合、‘C-u
i’か‘C-u l’で、この状況を正すことができます。

   Diredは‘R’スイッチを記憶しません。‘R’スイッチを含むスイッチでサブディ
レクトリーを挿入すると、それはそのサブディレクトリーの各サブディレクトリ
ーそれぞれにたいして、残りのスイッチを使用して挿入を行なうのと等価です。
たとえば‘R’で挿入されたサブディレクトリを更新またはkillしても、それのサ
ブディレクトリーは更新またはkillされません。

   バッファーのデフォルトスイッチは、明示的にスイッチを指定して挿入され
たサブディレクトリーに影響を与えません。特にバッファーのスイッチを変更す
る‘s’のようなコマンドは、そのようなサブディレクトリーに影響を与えません
(しかし明示的にスイッチを割り当てられていないサブディレクトリーには影響
します)。

   ‘M-x dired-reset-subdir-switches’を使うことにより、Diredにサブディレ
クトリーにたいするスイッチをすべて忘れさせて、すべてのサブディレクトリー
を再びリストさせることができます。これはDiredのバッファーもリバートしま
す。


File: emacs-ja.info,  Node: Subdirectory Motion,  Next: Hiding Subdirectories,  Prev: Subdir Switches,  Up: Dired

30.13 サブディレクトリー間の移動
================================

Diredバッファーがサブディレクトリーを一覧している場合、ディレクトリー全
体を移動するためのページ移動コマンド‘C-x [’および‘C-x ]’を使用することが
できます。

   以下のコマンドは、ディレクトリー単位で移動したり、Diredバッファーのデ
ィレクトリーツリーを上下に移動します。これらのコマンドは、“ディレクトリ
ーヘッダー行”に移動します。ディレクトリーヘッダー行とは、ディレクトリー
の名前を示す行で、ディレクトリー内容の最初に表示されます。

‘C-M-n’
     ディレクトリーのレベルに関係なく、次のサブディレクトリーのヘッダー
     行に移動します(‘dired-next-subdir’)。

‘C-M-p’
     ディレクトリーのレベルに関係なく、前のサブディレクトリーのヘッダー
     行に移動します(‘dired-prev-subdir’)。

‘C-M-u’
     親ディレクトリーのヘッダー行に移動します(‘dired-tree-up’)。

‘C-M-d’
     次のサブディレクトリーのヘッダー行に、ディレクトリーツリーを下に移
     動します(‘dired-tree-down’)。

‘<’
     前のディレクトリーファイル行に、上へ移動します
     (‘dired-prev-dirline’)。これは親ディレクトリーのファイルとして、デ
     ィレクトリーが記述されている行のことです。

‘>’
     次のディレクトリーファイル行に、下へ移動します
     (‘dired-prev-dirline’)。


File: emacs-ja.info,  Node: Hiding Subdirectories,  Next: Dired Updating,  Prev: Subdirectory Motion,  Up: Dired

30.14 サブディレクトリーを隠す
==============================

サブディレクトリーを“隠す”とは、ヘッダー行を除きそれを非表示にすることを
意味します。

‘$’
     ポイント位置のサブディレクトリーを隠す、または表示します
     (‘dired-hide-subdir’)。これは切り替えコマンドです。数引数は繰り返し
     回数として機能します。

‘M-$’
     Diredバッファーのすべてのサブディレクトリーを、ヘッダー行だけを残し
     て隠します(‘dired-hide-all’)。1つでも隠されたサブディレクトリーがあ
     る場合、すべてのサブディレクトリーを再表示します。非常に深いディレ
     クトリーツリーの概観を得たり、離れた場所のサブディレクトリーに素早
     く移動するために、このコマンドを使うことができます。

   通常のDiredコマンドは、隠されたサブディレクトリーの中のファイルは考慮
しません。たとえばマークされたファイルを操作するコマンドは、たとえファイ
ルがマークされていても、それが隠されたディレクトリーの中にある場合は、そ
れらを無視します。したがって、サブディレクトリーのファイルにつけられた
Diredマークを外さなくても、そのサブディレクトリーを一時的に隠せば、操作
対象から除外することができます。

   サブディレクトリーのリストを挿入する方法については*note
Subdirectories in Dired::を、それを削除する方法については*note Dired
Updating::を参照してください。


File: emacs-ja.info,  Node: Dired Updating,  Next: Dired and Find,  Prev: Hiding Subdirectories,  Up: Dired

30.15 Diredバッファーの更新
===========================

このセクションでは、外部(Diredではない)のディレクトリーやファイルに対す
る変更を反映してDiredバッファーを更新したり、Diredバッファーの一部を削除
するコマンドを説明します。

‘g’
     Diredバッファーの内容全体を更新します(‘revert-buffer’)。

‘l’
     指定したファイルを更新します(‘dired-do-redisplay’)。‘l’にたいするフ
     ァイルの指定は、ファイル操作にたいするファイル指定と同じ方法で行な
     います。

‘k’
     指定した_ファイル行_(ファイルではなく、その行だけ)を削除します
     (‘dired-do-kill-lines’)。

‘s’
     並び替えをアルファベット順、日時順に切り替えます
     (‘dired-sort-toggle-or-edit’)。

‘C-u s SWITCHES <RET>’
     SWITCHESを‘dired-listing-switches’に使用して、Diredバッファーを更新
     します。

   ‘g’ (‘revert-buffer’)とタイプすると、リストされたファイルやディレクト
リーにたいする変更にもとづき、Diredバッファーの内容を更新します。消され
たファイルを除き、すでにあるマークはすべて保持されます。隠されたサブディ
レクトリーも更新されますが、隠されたまま残ります。

   いくつかのファイルだけ更新するには、‘l’ (‘dired-do-redisplay’)とタイ
プします。Diredのファイル操作コマンドと同様に、このコマンドは次のNファイ
ル(または前の−Nファイル)、または(もしあれば)マークされたファイル、または
カレントファイルを操作します。ファイルの更新とは、ファイルの現在の状態を
読み取り、バッファーの対応する行がその状態を示すように、その行を更新する
ことを意味します。

   サブディレクトリーのヘッダー行で‘l’を使用した場合、対応するサブディレ
クトリーの内容を更新します。

   ‘C-x d’や他のDiredコマンドを使用して、すでにDiredバッファーで表示され
ているディレクトリーをvisitする場合、Diredはそのバッファーに切り替えます
が更新はしません。そのバッファーが最新でない場合、Diredは<g>をタイプして
更新するよう警告を表示します。再visitしたとき、自動的にDiredバッファーを
リバートするようEmacsに指示するには、変数‘dired-auto-revert-buffer’を非
‘nil’値にセットしてください。

   バッファーから_ファイル行_ — 実際のファイルではなく ｰｰｰ を削除するに
は、‘k’ (‘dired-do-kill-lines’)とタイプします。ファイル操作コマンドと同
じように、このコマンドは次のNファイル、またはもしあればマークされたファ
イルを操作します。しかし、間違って‘k’をタイプしたとき面倒なので、カレン
トファイルは操作しません。

   すでにDiredバッファーにサブディレクトリーとして挿入したディレクトリー
ファイル行で、‘k’(*note Subdirectories in Dired::を参照してください)とタ
イプすると、これはサブディレクトリーのリストも同様に削除します。サブディ
レクトリーのヘッダー行で‘C-u k’とタイプしても、Diredバッファーからサブデ
ィレクトリーの行を削除できます。

   この方法でkillした個別の行は‘g’で元通り表示されますが、サブディレクト
リーについては、‘i’を使ってサブディレクトリーを再挿入しなければなりませ
ん。

   Diredバッファーのファイルは通常、ファイル名のアルファベット順で一覧さ
れます。かわりにDiredは日時順でソートすることもできます。Diredコマンド
‘s’ (‘dired-sort-toggle-or-edit’)は2、つのソートモードを切り替えます。
Diredバッファーのモードラインには、現在のソート方法がby nameやby dateの
ように示されます。

   ‘C-u s SWITCHES <RET>’で、‘dired-listing-switches’に新しい値を指定で
きます。


File: emacs-ja.info,  Node: Dired and Find,  Next: Wdired,  Prev: Dired Updating,  Up: Dired

30.16 Diredと‘find’
===================

ファイルを選択するために‘find’ユーティリティーを使うことにより、Diredバ
ッファーに表示する一連のファイルを、より柔軟に選択できます。

   ワイルドカードパターンに名前がマッチするファイルを検索するには、‘M-x
find-name-dired’を使います。これは引数DIRECTORYとPATTERNを読み取り、
DIRECTORYおよびそのサブディレクトリーで、名前がPATTERNにマッチするすべて
のファイルを選択します。

   これにより選択されたファイルはDiredバッファーに表示され、通常の
Diredコマンドが利用可能です。

   ファイルの名前ではなく内容をテストしたいときは、‘M-x
find-grep-dired’を使用します。ものコマンドはミニバッファーで2つの引数
DIRECTORYとREGEXPを読み取ります。これはDIRECTORYまたはそれのサブディレク
トリーで、内容がREGEXPにマッチするすべてのファイルを選択します。このコマ
ンドは、プログラム‘find’および‘grep’を実行することにより機能します。
*note Grep Searching::の‘M-x grep-find’も参照してください。正規表現を記
述するときは、Emacsにたいしてではなく、‘grep’にたいして記述することを忘
れないでください(与えられたregexpに内容がマッチするファイルを表示する別
の方法として、‘% g REGEXP’があります。*note Marks vs Flags::を参照してく
ださい)。

   この系列でもっとも一般的なコマンドは‘M-x find-dired’で、これは
‘find’がテストできる任意の条件を指定することができます。これはミニバッフ
ァーで2つの引数DIRECTORYとFIND-ARGSを受け取ります。このコマンドは、
‘find’がどのような条件でテストを行なうかを指定するFIND-ARGSを引数として
、DIRECTORYで‘find’を実行します。このコマンドを使うためには、‘find’の使
い方を理解する必要があります。

   これらのコマンドで生成されるリストの書式は変数‘find-ls-option’により
制御されます。これは一対のオプションです。1番目にファイル一覧を生成する
ために‘find’をどのように呼び出すか、2番目にその出力をDiredが解析するかを
指定します。

   コマンド‘M-x locate’は、‘locate’プログラムと似たインターフェースを提
供します。‘M-x locate-with-filter’も同様ですが、与えられた正規表現に名前
がマッチするファイルだけを保持します。

   これらのバッファーは、通常のDiredバッファーと完全に同じようには機能し
ません。ファイル操作は機能しますが、常にバッファーを自動的に更新するわけ
ではありません。‘g’でバッファーをリバートすると、挿入されたサブディレク
トリーは削除され、フラグとマークはすべてリセットされます。


File: emacs-ja.info,  Node: Wdired,  Next: Image-Dired,  Prev: Dired and Find,  Up: Dired

30.17 Diredバッファーの編集
===========================

Wdiredは、Diredバッファーを直接変更することによりファイル操作を行なうこ
とができる、特別なモードです(“Wdired”の“W”は、“writable: 書き込み可能”が
由来です)。Wdiredモードに入るには、Diredバッファーで‘C-x C-q’
(‘dired-toggle-read-only’)とタイプします。かわりに、メニューアイテムの
‘Immediate / Edit File Names’を使うこともできます。

   Wdiredモードでは、Diredバッファーに表示されているファイルの名前を編集
することにより、ファイルをリネームできます。矩形操作や‘query-replace’も
含めて、通常のEmacs編集コマンドがすべて利用できます。編集を終えたら‘C-c
C-c’ (‘wdired-finish-edit’)とタイプします。これにより変更が適用され、通
常のDiredモードに戻ります。

   単なるファイルのリネーム以外に、ファイルの新しい名前をタイプすること
により(絶対ファイル名でも相対ファイル名でも可)、ファイルを他のディレクト
リーに移動することもできます。ファイルに削除のマークをつけるには、ファイ
ル名全体を削除します。シンボリックリンクのリンク先を変更するには、リンク
名の隣に表示されているリンク先の名前を編集します。

   ファイルサイズや修正時刻など、バッファーの残りのテキストは読み込み専
用にマークされているので、編集できません。しかし
‘wdired-allow-to-change-permissions’を‘t’にセットした場合、ファイルのパ
ーミッションを編集できます。たとえば‘-rw-r--r--’を‘-rw-rw-rw-’に変更する
ことにより、そのファイルを誰でも書き込めるようにできます。これらの変更は
、‘C-c C-c’をタイプしたときに効果をもちます。


File: emacs-ja.info,  Node: Image-Dired,  Next: Misc Dired Features,  Prev: Wdired,  Up: Dired

30.18 Diredでのイメージとサムネイルの閲覧
=========================================

Image-Diredは、イメージファイルをブラウズする機能です。これはイメージフ
ァイルにたいして、Emacs内または外部ビューアーを用いた、サムネイルまたは
フルサイズでの閲覧を提供します。

   Image-Diredに入るには、Diredバッファーで見たいイメージファイルを、通
常のように‘m’を使ってマークします。それから‘C-t d’
(‘image-dired-display-thumbs’)とタイプします。これはマークしたファイルに
対応するimage-diredのバッファーを作成して切り替えます。

   ‘M-x image-dired’とタイプすることにより、直接Image-Diredに入ることも
できます。これはディレクトリーの入力を求めるので、イメージファイルがある
ディレクトリーを指定します。これによりそのディレクトリーにある、すべての
イメージファイルのサムネイルが作成され、それらは“thumbnailバッファー”に
表示されます。ディレクトリーに大量のイメージファイルがある場合は長時間を
要するため、イメージファイルの数が、
‘image-dired-show-all-from-dir-max-files’を越える場合は確認を求めます。

   thumbnailバッファーのサムネイルにポイントを移動して、<RET>
(‘image-dired-display-thumbnail-original-image’)とタイプすると、サイズ調
整されたバージョンを別のウィンドウに表示します。これはイメージをウィンド
ウにフィットするようにサイズ調整します。バッファー内の移動は矢印キーを使
用します。簡単にブラウズするには、次のイメージに移動して、それを表示する
<SPC> (‘image-dired-display-next-thumbnail-original’)を使用します。<DEL>
(‘image-dired-display-previous-thumbnail-original’)とタイプすると、前の
サムネイルに戻って、かわりにそれを表示します。

   イメージをオリジナルのサイズで閲覧するには、<RET>を押す前にプレフィク
ス引数(‘C-u’)を与えるか、‘C-<RET>’
(‘image-dired-thumbnail-display-external’)とタイプして、イメージを外部ビ
ューアーで表示します。これは最初に、‘image-dired-external-viewer’を設定
しなければなりません。

   Image-Diredを通じて、イメージを削除することもできます。‘d’
(‘image-dired-flag-thumb-original-file’)とタイプすると、Diredバッファー
でそのイメージに削除のフラグをつけます。thumbnailバッファーで‘C-d’
(‘image-dired-delete-char’)とタイプすることにより、サムネイルイメージを
削除することもできます。

   さらに上級の機能として、“イメージタグ(image tags)”があります。これは
イメージをカテゴリー分けするために使用されるメタデータです。このタグは、
‘image-dired-db-file’により設定されるプレーンテキストファイルに格納され
ます。

   イメージファイルにタグ付けするには、それらをDiredバッファーでマークし
て(thumbnailバッファーで‘m’をタイプして、Diredのファイルをマークすること
もできます)、‘C-t t’ (‘image-dired-tag-files’)とタイプします。このコマン
ドはミニバッファーでタグ名読み取ります。特定のタグをもつファイルをマーク
するには、‘C-t f’ (‘image-dired-mark-tagged-files’)とタイプします。特定
のタグをもつイメージファイルをマークした後は、‘C-t d’を使ってそれらを閲
覧することができます。

   thumbnailバッファーから直接ファイルにタグ付けするには‘t t’とタイプし
、タグを削除するには‘t r’とタイプします。各ファイルにたいして、“コメント
”と呼ばれる特別な“タグ”があります(コメントは他のタグと正確に同じ意味での
タグではありません。コメントは若干異なる扱いをされるからです)。コメント
タグは、イメージについてのコメントや説明を入力するのに使用されます。
thumbnailバッファーでコメントするには、‘c’とタイプします。これはコメント
の入力を求めます。Diredからコメントを追加するには、‘C-t c’
(‘image-dired-dired-comment-files’)とタイプしてください。

   Image-Diredは、シンプルなイメージ操作も提供します。thumbnailバッファ
ーで‘L’とタイプすると、オリジナルのイメージを反時計回りに90度ローテート
し、‘R’で時計回りにローテートします。このローテーションは損失がなく、
JpegTRANと呼ばれる外部ユーティリティーを使用します。


File: emacs-ja.info,  Node: Misc Dired Features,  Prev: Image-Dired,  Up: Dired

30.19 その他のDiredの機能
=========================

コマンド‘+’ (‘dired-create-directory’)はディレクトリー名を読み取り、その
ディレクトリーを作成します。そのディレクトリーがすでに存在する場合は、エ
ラーをシグナルします。

   コマンド‘M-s a C-s’ (‘dired-do-isearch’)は、マークされたファイルにた
いして、“複数ファイル”にたいするインクリメンタル検索を開始します。ファイ
ル終端で検索が失敗した場合、‘C-s’とタイプすると、マークされた次のファイ
ルで検索を繰り返します。マークされた最後のファイルの終端に達すると、マー
クされた最初のファイルに戻って検索します。コマンド‘M-s a M-C-s’
(‘dired-do-isearch-regexp’)は、同じことを正規表現検索で行ないます。検索
の繰り返しに関する情報は、*note Repeat Isearch::を参照してください。

   コマンド‘w’ (‘dired-copy-filename-as-kill’)は、マークされたファイル
(または次のNファイル)の名前を、あたかも‘C-w’でkillしたかのように、killリ
ングに配します。ファイル名はスペースで区切られます。

   プレフィクス引数に0を指定した場合、マークされた各ファイルの絶対ファイ
ル名を使用します。プレフィクス引数に‘C-u’だけを指定した場合、Diredバッフ
ァーのデフォルトディレクトリーからの相対ファイル名を使用します(サブディ
レクトリーから行なった場合はスラッシュが含まれます)。特別なケースとして
、ポイントがディレクトリーのヘッダー行にある場合、‘w’で、そのディレクト
リーの絶対パスを得ることができます。この場合、プレフィクス引数とマークさ
れたファイルは無視されます。

   このコマンドの主な目的は、他のEmacsコマンドの引数として、ファイル名を
yankすることです。これはkillリングに何が追加されたかも表示するので、現在
マークされているファイルを、エコーエリアに表示するためにも使用できます。

   コマンド‘(’ (‘dired-hide-details-mode’)は、カレントのDiredバッファー
での、ファイル所有者やファイルパーミッションなどの、詳細表示を切り替えま
す。デフォルトでは、シンボリックリンクのリンク先や、ヘッダー行とファイル
やディレクトリーの一覧以外のすべての行も隠します。これを変更するには、オ
プション‘dired-hide-details-hide-symlink-targets’と
‘dired-hide-details-hide-information-lines’をカスタマイズしてください。

   visitしているディレクトリーが、バージョンコントロール(*note Version
Control::)の配下にある場合、選択されたファイルにたいして、通常のVC diffお
よびVC logコマンドが処理を行ないます。

   コマンド‘M-x dired-compare-directories’は、カレントのDiredバッファー
と、他のディレクトリーを比較するために使用されます。2つのディレクトリー
で“異なる”、すべてのファイルがマークされます。カレントのDiredバッファー
も含めて、それらのファイルをリストする、すべてのDiredバッファーでマーク
が付されます。

   (入力を求められたとき<RET>をタイプすると使用される)デフォルトの比較方
法では、ファイル名だけを比較します — つまり別のディレクトリーに存在しな
いファイルは、“異なる”とされます。Lisp式を入力して、より厳密な比較を指定
することができます。この場合、変数‘size1’と‘size2’はファイルサイズ、
‘mtime1’と‘mtime2’は最終修正時刻を秒で表した浮動小数点数、‘fa1’と‘fa2’は
ファイルの属性リスト(関数‘file-attributes’で返される形式)です。この比較
は、同じ名前のファイルごとに評価され、式の値が非‘nil’の場合、それらのフ
ァイルは“異なる”とされます。

   たとえばシーケンス‘M-x dired-compare-directories <RET> (> mtime1
mtime2) <RET>’は、別のディレクトリーよりこのディレクトリーのファイルが新
しい場合はマークし、このディレクトリーより別のディレクトリーのファイルが
古い場合にマークします。相手がいないファイルも、両方のディレクトリーでマ
ークが付されます。

   X Windowシステムでは、Emacsは“ドラッグアンドドロップ”をサポートします
。ファイルオブジェクトを他のプログラムにドラッグしたり、Diredバッファー
にドロップできます。これは、そのディレクトリーのファイルの移動、コピー、
またはリンクを作成します。正確に言うと、どのアクションが選択されるかは、
プログラムの動作により決定されます。Diredバッファーの外へのファイルのド
ラッグは、現在のところサポートされていません。


File: emacs-ja.info,  Node: Calendar/Diary,  Next: Sending Mail,  Prev: Dired,  Up: Top

31 カレンダーとダイアリー
*************************

Emacsは、過去のイベントや将来のプランのためのダイアリーをもつ、卓上カレ
ンダー機能を提供します。これにはアポイントメントを管理したり、特定のプロ
ジェクトにどれだけ時間を費やしているか追跡する機能もあります。

   カレンダーを起動するには、‘M-x calendar’とタイプします。これは3ヶ月分
のカレンダーを表示します。当月が中央に表示され、今日の日付にポイントが配
されます。‘C-u M-x calendar’のように数引数を指定すると、3ヶ月カレンダー
の中央に表示する、月と年の入力を求めます。カレンダーは自身のバッファーを
使用し、メジャーモードはCalendarモードです。

   カレンダーの中で‘Mouse-3’をクリックすると、特定の日付にたいする操作メ
ニューが表示されます。‘Mouse-2’をクリックすると、特定の日付とは関係のな
い、一般的に使用されるカレンダー機能のメニューが表示されます。カレンダー
を終了するには、‘q’とタイプします。

* Menu:

* Calendar Motion::          カレンダー内の移動、日付の選択。
* Scroll Calendar::          過去または将来の月をスクリーンに表示する。
* Counting Days::            2つの日付の間の日数は?
* General Calendar::         カレンダーの終了と再計算。
* Writing Calendar Files::   さまざまなフォーマットで、カレンダーをファイルに書き込む。
* Holidays::                 休日の日付を表示する。
* Sunrise/Sunset::           日の出と日の入りの時間を地方時間で表示する。
* Lunar Phases::             月の位相の表示。
* Other Calendars::          他のカレンダーシステムへの日付の変換。
* Diary::                    ダイアリーからイベントを表示する。
* Appointments::             何かを行なう時刻のためのリマインダー。
* Importing Diary::          ダイアリーのイベントと他のフォーマットの変換。
* Daylight Saving::          夏時間がアクティブな期間を指定する方法。
* Time Intervals::           時間間隔の追跡。
* Advanced Calendar/Diary Usage:: カレンダーとダイアリーの上級のカスタマイズ。


File: emacs-ja.info,  Node: Calendar Motion,  Next: Scroll Calendar,  Up: Calendar/Diary

31.1 カレンダーでの移動
=======================

Calendarモードは日、週、月、年のような論理的な単位で、カレンダーを移動す
るコマンドを提供します。最初に表示されている3ヶ月の外に移動すると、カレ
ンダーの表示は選択された日付が表示されるように、自動的に“スクロール”しま
す。ある日付に移動することにより、その日が何の休日かを表示したり、ダイア
リーのエントリーを表示したり、他のカレンダーに変換できます。単にカレンダ
ーをスクロールするのは、長い期間を移動するのにも便利です。

* Menu:

* Calendar Unit Motion::     日、週、月、年単位での移動。
* Move to Beginning or End::  週、月、年の開始と終了への移動。
* Specified Dates::          今日の日付や、特定の日付への移動。


File: emacs-ja.info,  Node: Calendar Unit Motion,  Next: Move to Beginning or End,  Up: Calendar Motion

31.1.1 標準的な時間間隔での移動
-------------------------------

カレンダーバッファーでの移動コマンドは、テキスト内での移動コマンドと似て
います。日、週、月、年を前方および後方に移動できます。

‘C-f’
     ポイントを、1日前方に移動します(‘calendar-forward-day’)。
‘C-b’
     ポイントを、1日後方に移動します(‘calendar-backward-day’)。
‘C-n’
     ポイントを、1週前方に移動します(‘calendar-forward-week’)。
‘C-p’
     ポイントを、1週後方に移動します(‘calendar-backward-week’)。
‘M-}’
     ポイントを、1月前方に移動します(‘calendar-forward-month’)。
‘M-{’
     ポイントを、1月後方に移動します(‘calendar-backward-month’)。
‘C-x ]’
     ポイントを、1年前方に移動します(‘calendar-forward-year’)。
‘C-x [’
     ポイントを、1年後方に移動します(‘calendar-backward-year’)。

   dayおよびweekのコマンドは、文字単位または行単位で移動するための
Emacsコマンド、自然に類似しています。通常‘C-n’は、後続の行の同じ列に移動
しますが、Calendarモードでは翌週の同じ日に移動します。‘C-p’は、前の週の
同じ日に移動します。

   他のモードで通常振る舞うように、矢印キーは‘C-f’、‘C-b’、‘C-n’、
‘C-p’と等価です。

   月単位および年単位の移動のためのコマンドは、週単位の移動コマンドに似
ていますが、より長い期間を移動します。monthコマンドの‘M-}’および‘M-{’は
、月全体を前方または後方に移動します。yearコマンドの‘C-x ]’および
‘C-x [’は、年全体を前方または後方に移動します。

   これらのコマンドを簡単に覚える方法は、月および年が、テキストのパラグ
ラフとページに類似するものだと考えることです。しかしコマンド自体は完全に
類似している訳ではありません。Emacsのパラグラフコマンドは通常、パラグラ
フの先頭または最後に移動しますが、月コマンドと年コマンドは、月または年の
同じ日を保ちながら、月単位または年単位で移動します。

   これらのコマンドは、繰り返し回数として数引数を受け取ります。
Calendarモードでは便宜上、メタ修飾なしの数字キーとマイナス記号で、数引数
を指定できます。たとえば‘100 C-f’は、現在の位置から100日前方へポイントを
移動します。


File: emacs-ja.info,  Node: Move to Beginning or End,  Next: Specified Dates,  Prev: Calendar Unit Motion,  Up: Calendar Motion

31.1.2 週、月、年の開始と終了
-----------------------------

週(または月や年)は、単に日が集まったものではなく、特定に日付から開始され
ると考えます。そのためCalendarモードは週、月、年の、最初と最後に移動する
コマンドを提供します。

‘C-a’
     週の最初にポイントを移動します(‘calendar-beginning-of-week’)。
‘C-e’
     週の最後にポイントを移動します(‘calendar-end-of-week’)。
‘M-a’
     月の最初にポイントを移動します(‘calendar-beginning-of-month’)。
‘M-e’
     月の最後にポイントを移動します(‘calendar-end-of-month’)。
‘M-<’
     年の最初にポイントを移動します(‘calendar-beginning-of-year’)。
‘M->’
     年の最後にポイントを移動します(‘calendar-end-of-year’)。

   これらのコマンドは繰り返し回数として数引数を受け取り、繰り返し回数で
、何週、何ヶ月、何年前方または後方へ移動するかを示します。

   デフォルトでは、週は日曜日から開始されます。週が月曜日から開始される
ようにするには、変数‘calendar-week-start-day’を1にセットしてください。


File: emacs-ja.info,  Node: Specified Dates,  Prev: Move to Beginning or End,  Up: Calendar Motion

31.1.3 日付の指定
-----------------

Calendarモードは、さまざまな方法で、指定された特定の日付へ移動するコマン
ドを提供します。

‘g d’
     指定した日付にポイントを移動します(‘calendar-goto-date’)。
‘g D’
     年の指定された日にポイントを移動します
     (‘calendar-goto-day-of-year’)。
‘g w’
     年の指定された週にポイントを移動します(‘calendar-iso-goto-week’)。
‘o’
     指定された月をカレンダーの中央にします(‘calendar-other-month’)。
‘.’
     今日の日付にポイントを移動します(‘calendar-goto-today’)。

   ‘g d’ (‘calendar-goto-date’)は年、月、月の何日目かの入力を求め、その
日付に移動します。カレンダーは西暦の最初からすべての日付を含むので、年は
全部タイプしなければなりません。つまり、‘90’ではなく‘1990’とタイプします
。

   ‘g D’ (‘calendar-goto-day-of-year’)は、年と日数の入力を求め、その日付
に移動します。負の日数は年の最後から後方に数えます。‘g w’
(‘calendar-iso-goto-week’)は、年と週数の入力を求め、その週に移動します。

   ‘o’ (‘calendar-other-month’)は、月と年の入力を求め、3ヶ月カレンダーの
中央にその月を配します。

   ‘.’ (‘calendar-goto-today’)で今日の日付に戻ることができます。


File: emacs-ja.info,  Node: Scroll Calendar,  Next: Counting Days,  Prev: Calendar Motion,  Up: Calendar/Diary

31.2 カレンダーでのスクロール
=============================

カレンダーの表示は、ポイントが表示部分の外に移動すると、自動的にスクロー
ルします。手動でスクロールすることもできます。カレンダーのウィンドウに、
月が書き込まれた細長い紙が含まれているのを想像してみてください。カレンダ
ーのスクロールとは、この紙を水平方向に動かして、そのウィンドウに新しい月
を表示することを意味します。

‘>’
     カレンダーを1月前方にスクロールします(‘calendar-scroll-left’)。
‘<’
     カレンダーを1月後方にスクロールします(‘calendar-scroll-right’)。
‘C-v’
‘<next>’
     カレンダーを3月前方にスクロールします
     (‘calendar-scroll-left-three-months’)。
‘M-v’
‘<prior>’
     カレンダーを3月後方にスクロールします
     (‘calendar-scroll-right-three-months’)。

   もっとも基本的なカレンダーのスクロールコマンドは、1度に1月スクロール
します。これはコマンドの前後の表示で、2月がオーバーラップして表示される
ことを意味します。‘>’は内容を、1度に1月前方にスクロールします。‘<’は内容
を、1度に1月後方にスクロールします。

   コマンド‘C-v’および‘M-v’は、カレンダーを“画面全体” — つまり3月スクロ
ールします。この動作は、これらのコマンドが通常意味する動作と類似していま
す。‘C-v’は後の日付を表示し、‘M-v’は前の日付を表示します。これらのコマン
ドは、繰り返し回数として数引数を受け取ります。特に‘C-u’は次のコマンドを
4倍するので、‘C-u C-v’は1年前方にカレンダーをスクロールし、‘C-u M-v’は
1年後方にカレンダーをスクロールします。

   他のモードのときと同様に、ファンクションキーの<next>と<prior>は、
‘C-v’や‘M-v’と等価です。


File: emacs-ja.info,  Node: Counting Days,  Next: General Calendar,  Prev: Scroll Calendar,  Up: Calendar/Diary

31.3 日付のカウント
===================

‘M-=’
     カレントリージョン内の日数を表示します
     (‘calendar-count-days-region’)。

   ある範囲の日数を数えるには、‘C-<SPC>’で日付をマークし、他の日付にポイ
ントを移動して、‘M-=’ (‘calendar-count-days-region’)とタイプします。表示
される日数は_包括的(inclusive)_です。つまりマークとポイントで指定された
日も、日数に含まれます。


File: emacs-ja.info,  Node: General Calendar,  Next: Writing Calendar Files,  Prev: Counting Days,  Up: Calendar/Diary

31.4 その他のカレンダーコマンド
===============================

‘p d’
     day-in-year(1年で何日目か)を表示します
     (‘calendar-print-day-of-year’)。
‘C-c C-l’
     カレンダーウィンドウを再生成します(‘calendar-redraw’)。
‘<SPC>’
     次のウィンドウを上にスクロールします(‘scroll-other-window’)。
‘<DEL>’
‘S-<SPC>’
     次のウィンドウを下にスクロールします(‘scroll-other-window-down’)。
‘q’
     カレンダーをexitします(‘calendar-exit’)。

   年の初めからの経過日数と、年の最後までの残り日数を表示するには、‘p d’
command (‘calendar-print-day-of-year’)とタイプします。これは、それら両方
の日数をエコーエリアに表示します。経過日数には選択された日付も含まれます
。残り日数に、その日は含まれません。

   カレンダーウィンドウのテキストがおかしくなった場合は、再描画するため
に‘C-c C-l’ (‘calendar-redraw’)とタイプします(これはCalendarモード以外の
モードの編集コマンドを使ったときだけ発生します)。

   Calendarモードでは、<SPC> (‘scroll-other-window’)と<DEL>
(‘scroll-other-window-down’)を使って、(もしあれば)他のウィンドウを上また
は下にスクロールします。これは休日のリストやダイアリーのエントリーを他の
ウィンドウに表示しているときなどに便利です。

   カレンダーからexitするには、‘q’ (‘calendar-exit’)とタイプします。これ
はカレンダーに関連するすべてのバッファーを隠し(bury)、他のバッファーを選
択します(フレームがカレンダー専用のウィンドウを含む場合、カレンダーを
exitすることによりそのフレームは、削除またはアイコン化されます。これは変
数‘calendar-remove-frame-by-deleting’の値に依存します)。


File: emacs-ja.info,  Node: Writing Calendar Files,  Next: Holidays,  Prev: General Calendar,  Up: Calendar/Diary

31.5 カレンダーファイルの記述
=============================

カレンダーとダイアリーのエントリーを、HTMLやLaTeXに書き出すことができま
す。

   Calendar HTMLコマンドは、カレンダー、休日、ダイアリーのエントリーを含
む、HTMLコードのファイルを生成します。各ファイルは1ヶ月に対応し、
‘YYYY-MM.html’という形式の名前をもちます。ここでYYYYは4桁の年、MMは2桁の
月です。変数‘cal-html-directory’は、HTMLファイルのためのデフォルトの出力
先ディレクトリーを指定します。休日が表示されないようにするには、
‘cal-html-holidays’をカスタマイズしてください。

   ‘<’と‘>’で囲まれたダイアリーのエントリー(たとえば、this is a diary
entry with <font color=”red”>some red text</font>)は、HTMLタグと解釈され
ます。HTMLファイルを含むディレクトリーの中にあるスタイルシート
‘cal.css’を通じて、表示されるHTMLページの全体的な外観を変更できます(関連
するスタイルセッティングについては、変数‘cal-html-css-default’の値を参照
してください)。

‘H m’
     1ヶ月のカレンダーを生成します(‘cal-html-cursor-month’)。
‘H y’
     1年の各月のカレンダーファイルを生成し、同様にインデックスページも生
     成します(‘cal-html-cursor-year’)。デフォルトでは、このコマンドはフ
     ァイルをサブディレクトリーYYYYに書き込みます。これを変更した場合、
     各年の間のハイパーリンクは機能しなくなるでしょう。

   変数‘cal-html-print-day-number-flag’が非‘nil’の場合、マンスリーカレン
ダーにはday-of-the-year(年の何日目か)の数字が表示されます。変数
‘cal-html-year-index-cols’は、年のインデックスページの列数を指定します。

   Calendar LaTeXコマンドは、カレンダーとしてプリントされるLaTeXコードの
バッファーを生成します。どのコマンドを使うかにより、プリントされるカレン
ダーは、ポイントのある日、週、月、年をカバーします。

‘t m’
     1ヶ月のカレンダーを生成します(‘cal-tex-cursor-month’)。
‘t M’
     横向き印刷(sideways-printing)で、1ヶ月のカレンダーを生成します
     (‘cal-tex-cursor-month-landscape’)。
‘t d’
     1日のカレンダーを生成します(‘cal-tex-cursor-day’)。
‘t w 1’
     時間を併記した、1週間の1ページカレンダーを生成します
     (‘cal-tex-cursor-week’)。
‘t w 2’
     時間を併記した、1週間の2ページカレンダーを生成します
     (‘cal-tex-cursor-week2’)。
‘t w 3’
     時間なしで、1週間のISOスタイルのカレンダーを生成します
     (‘cal-tex-cursor-week-iso’)。
‘t w 4’
     時間を併記した、月曜で始まる1週間のカレンダーを生成します
     (‘cal-tex-cursor-week-monday’)。
‘t w W’
     時間なしで、1週間の2ページカレンダーを生成します
     (‘cal-tex-cursor-week2-summary’)。
‘t f w’
     2週間を見開きする、Filofaxスタイルのカレンダーを生成します
     (‘cal-tex-cursor-filofax-2week’)。
‘t f W’
     1週間を見開きする、Filofaxスタイルのカレンダーを生成します
     (‘cal-tex-cursor-filofax-week’)。
‘t y’
     1年のカレンダーを生成します(‘cal-tex-cursor-year’)。
‘t Y’
     横向き印刷(sideways-printing)で、1年のカレンダーを生成します
     (‘cal-tex-cursor-year-landscape’)。
‘t f y’
     1年のFilofaxスタイルのカレンダーを生成します
     (‘cal-tex-cursor-filofax-year’)。

   これらのコマンドの中には、カレンダーを(“ランドスケープモード”で)横向
きに印刷するものがあり、その場合は縦長ではなく横長になります。Filofaxの
用紙サイズ(3.75in x 6.75in)を使うものもあります。これらのコマンドはすべ
てプレフィクス引数を指定でき、これは何日、何週間、何ヶ月、何年分を印刷す
るかを指定します(常に選択された日付から開始されます)。

   変数‘cal-tex-holidays’が非‘nil’(デフォルト)の場合、プリンとされたカレ
ンダーには‘calendar-holidays’の休日が表示されます。変数‘cal-tex-diary’が
非‘nil’(デフォルトは‘nil’)の場合、ダイアリーのエントリーも含まれます(マ
ンスリー、filofax、isoの週カレンダーのみ)。変数‘cal-tex-rules’が非
‘nil’(デフォルトは‘nil’)の場合、カレンダーは充分な空間のある、罫線ページ
のスタイルで表示されます。そのカレンダーがどんな機能をサポートするかは、
個別のcal-tex関数のドキュメントを参照してください。

   必要なら、変数‘cal-tex-preamble-extra’を使用して、生成されたドキュメ
ントのプリアンブル(preamble)に、追加のLaTeXコマンドを挿入できます。


File: emacs-ja.info,  Node: Holidays,  Next: Sunrise/Sunset,  Prev: Writing Calendar Files,  Up: Calendar/Diary

31.6 休日
=========

Emacsのカレンダーは、多くのメジャーおよびマイナーな休日を知っており、そ
れらを表示することができます。デフォルトリストに、あなた自身の休日を追加
できます。

‘Mouse-3 Holidays’
‘h’
     選択された日付の休日を表示します(‘calendar-cursor-holidays’)。
‘x’
     カレンダーウィンドウの休日をマークします
     (‘calendar-mark-holidays’)。
‘u’
     カレンダーウィンドウのマークを外します(‘calendar-unmark’)。
‘a’
     表示された3ヶ月の休日を別のウィンドウにリストします
     (‘calendar-list-holidays’)。
‘M-x holidays’
     今日を含む3ヶ月の休日を別のウィンドウにリストします。
‘M-x list-holidays’
     年の指定した範囲の休日を別のウィンドウにリストします。

   ある日付が休日かどうか見るには、カレンダーウィンドウのその日付にポイ
ントを置いて、‘h’コマンドを使用します。その日付を‘Mouse-3’でクリックして
表示されるメニューで、‘Holidays’を選択しても見ることができます。どちらの
方法も、その日付にたいする休日を、エコーエリアか、エコーエリアに収まらな
い場合は別のウィンドウに表示します。

   カレンダーに表示された、すべての日付にたいする休日の分布を閲覧するに
は、‘x’コマンドを使用します。これは休日を異なるフェイスで表示します。
*note calendar-holiday-marker: Calendar Customizing.を参照してください。
このコマンドは、現在表示されている月と、スクロールすることにより見ること
ができる他の月の両方に適用されます。マークをオフにして現在のマークを消す
には、‘u’をタイプします。これはダイアリーマークも消します(*note Diary::を
参照してください)。変数‘calendar-mark-holidays-flag’が非‘nil’の場合、カ
レンダーの作成または更新により、自動的に休日がマークされます。

   さらに詳細な情報を得るには、‘a’コマンドを使用します。これはカレントの
3ヶ月の範囲のすべての休日を含むリストを、別のバッファーに表示します。カ
レンダーウィンドウで<SPC>および<DEL>を使用することにより、そのリストを上
または下にスクロールできます。

   コマンド‘M-x holidays’は、今月および前月と来月の休日のリストを表示し
ます。これはカレンダーウィンドウがないときでも機能します。変数
‘calendar-view-holidays-initially-flag’が非‘nil’の場合、カレンダーの作成
により、休日がこの方法で表示されます。違う月を中心にした3ヶ月の休日リス
トが欲しい場合は、月と年の入力を求める‘C-u M-x holidays’を使用してくださ
い。

   Emaceが知っている休日には、United States、major Bahá’í、Chinese、
Christian、Islamic、Jewishの休日、および夏至と冬至(solstices)、春分と秋
分(equinoxes)が含まれます。

   ‘M-x holiday-list’は、ある年の範囲にたいする休日のリストを表示します
。この関数は年の開始と終了の入力を求め、すべての休日、または複数のカテゴ
リーの中の1つのカテゴリーに属する休日を選択することができます。このコマ
ンドは、カレンダーウィンドウがないときでも使用することができます。

   休日に使用される日付は、歴史的事実ではなく、_現在の慣習(current
practice)_にもとづきます。たとえばVeteran’s Day(退役軍人の日)は1919年に
始まった休日ですが、それより前の年でも表示されます。


File: emacs-ja.info,  Node: Sunrise/Sunset,  Next: Lunar Phases,  Prev: Holidays,  Up: Calendar/Diary

31.7 日の出と日の入りの時刻
===========================

特別なカレンダーコマンドにより、任意の日付にたいする日の出(sunrise)と日
の入り(sunset)の時刻を、1、2分の範囲で調べることができます。

‘Mouse-3 Sunrise/sunset’
‘S’
     選択された日付の、日の出と日の入りの時刻を表示します
     (‘calendar-sunrise-sunset’)。
‘M-x sunrise-sunset’
     今日の日の出と日の入りの時刻を表示します。
‘C-u M-x sunrise-sunset’
     指定した日付の日の出と日の入りの時刻を表示します。
‘M-x calendar-sunrise-sunset-month’
     選択された月の日の出と日の入りの時刻を表示します。

   カレンダーからは、見たい日付にポイントを移動して‘S’をタイプすると、エ
コーエリアに日の出と日の入りの時刻を、_地方時間_で表示します。日付を
‘Mouse-3’でクリックし、表示されたメニューの‘Sunrise/sunset’を選択しても
表示することができます。今日、または指定した日付にたいしてこの情報を表示
するために、カレンダーの外からでも、コマンド‘M-x sunrise-sunset’が利用可
能です。今日以外の日付を指定するには、年、月、日の入力を求める‘C-u M-x
sunrise-sunset’を使用してください。

   ‘C-u C-u M-x sunrise-sunset’により、任意の地域の任意の日付にたいして
、日の出と日の入りの時刻を表示できます。これは経度(longitude)、緯度
(latitude)、調整済みグリニッジ平均時(Coordinated Universal Time)との分差
、日付の入力を求め、その地域の、その日付の日の出と日の入りの時刻を表示し
ます。

   日の出と日の入りの時刻は地球上の位置に依存するので、これらのコマンド
を使用する前に、Emacsに経度(latitude)、緯度(longitude)、地域名(location
name)を指定する必要があります。以下は何をセットするかの例です:

     (setq calendar-latitude 40.1)
     (setq calendar-longitude -88.2)
     (setq calendar-location-name "Urbana, IL")

‘calendar-latitude’と‘calendar-longitude’には、小数点以下1位までの数値を
使用します。

   タイムゾーン(time zone)も、地方時間での日の入りと日の出の時刻に影響を
与えます。Emacsは通常、タイムゾーンの情報をオペレーティングシステムから
得ますが、その情報が間違っている場合(またはオペレーティングシステムがそ
の情報を提供しない場合)、これらを自分でセットしなければなりません。以下
は例です:

     (setq calendar-time-zone -360)
     (setq calendar-standard-time-zone-name "CST")
     (setq calendar-daylight-time-zone-name "CDT")

‘calendar-time-zone’の値は地方標準時(local standard time)と、調整済みグ
リニッジ平均時(Coordinated Universal Time)、またはグリニッジ時(Greenwich
time: GMT)との分差です。‘calendar-standard-time-zone-name’と
‘calendar-daylight-time-zone-name’の値は、あなたのタイムゾーンで使用され
る略語です。Emacsは、_サマータイム(daylight saving time)_で調整済みの、
日の出と日の入りの時刻を表示します。サマータイムが決定される方法について
は、*note Daylight Saving::を参照してください。

   ユーザーとしては‘.emacs’で、普段いる場所をカレンダーの位置変数にセッ
トすると便利だと思うかもしれません。システム管理者としては、
‘default.el’で、すべてのユーザーにたいして、これらの変数をセットしたいと
思うかもしれません。*note Init File::を参照してください。


File: emacs-ja.info,  Node: Lunar Phases,  Next: Other Calendars,  Prev: Sunrise/Sunset,  Up: Calendar/Diary

31.8 月の位相
=============

以下のカレンダーコマンドは、月の位相(phases of the moon)、つまり新月(new
moon)、上弦(first quarter)、満月(full moon)、下弦(last quarter)の日付と
時刻を表示します。この機能は、“月の位相に依存する”問題をデバッグするのに
便利です。

‘M’
     表示されている3ヶ月にたいして、月のすべての4位相の日付と時刻を表示
     します(‘calendar-lunar-phases’)。
‘M-x lunar-phases’
     今日を含む3ヶ月にたいして、月のすべての4位相の日付と時刻を表示しま
     す。

   カレンダーからは‘M’を使用して、カレントの3ヶ月の範囲での月の位相を、
別のバッファーに表示します。数分の誤差で、日付と時刻がリストされます。

   カレンダーの外からは、コマンド‘M-x lunar-phases’で今月と前後1ヶ月の、
月の位相のリストが表示されます。違う月についての情報は、月と年の入力を求
める‘C-u M-x lunar-phases’を使用してください。

   月の位相にたいして与えられる日付と時刻は、(それが適切なときはサマータ
イム調整されて)地方時間で与えられます。前のセクションの議論を参照してく
ださい。*note Sunrise/Sunset::を参照してください。


File: emacs-ja.info,  Node: Other Calendars,  Next: Diary,  Prev: Lunar Phases,  Up: Calendar/Diary

31.9 他のカレンダーとの間の変換
===============================

Emacsのカレンダーは、_常に_グレゴリオ暦(Gregorian calendar)で表示されま
す。これは、“新しいスタイル”のカレンダーと呼ばれることもあり、今日では世
界のほとんどで使用されています。しかし、このカレンダーは16世紀より前には
存在しておらず、、18世紀より前は広く使われていませんでした。ユリウス暦
(Julian calendar)を置き換えて、世界的に受け入れられたのも20世紀初頭です
。Emacsカレンダーは、西暦1年1月から任意の月を表示できますが、グレゴリオ
歴がまだ存在しない日付にたいしても、カレンダーは常にグレゴリオ暦で表示さ
れます。

   Emacsは他のカレンダーを表示できませんが、日付を他のカレンダーに変換す
ることができます。

* Menu:

* Calendar Systems::         (グレゴリオ歴以外の)Emacsが理解するカレンダー。
* To Other Calendar::        選択された日付をさまざまなカレンダーに変換する。
* From Other Calendar::      他のカレンダーで指定された日付に移動する。


File: emacs-ja.info,  Node: Calendar Systems,  Next: To Other Calendar,  Up: Other Calendars

31.9.1 サポートされるカレンダーシステム
---------------------------------------

ISO商用暦(ISO commercial calendar)は、ビジネスで使われることがあります。

   ユリウス暦(Julian calendar)は、ジュリアス・シーザー(Julius Caesar)か
ら名前がつけられたカレンダーで、中世ヨーロッパで使用され、19世紀まで多く
の国で使用されてきました。

   天文学者は、ユリウス歴のB.C.4713年1月1日正午からの、単純な通算日を使
用します。この経過日は“ユリウス日(Julian day: JD)”、または“天文日
(Astronomical day)”と呼ばれます。

   ヘブライ暦(Hebrew calendar)は伝統的にユダヤ教(Jewish religion)で使用
されます。EmacsのカレンダープログラムはJewishの休日を決定するためにヘブ
ライ暦を使用します。ヘブライ暦では日没が1日の開始と終了です。

   イスラム暦(Islamic calendar)は、主にIslamic国で広く使用されます。
EmacsはIslamicの休日の日付を決定するのに、これを使用します。Islamicの世
界では、カレンダーについての世界的な取り決めが存在しません。Emacsは広く
受け入れられているバージョンを使用しますが、Islamicの休日の正確な日付は
、計算によってではなく、宗教的な権威による公告に依存することがしばしばあ
ります。結果として、行事の正確な日付はEmacsが計算する日付と若干違う場合
があります。イスラム暦では、日没が1日の開始と終了です。

   フランス革命暦(French Revolutionary calendar)は、より非宗教的で自然に
もとづいた観点により1年のサイクルを表すために、1789年の革命後にジャコバ
ン派(Jacobins)により作成されました。これはメートル法のような、合理的な目
安により1週が10日に設定されます。フランス政府は1805年の終わりに、このカ
レンダーを公式に放棄しました。

   中央アメリカのマヤには、互いに個別で重複した3つのカレンダーシステム
_long count_、_tzolkin_、_haab_があります。Emacsはこれら3つのカレンダー
すべてを知っています。専門家はマヤのカレンダーと私たちのカレンダーとの正
確な関連を議論しています。Emacsは、Goodman-Martinez-Thompsonの相関関係を
使用して計算を行ないます。

   コプト教徒(Copts: エジプト教会のクリスチャン)は、エジプト古代の太陽暦
にもとづいたカレンダーを使用します。彼らのカレンダーは30日からなる12の月
と、その後に余分の5日が含まれます。4年に1度、余分な5日に閏日を加えて6日
とします。エチオピア暦は構造的に同じですが、異なる年数と月の名前をもちま
す。

   ペルシャ人は、Omar Khayyamのデザインにもとづく太陽暦を使用します。か
れらのカレンダーは12の月を含み、最初の6ヶ月は31日、次の5ヶ月は30日、最後
の月は、通常の年は29日で、閏年は30日です。閏年は4年または5年後との複雑な
パターンで発生します。ここで実装されているカレンダーは、Birashkにより指
示されている数学的なペルシャ歴で、2820年周期にもとづいています。天文学的
なペルシャ暦との違いは、それが天文学的なイベントにもとづいている点です。
これを記述している時点で、2つの歴に最初に矛盾が発生すると予測されるのは
、2025年の3月20日です。現時点では、そのときのイランの公式カレンダーが何
になるかは、明確ではありません。

   旧暦(Chinese calendar)は、太陽年に太陰月を組み込んだ複雑なシステムで
す。年は60周期で、各年は通常の年は12ヶ月、閏年は13ヶ月です。各月は通常の
月は29日または30日です。年、通常月、日は10の“celestial stems”と、12の
“terrestrial branches”の組み合わせにより名前がつけられ、これが合計で60個
の名前となり、60回周期で繰り返されます。

   Bahá’íのカレンダーシステムは、19日を持つ19ヶ月の太陽周期にもとづきま
す。のこり4日の“閏日(intercalary days)”は、18ヶ月目と19ヶ月目の間に配さ
れます。


File: emacs-ja.info,  Node: To Other Calendar,  Next: From Other Calendar,  Prev: Calendar Systems,  Up: Other Calendars

31.9.2 他のカレンダーへの変換
-----------------------------

以下のコマンドは、選択された日付(ポイント位置の日付)をさまざまなカレンダ
ーシステムで記述します:

‘Mouse-3 Other calendars’
‘p o’
     選択された日付を、他のさまざまなカレンダーで表示します
     (‘calendar-print-other-dates’)。
‘p c’
     選択された日付を、ISO商用暦(ISO commercial calendar)で表示します
     (‘calendar-iso-print-date’)。
‘p j’
     選択された日付を、ユリウス日(Julian date)で表示します
     (‘calendar-julian-print-date’)。
‘p a’
     選択された日付を、ユリウス日にもとづく天文日(astronomical day)で表
     示します(‘calendar-astro-print-day-number’)。
‘p h’
     選択された日付を、ヘブライ暦の日付(Hebrew date)で表示します
     (‘calendar-hebrew-print-date’)。
‘p i’
     選択された日付を、イスラム暦の日付(Islamic date)で表示します
     (‘calendar-islamic-print-date’)。
‘p f’
     選択された日付を、フランス革命暦の日付(French Revolutionary date)で
     表示します(‘calendar-french-print-date’)。
‘p b’
     選択された日付を、Bahá’í dateで表示します
     (‘calendar-bahai-print-date’)。
‘p C’
     選択された日付を、旧暦の日付(Chinese date)で表示します
     (‘calendar-chinese-print-date’)。
‘p k’
     選択された日付を、Coptic dateで表示します
     (‘calendar-coptic-print-date’)。
‘p e’
     選択された日付を、Ethiopic dateで表示します
     (‘calendar-ethiopic-print-date’)。
‘p p’
     選択された日付を、ペルシャ暦の日付(Persian date)で表示します
     (‘calendar-persian-print-date’)。
‘p m’
     選択された日付を、マヤ暦の日付(Mayan date)で表示します
     (‘calendar-mayan-print-date’)。

   変換したい日付にポイントを移動して、上記のテーブルから‘p’で始まる適切
なコマンドをタイプします。プレフィクスの‘p’は、“print”のニーモニックです
。これは、Emacsが」変換した日付を、エコーエリアに“プリント”するからです
。‘p o’は日付を、Emacsが知るすべての形式で表示します。‘Mouse-3’でクリッ
クして表示されるメニューから、‘Other calendars’を選択することもできます
。これは、日付をEmacsが知るすべての形式でメニュー形式で表示します(メニュ
ー形式で表示されるさまざまな形式の日付を選択しても、何もおこりません。こ
の場合、メニューは表示のためだけに使用されます)。


File: emacs-ja.info,  Node: From Other Calendar,  Prev: To Other Calendar,  Up: Other Calendars

31.9.3 他のカレンダーからの変換
-------------------------------

サポートされている他のカレンダーで日付を指定して、その日付に移動すること
ができます。このセクションでは、マヤ暦以外のカレンダーを使用してこれを行
なうコマンドを説明します。マヤ暦については、以降のセクションを参照してく
ださい。

‘g c’
     ISO商用暦(ISO commercial calendar)で指定された日付に移動します
     (‘calendar-iso-goto-date’)。
‘g w’
     ISO商用暦で指定された週に移動します(‘calendar-iso-goto-week’)。
‘g j’
     ユリウス暦(Julian calendar)で指定された日付に移動します
     (‘calendar-julian-goto-date’)。
‘g a’
     ユリウス暦にもとづく天文日で指定された日付に移動します
     (‘calendar-astro-goto-day-number’)。
‘g b’
     Bahá’í calendarで指定された日付に移動します
     (‘calendar-bahai-goto-date’)。
‘g h’
     ヘブライ暦(Hebrew calendar)で指定された日付に移動します
     (‘calendar-hebrew-goto-date’)。
‘g i’
     イスラム暦(Islamic calendar)で指定された日付に移動します
     (‘calendar-islamic-goto-date’)。
‘g f’
     フランス革命暦(French Revolutionary calendar)で指定された日付に移動
     します(‘calendar-french-goto-date’)。
‘g C’
     旧暦(Chinese calendar)で指定された日付に移動します
     (‘calendar-chinese-goto-date’)。
‘g p’
     ペルシャ暦(Persian calendar)で指定された日付に移動します
     (‘calendar-persian-goto-date’)。
‘g k’
     コプト暦(Coptic calendar)で指定された日付に移動します
     (‘calendar-coptic-goto-date’)。
‘g e’
     エチオピア暦(Ethiopic calendar)で指定された日付に移動します
     (‘calendar-ethiopic-goto-date’)。

   これらのコマンドは、他のカレンダーの日付の入力を求め、その日付と等価
なグレゴリオ暦(Ethiopic calendar)の日付に移動して、他のカレンダーの日付
をエコーエリアに表示します。Emacsは月の名前を入力するとき、常に強い補完
(*note Completion Exit::を参照してください)を使うので、ヘブライ、イスラ
ム、フランスの名前のスペルを心配する必要はありません。

   ヘブライ暦に関する一般的な問題として、“yahrzeit”と呼ばれる死亡日にた
いする記念日の計算があります。Emacsのカレンダーには、そのような計算の機
能が含まれています。カレンダーにいるときは、コマンド‘M-x
calendar-hebrew-list-yahrzeits’により、まず年の範囲の入力を求め、ポイン
ト位置の日付により、それらの年のyahrzeitの日付のリストを表示します。カレ
ンダーにいないときは、このコマンドは最初に死亡日、次に年の範囲の入力を求
め、yahrzeitの日付の一覧を表示します。


File: emacs-ja.info,  Node: Diary,  Next: Appointments,  Prev: Other Calendars,  Up: Calendar/Diary

31.10 ダイアリー
================

Emacsのダイアリーはカレンダーと共に、日常のアポイントメントやその他のイ
ベントを管理します。ダイアリー機能を使うには、最初にイベントとその日付を
含む“ダイアリーファイル(diary file)”を作成しなければなりません。Emacsは
今日、近い将来、指定された日付のイベントを自動的にピックアップして表示し
ます。

   ダイアリーファイルの名前は、変数‘diary-file’により指定されます。デフ
ォルトは‘~/diary’です。以下はこのファイルの例です:

     12/22/2012  Twentieth wedding anniversary!!
     &1/1.       Happy New Year!
     10/22       Ruth's birthday.
     * 21, *:    Payday
     Tuesday--weekly meeting with grad students at 10am
              Supowit, Shen, Bitner, and Kapoor to attend.
     1/13/89     Friday the thirteenth!!
     &thu 4pm    squash game with Lloyd.
     mar 16      Dad's birthday
     April 15, 2013 Income tax due.
     &* 15       time cards due.

このフォーマットは、いくつかのUnixシステムで提供されている、別の
‘calendar’ユーティリティーで使用されるものと、基本的に同じです。この例で
は、ほとんどのエントリーにたいして、余分なスペースでイベント説明を位置揃
えしています。このようなフォーマットは、純粋に好みの問題です。

   ダイアリーの作成を手作業で行なおうと考えているかもしれませんが、
Emacsはダイアリーのエントリーを閲覧、追加、変更するいくつかのコマンドを
提供します。

* Menu:

* Displaying the Diary::     ダイアリーのエントリーと、それに関連するカレンダーの日付を閲覧する。
* Format of Diary File::     ダイアリーにイベントを入力する。
* Date Formats::             日付を指定するさまざまな方法。
* Adding to Diary::          ダイアリーのエントリーを作成するコマンド。
* Special Diary Entries::    記念日、日付ブロック、周期的なエントリーなど。


File: emacs-ja.info,  Node: Displaying the Diary,  Next: Format of Diary File,  Up: Diary

31.10.1 ダイアリーの表示
------------------------

1度ダイアリーファイルを作成すると、カレンダーを使ってそれを閲覧できます
。Calendarモードの外で、今日のイベントを閲覧することもできます。以下は
Calendarバッファーで参照されるキーバインドです。

‘Mouse-3 Diary’
‘d’
     選択された日付の、すべてのダイアリーエントリーを表示します
     (‘diary-view-entries’)。
‘s’
     ダイアリーファイル全体を表示します(‘diary-show-all-entries’)。
‘m’
     表示されている日付で、ダイアリーエントリーをもつものをすべてマーク
     します(‘diary-mark-entries’)。
‘u’
     カレンダーウィンドウのマークを外します(‘calendar-unmark’)。
‘M-x diary-print-entries’
     表示されているダイアリーのハードコピーを印刷します。
‘M-x diary’
     今日の日付の、すべてのダイアリーエントリーを表示します。
‘M-x diary-mail-entries’
     近づきつつあるダイアリーエントリーのリマインダーとして、あなた自身
     にメールします。

   ‘d’でダイアリーエントリーを表示すると、カレンダーで選択された日付のダ
イアリーエントリーが別のウィンドウで表示されます。新しいウィンドウのモー
ドラインには、ダイアリーエントリーの日付が表示されます。休日はバッファー
とモードラインの両方で表示され、それは選択した表示方法に依存します
(*note Diary Display::を参照してください)。 ‘d’に数引数を指定した場合、
選択した日付から指定した日数までのすべてのダイアリーエントリーを表示しま
す。したがって、‘2 d’は選択された日と、その次の日のすべてのエントリーを
表示します。

   ある日付にたいするダイアリーエントリーを表示する別の方法は、日付を
‘Mouse-3’でクリックして、表示されるメニューから‘Diary entries’を選択する
方法です。変数‘calendar-view-diary-initially-flag’が非‘nil’の場合、カレ
ンダーの作成により、その日のダイアリーエントリーがリストされます(その日
が表示されている場合)。

   より広い視点でダイアリーが記載されている日を知るには、‘m’コマンドを使
用します。これはダイアリーエントリーをもつ日付を、異なるフェイスでマーク
します。 *note diary-entry-marker: Calendar Customizing.を参照してくださ
い。

   このコマンドは現在表示されている月と、スクロールすることにより表示さ
れる月の両方に適用されます。マークを消すには‘u’をタイプします。これによ
り休日のマークもオフになります(*note Holidays::を参照してください)。変数
‘calendar-mark-diary-entries-flag’が非‘nil’の場合、カレンダーの作成また
は更新により、ダイアリーの日付が自動的にマークされます。

   限られたエントリーだけでなく、ダイアリーファイル全体を参照するには、
‘s’コマンドを使用します。

   コマンド‘M-x diary’は、カレンダーの表示とは独立に、その日のダイアリー
エントリーと、オプションでその後の何日かのダイアリーエントリーも同様に表
示します。何日分を含めるかは変数‘diary-number-of-entries’で指定してくだ
さい。 *note diary-number-of-entries: Diary Customizing.を参照してくださ
い。

   ‘.emacs’ファイルに‘(diary)’を記述した場合、Emacsを開始したときに、そ
の日のダイアリーエントリーのウィンドウを自動的に表示します。

   ダイアリーのイベント通知を、メールで受けとるのを好む人もいます。その
ようなメールをあなた自身に送るには、コマンド‘M-x diary-mail-entries’を使
用します。プレフィクス引数は、(今日から開始して)何日分をチェックするかを
指定します。プレフィクス引数を指定しない場合、変数‘diary-mail-days’によ
り、何日分をチェックするかが指定されます。


File: emacs-ja.info,  Node: Format of Diary File,  Next: Date Formats,  Prev: Displaying the Diary,  Up: Diary

31.10.2 ダイアリーファイル
--------------------------

“ダイアリーファイル(diary file)”とは、特定の日付に関連付けられたイベント
を記録するファイルです。ダイアリーファイルの名前は、変数‘diary-file’によ
り指定されます。デフォルトは‘~/diary’です。‘calendar’ユーティリティープ
ログラムは、Emacsダイアリー機能により認められた形式のサブセットをサポー
トするので、このユーティリティーを使って、(エントリー自体は理解できない
かもしれませんが)適切にダイアリーファイルを閲覧できます。

   ダイアリーファイルの各エントリーは、1つ以上の行からなる1つのイベント
を記述します。エントリーは、常に左端の日付指定で開始されます。エントリー
の残りの部分は、イベントを説明するテキストです。エントリーが複数行の場合
、2行目以降はそれが前のエントリーの継続行であることを示すために、空白文
字で開始しなければなりません。有効な日付で開始されておらず、前のエントリ
ーの継続行でもない行は無視されます。

   ダイアリーエントリーの最初の行が、日付または曜日名(後にブランクも句読
点もない)だけの形式を使うこともできます。たとえば:

     02/11/2012
           Bill B. visits Princeton today
           2pm Cognitive Studies Committee meeting
           2:30-5:30 Liz at Lawrenceville
           4:00pm Dentist appt
           7:30pm Dinner at George's
           8:00-10:00pm concert

このエントリーは、シンプルなダイアリー表示を使ったときは、異なる表示にな
ります (*note Diary Display::を参照してください)。 シンプルなダイアリー
表示は最初の日付行を省略して、継続行だけが表示されます。このスタイルのエ
ントリーは、1日分だけのエントリーを表示するときはうまく表示されますが、
複数日のエントリーの場合は混乱するかもしれません。

   カレンダーウィンドウで、特定のダイアリーエントリーのマークを抑止する
ことができます。これを行なうには、エントリーの開始、日付の前に、
‘diary-nonmarking-symbol’で指定された文字列(デフォルトは‘&’)を挿入します
。これはエントリーをダイアリーウィンドウで表示する場合は、影響ありません
。カレンダーウィンドウで日付をマークするときだけ影響があります。マークさ
れないエントリーは、マークの数が多くなりすぎるような、一般的なエントリー
にたいして有用です。


File: emacs-ja.info,  Node: Date Formats,  Next: Adding to Diary,  Prev: Format of Diary File,  Up: Diary

31.10.3 日付のフォーマット
--------------------------

以下は、異なる方法でフォーマットされた日付を説明するために、ダイアリーエ
ントリーの例をいくつか示したものです。この例では、日付はすべてアメリカ形
式(月、日、年)ですが、Calendarモードは、オプションでヨーロッパ形式(日、
月、年)と、ISO形式(年、月、日)をサポートします。

     4/20/12  Switch-over to new tabulation system
     apr. 25  Start tabulating annual results
     4/30  Results for April are due
     */25  Monthly cycle finishes
     Friday  Don't leave without backing up files

   最初のエントリーは、2012年4月20日に1度だけ表示されます。2番目と3番目
のエントリーは毎年、指定した日に表示され、4番目のエントリーは月にワイル
ドカード(アスタリスク)を使っているので、毎月25日に表示されます。最後のエ
ントリーは毎週、金曜日に表示されます。

   ‘MONTH/DAY’や‘MONTH/DAY/YEAR’のように、日付を表すのに数字だけを使うこ
ともできます。この場合、その後に続く文字は数字以外の文字でなければなりま
せん。日付のMONTHとDAYは、1桁または2桁の数字です。オプションのYEARも数字
で、省略形として最後の2桁を使うこともできます。つまり、‘11/12/2012’また
は‘11/12/12’を使うことができます。

   日付は、‘MONTHNAME DAY’または‘MONTHNAME DAY, YEAR’という形式をもつこ
ともできます。月の名前のスペルには完全形、または省略形(最後のピリオドは
あってもなくてもよい)を指定できます。月または曜日の優先される省略形は、
変数‘calendar-abbrev-length’、‘calendar-month-abbrev-array’、
‘calendar-day-abbrev-array’を使ってセットできます。デフォルトは、名前の
最初の3文字を省略形として使用します。大文字小文字に違いはありません。

   日付は“ジェネリック(generic)” — つまり指定されていない部分があっても
構いません。この場合、エントリーは日付に指定された部分にマッチする、すべ
ての日付に適用されます。日付が年を含まない場合、これはジェネリックで、任
意の年に適用されます。かわりにMONTH、DAY、YEARに‘*’を使用することもでき
ます。これは任意の月、任意の日、任意の年にマッチします。したがって、日付
は‘3/*/*’のダイアリーエントリーは任意の年の3月の任意の日にマッチします。
‘march *’も同じです。

   ヨーロッパ形式(月の前に日を記述する)、またはISO形式(年、月、日の順で
記述する)で日付を記述したい場合は、カレンダーで‘M-x
calendar-set-date-style’とタイプするか、変数‘calendar-date-style’をカス
タマイズします。これはダイアリーの日付がどのように解釈されるか、日付の表
示、コマンドが与えられた引数に要求する順序に影響を与えます。

   週のある曜日に適用されるジェネリックな日付として、曜日名を使うことが
できます。曜日名は完全なスペルを記述するか、上述した省略形を使用できます
。大文字小文字に違いはありません。


File: emacs-ja.info,  Node: Adding to Diary,  Next: Special Diary Entries,  Prev: Date Formats,  Up: Diary

31.10.4 ダイアリーに追加するコマンド
------------------------------------

カレンダーでは、ダイアリーのエントリーを作成するコマンドがいくつかありま
す。以下は基本的なコマンドの一覧です。より複雑なコマンドは次のセクション
で説明します((*note Special Diary Entries::を参照してください))。エント
リーにはグレゴリオ暦以外も使用できます。 *note Non-Gregorian Diary::を参
照してください。

‘i d’
     選択された日付のダイアリーエントリーを追加します
     (‘diary-insert-entry’)。
‘i w’
     選択された曜日のダイアリーエントリーを、各週に追加します
     (‘diary-insert-weekly-entry’)。
‘i m’
     選択された日のダイアリーエントリーを、各月に追加します
     (‘diary-insert-monthly-entry’)。
‘i y’
     選択された日のダイアリーエントリーを、各年に追加します
     (‘diary-insert-yearly-entry’)。

   カレンダーウィンドウで日付を選択して、‘i d’コマンドをタイプすることに
より、特定の日付にたいするダイアリーエントリーを作成することができます。
このコマンドは、ダイアリーファイルの最後の部分を別のウィンドウに表示して
、その日付を追加します。その後、ダイアリーエントリーの残りの部分をタイプ
できます。

   毎週、特定の曜日に適用されるダイアリーエントリーを作成したいときは、
その曜日(同じ曜日ならどの日でも構いません)を選択して、‘i w’とタイプしま
す。これは曜日をジェネリックな日付として挿入します。そのあとダイアリーエ
ントリーの残りの部分をタイプできます。月ごとのダイアリーエントリーも同じ
やり方で作成できます。まず月のある日付を選択して、‘i m’コマンドを使い、
その後エントリーの残りの部分をタイプします。同様に‘i y’コマンドで、年ご
とのダイアリーエントリーを挿入できます。

   上記のすべてのコマンドは、デフォルトでマークされるダイアリーエントリ
ーを作成します。マークされないダイアリーエントリーを作成するには、コマン
ドにプレフィクス引数を与えます。たとえば、‘C-u i w’は、マークされない週
次のダイアリーエントリーを作成します。

   ダイアリーファイルを変更したときは、Emacsを終了する前にそのファイルを
保存してください。上記の挿入コマンドを使用した後でダイアリーファイルを保
存することにより、それが適切な場合は、カレンダーウィンドウのダイアリーの
マークを自動的に更新します。随時に更新させるには、コマンド
‘calendar-redraw’を使うことができます。


File: emacs-ja.info,  Node: Special Diary Entries,  Prev: Adding to Diary,  Up: Diary

31.10.5 特別なダイアリーエントリー
----------------------------------

カレンダーの日付にもとづくエントリーに加え、ダイアリーファイルは記念日の
ような定期的なイベントにたいする、“sexpエントリー(sexp entries: S式エン
トリー)”を含むことができます。これらのエントリーは、Emacsがダイアリーフ
ァイルをスキャンすることにより評価される、Lisp式(sexp)にもとづきます。日
付のかわりに、sexpエントリーは‘%%’と、その後ろに続くLisp式を含んでおり、
Lisp式はカッコで始まりカッコで終わらなければなりません。Lisp式は、エント
リーが適用される日付を決定します。

   Calendarモードは、一般的に使用される特定のsexpエントリーを挿入するた
めのコマンドを提供します:

‘i a’
     選択された日付にたいして、記念日ダイアリーエントリー(anniversary
     diary entry)を追加します。
‘i b’
     カレントリージョンにたいして、ブロックダイアリーエントリー(block
     diary entry)を追加します。
‘i c’
     その日付に開始される、周期的ダイアリーエントリー(cyclic diary
     entry)を追加します。

   特定の日付の記念日に適用されるダイアリーエントリーを作成したい場合は
、ポイントをその日付に移動して‘i a’コマンドを使用します。これはダイアリ
ーファイルの最後の部分を別のウィンドウに表示して、記念日の記述を追加しま
す。その後ダイアリーエントリーの残りの部分をタイプできます。エントリーは
以下のようになります:

     %%(diary-anniversary 10 31 1948) Arthur's birthday

このエントリーは、1948年以降の任意の年の10月31日に適用されます。‘10 31
1948’は日付を指定します(ヨーロッパ形式またはISO形式を使用している場合、
入力順は月、日、年とは異なります)。この式が開始年を要求する理由は、ダイ
アリーの上級機能が、経過年数を計算できるようにするためです。

   “ブロック”ダイアリーエントリーは、特定の連続する日付範囲に適用されま
す。以下は2012年6月24日から2012年7月10日までの、すべての日付に適用される
ブロックダイアリーエントリーです:

     %%(diary-block 6 24 2012 7 10 2012) Vacation

‘6 24 2012’は開始日付を示し、‘7 10 2012’は終了日付を示します(繰り返しに
なりますが、ヨーロッパ形式またはISOカレンダー形式を使用している場合、月
、日、年の順は異なります)。

   ブロックエントリーを入力するには、開始と終了の範囲となる2つの日付にポ
イントとマークを配し、‘i b’とタイプします。このコマンドは、ダイアリーフ
ァイルの最後の部分を別のウィンドウに表示して、ブロックの記述を挿入します
。その後で、ダイアリーエントリーをタイプすることができます。

   “周期的(cyclic)”ダイアリーエントリーは、ある固定された日数の期間繰り
替えされるエントリーです。これを作成するには、開始日を選択して‘i c’コマ
ンドを使用します。コマンドは期間の長さの入力を求め、それから以下のような
エントリーを挿入します:

     %%(diary-cyclic 50 3 1 2012) Renew medication

このエントリーは、2012年3月1日以降の50日間適用されます。‘3 1 2012’は開始
日の指定です(ヨーロッパ形式またはISOカレンダー形式を使用している場合、月
、日、年の入力順は異なります)。

   これら3つのコマンドはすべて、ダイアリーエントリーをマークします。マー
クしないダイアリーエントリーを挿入するには、プレフィクス引数を与えます。
たとえば‘C-u i a’は、マークされない記念日ダイアリーエントリーを作成しま
す。

   カレンダーでsexpダイアリーエントリーを作成すると、カレンダーウィンド
ウで表示されているすべての日付にたいして個別にチェックしなければならない
ので、時間がかかるかもしれません。そのため、可能ならsexpダイアリーエント
リーを、(‘&’を使って)マークされないようにするのがよいでしょう。

   その他の複雑なsexpエントリーとして、“浮動(floating)”ダイアリーエント
リーがあります。これは日、週、年のオフセットで指定される、定期的に発生す
るイベントを指定するためのものです。これは‘cron’により解釈される
crontabエントリーに類似しています。以下はマークされない、浮動ダイアリー
エントリーで、11月の第4木曜日に適用されます。

     &%%(diary-float 11 4 4) American Thanksgiving

11は11月(11番目の月)を指定し、4は木曜日(週の第4日。日曜日は0)、2番目の
4は第4週(1は第1週、2は第2週、−2は最終週から2番目の週)を指定します。月は
1つの月、または月のリストを使用できます。したがって上記の11を‘'(1 2 3)’に
変更すると、このエントリーは1月、2月、3月の第4木曜日に適用されることにな
ります。月が‘t’の場合、そのエントリーは年の各月に適用されます。

   標準的なsexpダイアリーエントリーは、フェイス名またはカレンダーをマー
クするときに使用する1文字の文字列を指定する、オプションのパラメーターを
受け取ります。一般的には、sexpダイアリーエントリーは、それらが適用される
ときを決定するために、任意の計算を処理することができます。 *note Sexp
Diary Entries::を参照してください。


File: emacs-ja.info,  Node: Appointments,  Next: Importing Diary,  Prev: Diary,  Up: Calendar/Diary

31.11 アポイントメント
======================

アポイントメント(appointment: 約束、予約)にたいするダイアリーエントリー
がある場合、そのダイアリーエントリーが認識可能な日時で開始されていれば、
Emacsは保留されたアポイントメントがあることを警告することができます。
Emacsは、変数‘appt-display-format’で選択されたフォーマットでメッセージを
表示して、アポイントメントにたいする注意を喚起します。‘appt-audible’の値
が非‘nil’の場合、警告には音によるリマインダーも含まれます。加えて、
‘appt-display-mode-line’が非‘nil’の場合、Emacsはアポイントメントまで何分
あるかを、モードラインに表示します。

   ‘appt-display-format’の値が‘window’の場合、変数
‘appt-display-duration’がリマインダーウィンドウを表示する長さを制御しま
す。変数‘appt-disp-window-function’および‘appt-delete-window-function’は
、ウィンドウを生成または破棄する関数の名前を与えます。

   アポイントメントの通知を有効にするには、‘M-x appt-activate’とタイプし
ます。正の引数は通知を有効に、負の引数は通知を無効に、引数を指定しない場
合は通知のオンとオフを切り替えます。通知を有効にすることにより、ダイアリ
ーファイルから見つかった、認識可能な日時をもつすべてのダイアリーエントリ
ーにより、今日のアポイントメントリストをセットアップし、それらのアポイン
トメントの直前に注意を促します。

   たとえば、ダイアリーファイルに以下のような行が含まれているとします:

     Monday
       9:30am Coffee break
      12:00pm Lunch

月曜日には、9:20am頃にコーヒーブレーク、11:50am頃にランチの注意が促され
ます。変数‘appt-message-warning-time’には、前もって何分前(デフォルトは
12)に警告するかを指定します。これはデフォルトの警告タイムです。
‘appt-warning-time-regexp’に部分マッチングを追加することにより、各アポイ
ントメントに異なる警告タイムを指定できます(詳細は、この変数のドキュメン
トを参照してください)。

   時刻はam/pmスタイル(‘12:00am’は真夜中で、‘12:00pm’は正午)、またはヨー
ロッパ/軍隊の24時間制で記述できます。どちらを使うか一貫性がある必要はあ
りません。ダイアリーファイルで、この2つのスタイルを混交させることができ
ます。時刻が認識されるためは、それがダイアリーエントリーの最初に記述され
ていなければなりません。

   Emacsは、真夜中直後にダイアリーファイルから自動的にアポイントメントリ
ストを更新します。アポイントメント通知を再度有効にすることにより、随時に
更新させることができます。‘appt-display-diary’を‘nil’にセットしていなけ
れば、これらのアクションはその日のダイアリーバッファーにも表示されます。
アポイントメントリストは、ダイアリーファイル(またはそれをインクルードす
るファイル。 *note Fancy Diary Display::を参照してください) が保存された
ときにも更新されます。

   アラーム時計のように、アポイントメント通知機能を使うこともできます。
コマンド‘M-x appt-add’は、ダイアリーファイルに影響を与えずに、アポイント
メントリストにエントリーを追加します。アポイントメントリストからエントリ
ーを削除するには、‘M-x appt-delete’を使います。


File: emacs-ja.info,  Node: Importing Diary,  Next: Daylight Saving,  Prev: Appointments,  Up: Calendar/Diary

31.12 ダイアリーエントリーのインポートとエクスポート
====================================================

Emacsのダイアリーファイルと、他のさまざまなフォーマットの間で、ダイアリ
ーエントリーを変換できます。

   Outlookが生成したアポイントメントメッセージから、ダイアリーエントリー
をインポートできます。そのようなメッセージをRmailやGnusで閲覧していると
きは、エントリーをインポートするために‘M-x diary-from-outlook’を実行しま
す。変数‘diary-outlook-formats’をカスタマイズすることにより、このコマン
ドに追加のアポイントメッセージ形式を認識させることができます。他のメール
クライアントは、‘diary-from-outlook-function’を適切な値にセットできます
。

   icalendarパッケージにより、Emacsダイアリーファイルと、“RFC 2445 —
Internet Calendaring and Scheduling Core Object Specification
(iCalendar)”で定義されるiCalendarとの間で、データを変換することができま
す(初期のvCalendar形式も同様)。

   コマンド‘icalendar-import-buffer’は、カレントバッファーから
iCalendarデータを抽出して、それをダイアリーファイルに追加します。この関
数は、iCalendarデータを自動的に抽出するためにも適しています。たとえば
Rmailメールクライアントは、以下を使用できます:

     (add-hook 'rmail-show-message-hook 'icalendar-import-buffer)

   コマンド‘icalendar-import-file’は、iCalendarファイルをインポートして
、その結果をEmacsダイアリーファイルに追加します。たとえば:

     (icalendar-import-file "/here/is/calendar.ics"
                            "/there/goes/ical-diary")

もし違うファイルが存在する場合は、インポートファイルの内容を追加するため
に、‘#include’ディレクティブを使うことができます。 *note Fancy Diary
Display::を参照してください。

   ‘icalendar-export-file’を使って、Emacsダイアリーファイル全体を
iCalendar形式にエクスポートできます。ダイアリーファイルの一部をエクスポ
ートするには、関連する領域をマークして、‘icalendar-export-region’を呼び
出します。どちらの場合も、Emacsは結果をターゲットファイルに追加します。


File: emacs-ja.info,  Node: Daylight Saving,  Next: Time Intervals,  Prev: Importing Diary,  Up: Calendar/Diary

31.13 サマータイム
==================

Emacsは、標準時とサマータイムの違いを理解します。日の出、日の入り、夏至
、冬至、春分、秋分、月の位相では、時刻を補正しています。サマータイムのル
ールは、場所によりさまざまで、歴史的にも異なります。処理を正しく行なうに
は、Emacsが使用するルールを知る必要があります。

   どこにいるかにより適用されるルールを、追跡するオペレーティングシステ
ムもあります。そのようなシステムでは、Emacsはそのシステムから必要な情報
を取得します。これらの情報の一部またはすべてが欠落している場合、Emacsは
現在マサチューセッツのケンブリッジで使用されているルールで、そのギャップ
を埋めます。その結果としてのルールが望むものでない場合、変数
‘calendar-daylight-savings-starts’および
‘calendar-daylight-savings-ends’をセットすることにより、Emacsに使用する
ルールを指定できます。

   これらの値は、変数‘year’を参照するLisp式で、サマータイムが開始または
終了される、‘(MONTH DAY YEAR)’という形式のリストによる、グレゴリオ暦の日
付として評価されます。その地域がサマータイムを使用しない場合、値は
‘nil’であるべきです。

   Emacsは、サマータイムの開始を決定するためにこれらの式を使い、休日リス
ト、太陽および月に関する時刻の補正を行ないます。

   マサチューセッツのケンブリッジにたいする値は、以下のとおりです:

     (calendar-nth-named-day 2 0 3 year)
     (calendar-nth-named-day 1 0 11 year)

つまり、‘year’で指定される年の、3番目の月(3月)の、第2週の0番目の曜日(日
曜日)と、、その年の11番目の月(11月)の、第1週の日曜日です。サマータイムが
10月1日から開始されるように変更する場合、
‘calendar-daylight-savings-starts’を以下のように変更します:

     (list 10 1 year)

   その地域でサマータイムがない、またはすべての時刻を標準時にしたい場合
は、‘calendar-daylight-savings-starts’と
‘calendar-daylight-savings-ends’を、‘nil’にセットします。

   変数‘calendar-daylight-time-offset’は、サマータイムと標準時の差を、分
で指定します。マサチューセッツのケンブリッジでは60です。

   最後に、2つの変数‘calendar-daylight-savings-starts-time’と
‘calendar-daylight-savings-ends-time’は、サマータイムの開始と終了の遷移
時に、地方時の真夜中から何分ずれるかを指定します。マサチューセッツのケン
ブリッジでは、変数の値は両方とも120です。


File: emacs-ja.info,  Node: Time Intervals,  Next: Advanced Calendar/Diary Usage,  Prev: Daylight Saving,  Up: Calendar/Diary

31.14 時間間隔の加算
====================

timeclockパッケージは、時間間隔を加算していくので、(たとえば)特定のプロ
ジェクトにどれだけ時間を費やしているか、追跡することができます。

   プロジェクトの作業を開始したとき‘M-x timeclock-in’コマンドを使用し、
作業を終えたら‘M-x timeclock-out’コマンドを使用します。これを行なうたび
に、プロジェクトの記録に時間間隔を追加します。違うプロジェクトの作業に変
更する場合は、‘M-x timeclock-change’を使用します。

   いくつかの時間間隔をからデータを収集したら、‘M-x
timeclock-workday-remaining’を使って、その作業にたいして今日の残り時間を
見ることができ(1日の作業時間の平均は通常8時間とみなします)、‘M-x
timeclock-when-to-leave’で作業を終了する時間を計算します。

   Emacsにたいして、モードラインに作業日の残り時間を表示させたいときは、
変数‘timeclock-modeline-display’を‘t’にセットするか、コマンド‘M-x
timeclock-modeline-display’を呼び出します。

   Emacsのカレントセッションを終了することは、そのプロジェクトの作業を終
えることを意味するか不明なので、デフォルトではEmacsは確認を求めます。し
かし変数‘timeclock-ask-before-exiting’の値を‘nil’にカスタマイズすること
により、確認を無視できます。その場合、明示的に‘M-x timeclock-out’か‘M-x
timeclock-change’を呼び出した場合だけ、カレントの時間間隔が終了したと
Emacsに告げます。

   timeclock関数は、‘~/.emacs.d/timelog’と呼ばれるファイルに、データを集
積することにより機能します。変数‘timeclock-file’をカスタマイズすることに
より、このファイルに違う名前を指定できます。手作業でtimeclockを編集した
り、timeclockのカスタマイズ可能な変数の値を変更したときは、コマンド‘M-x
timeclock-reread-log’を実行するべきです。


File: emacs-ja.info,  Node: Advanced Calendar/Diary Usage,  Prev: Time Intervals,  Up: Calendar/Diary

31.15 カレンダーとダイアリーの上級な機能
========================================

このセクションでは、カレンダーとダイアリーの、より上級で特別な機能をいく
つか説明します。まず最初に、個人的な好みに合うようにカレンダーをカスタマ
イズする、多くの方法を紹介します。

* Menu:

* Calendar Customizing::     カレンダーのレイアウトとフック。
* Holiday Customizing::      独自の休日を定義する。
* Mayan Calendar::           マヤ暦で指定された日付への移動。
* Date Display Format::      フォーマットの変更。
* Time Display Format::      フォーマットの変更。
* Diary Customizing::        セットできるデフォルト。
* Non-Gregorian Diary::      他のカレンダーにもとづくダイアリーエントリー。
* Diary Display::            ダイアリーを表示する方法の選択。
* Fancy Diary Display::      インクルードされたダイアリーファイルを使ったダイアリーエントリーのソート。
* Sexp Diary Entries::       より柔軟なダイアリーエントリー。


File: emacs-ja.info,  Node: Calendar Customizing,  Next: Holiday Customizing,  Up: Advanced Calendar/Diary Usage

31.15.1 カレンダーのカスタマイズ
--------------------------------

残念ながら、カレンダーの表示が3ヶ月であるのを変更することはできませんが
、変数‘calendar-left-margin’、‘calendar-day-header-width’、
‘calendar-day-digit-width’、‘calendar-column-width’、
‘calendar-intermonth-spacing’をカスタマイズすることにより、使用される空
白文字をカスタマイズすることはできます。各月の間に、たとえば週の番号を表
示するには、変数‘calendar-intermonth-header’と
‘calendar-intermonth-text’を、変数のドキュメントに記載されているようにカ
スタマイズします。

   変数‘calendar-month-header’は、カレンダーの各月の上に表示されるテキス
トを制御します。デフォルトでは月と年を表示します。変数
‘calendar-day-header-array’は、各月の各曜日の上に表示されるテキストを制
御します。デフォルトでは、各曜日の名前の最初の2文字を表示します。

   変数‘calendar-holiday-marker’は、休日をどのようにマークするか指定しま
す。この変数は、日付の隣に挿入する1文字の文字列か、その日付を表示するの
に使用するフェイス名です。同様に、変数‘diary-entry-marker’は、ダイアリー
エントリーをもつ日を、どのようにマークするか指定します。関数
‘calendar-mark-today’は、今日の日付をマークするのに
‘calendar-today-marker’を使用します。デフォルトでは、この目的のためにカ
レンダーは‘holiday’、‘diary’、‘calendar-today’という名前のフェイスを使い
ます。

   変数‘calendar-load-hook’は、calendarパッケージが最初にロードされたと
き(実際にカレンダーの表示が開始される前)に実行されるノーマルフックです。

   カレンダーの開始により、ノーマルフック
‘calendar-initial-window-hook’が実行されます。カレンダー表示の再計算では
、このフックは実行されません。しかし‘q’でカレンダーを離れ、再度カレンダ
ーに入ると、このフックが再び実行されます。

   変数‘calendar-today-visible-hook’は、カレンダーバッファーがカレンダー
のために準備された後、カレント日付がウィンドウで表示されるときに実行され
るノーマルフックです。このフックの用途の1つは、今日の日付のマークです。
これを行なうには、関数‘calendar-mark-today’または‘calendar-star-date’を
使います:

     (add-hook 'calendar-today-visible-hook 'calendar-mark-today)

同様のノーマルフック‘calendar-today-invisible-hook’は、カレント日付がウ
ィンドウに表示されなくなるとき実行されます。

   カレンダーのカーソル移動コマンドは、カーソルを移動した後に、フック
‘calendar-move-hook’を実行します。


File: emacs-ja.info,  Node: Holiday Customizing,  Next: Mayan Calendar,  Prev: Calendar Customizing,  Up: Advanced Calendar/Diary Usage

31.15.2 休日のカスタマイズ
--------------------------

Emacsが知る、デフォルト休日のリスト変数がいくつかあります。それは
‘holiday-general-holidays’、‘holiday-local-holidays’、
‘holiday-solar-holidays’、‘holiday-bahai-holidays’、
‘holiday-christian-holidays’、‘holiday-hebrew-holidays’、
‘holiday-islamic-holidays’、‘holiday-oriental-holidays’、
‘holiday-other-holidays’です。変数の名前は自己説明的であるべきです。たと
えば、‘holiday-solar-holidays’は、太陽と月に関連した休日のリストです。

   これらの休日リストにたいして、必要に応じて、下記で説明しているように
休日を削除したり追加してカスタマイズできます。これらを‘nil’にセットする
と、関連する休日は表示されなくなります。

   一般的な休日、すなわちholiday-general-holidaysは、デフォルトでは
United Statesで一般的な休日です。対照的に、‘holiday-local-holidays’と
‘holiday-other-holidays’は、デフォルトでは空です。前者はシステムワイドな
セッティング、後者は個人的な使用を意図しています。

   デフォルトでは、Emacsは世俗的なカレンダーに一般的に見出されるものを除
き、宗教的な休日のすべてを含んではいません。宗教的な休日の、より広範なコ
レクションのために、変数‘calendar-bahai-all-holidays-flag’、
‘calendar-christian-all-holidays-flag’、
‘calendar-hebrew-all-holidays-flag’。
‘calendar-islamic-all-holidays-flag’のどれか(またはすべて)を‘t’にセット
できます。

   それぞれの休日の変数は“holiday forms”のリストです。各formは休日(休日
のリストの場合もある)を記述します。以下は利用可能なholiday formの表です
。日付と月は1から数えますが、“曜日名(dayname)”は日曜日を0として数えます
。引数STRINGは、その休日を説明する文字列です。

‘(holiday-fixed MONTH DAY STRING)’
     グレゴリオ暦(Gregorian calendar)の固定日付です。

‘(holiday-float MONTH DAYNAME K STRING &optional DAY)’
     グレゴリオ暦のMONTH月DAY日の前または後のK番目の曜日
     DAYNAME(DAYNAME=0の場合は日曜日)です。Kが負の場合、月の最後から数え
     ます。オプションのDAYのデフォルトは、Kが正のときは1、負のときは
     MONTHの最後の日になります。

‘(holiday-chinese MONTH DAY STRING)’
     旧暦(Chinese calendar)の固定日付です。

‘(holiday-hebrew MONTH DAY STRING)’
     ヘブライ暦(Hebrew calendar)の固定日付です。

‘(holiday-islamic MONTH DAY STRING)’
     イスラム暦(Islamic calendar)の固定日付です。

‘(holiday-julian MONTH DAY STRING)’
     ユリウス暦(Julian calendar)の固定日付です。

‘(holiday-sexp SEXP STRING)’
     Lisp式SEXPにより計算される日付です。式は計算に変数‘year’を使い、
     ‘(MONTH DAY YEAR)’の形式のリストを返すか、その年に休日が発生しない
     場合は‘nil’を返すべきです。

‘(if CONDITION HOLIDAY-FORM)’
     条件CONDITIONが真のときだけ休日が発生します。

‘(FUNCTION [ARGS])’
     引数ARGSを指定して関数FUNCTIONを呼び出すことにより計算される日付の
     リストです。

   たとえばフランスで有名な7月14日のパリ革命記念日(Bastille Day)を追加し
たいとしましょう。以下でこれを行なうことができます:

     (setq holiday-other-holidays '((holiday-fixed 7 14 "Bastille Day")))

   多くの休日は、特定の月の特定の曜日に発生します。以下はVirgin Islandsで
有名な8月第4月曜日のHurricane Supplication Dayを記述します。

     (holiday-float 8 1 4 "Hurricane Supplication Day")

ここで8は8月、1は月曜日(日曜日は0、火曜日は2です)、4はその月の4番目(1は
1番目、2は2番目、−1は最後、−2は最後から2番目)を指定しています。

   Bahá’í暦、旧暦、ヘブライ暦、イスラム暦、ユリウス暦の固定日付に発生す
る休日を指定することもできます。たとえば、

     (setq holiday-other-holidays
           '((holiday-hebrew 10 2 "Last day of Hanukkah")
             (holiday-islamic 3 12 "Mohammed's Birthday")
             (holiday-julian 4 2 "Jefferson's Birthday")))

これは、Hanukkahの最後の日(ヘブライ暦の月はNisanを1として数えられます)、
Mohammedの誕生日を祝うイスラムの祭日(イスラム暦の月はMuharramを1として数
えられます)、そしてユリウス暦の1743年4月2日のThomas Jeffersonの誕生日を
記述したものです。

   条件付きの休日を含めるには、Emacs Lispの‘if’か、‘holiday-sexp’形式を
使用します。たとえばアメリカ大統領選挙は、4で割りきれる年の11月の第1月曜
日の後の、最初の火曜日に発生します:

     (holiday-sexp '(if (zerop (% year 4))
                        (calendar-gregorian-from-absolute
                         (1+ (calendar-dayname-on-or-before
                               1 (+ 6 (calendar-absolute-from-gregorian
                                       (list 11 1 year)))))))
                   "US Presidential Election")

または

     (if (zerop (% displayed-year 4))
         (holiday-fixed 11
                (calendar-extract-day
                  (calendar-gregorian-from-absolute
                    (1+ (calendar-dayname-on-or-before
                          1 (+ 6 (calendar-absolute-from-gregorian
                                   (list 11 1 displayed-year)))))))
                "US Presidential Election"))

   休日の決定に特別な計算が含まれるために、上記の形式に当てはまらない休
日もあります。そのような場合は、その計算を行なうLisp関数を記述しなければ
なりません。たとえば食(eclipses)を含めるには‘holiday-other-holidays’に
‘(eclipses)’を追加して、以下のような、カレンダーウィンドウに表示されてい
る月に関連するグレゴリオ暦の日付のリスト(空の場合もあり得る)を返す、
Emacs Lisp関数‘(eclipses)’を記述します。

     (((6 4 2012) "Lunar Eclipse") ((11 13 2012) "Solar Eclipse") ... )


File: emacs-ja.info,  Node: Mayan Calendar,  Next: Date Display Format,  Prev: Holiday Customizing,  Up: Advanced Calendar/Diary Usage

31.15.3 マヤ暦からの変換
------------------------

以下は、マヤ暦(Mayan calendar)にもとづく日付を選択するコマンドです:

‘g m l’
     long countカレンダーで指定された日付に移動します
     (‘calendar-mayan-goto-long-count-date’)。
‘g m n t’
     tzolkinカレンダーの次の周期の日付に移動します
     (‘calendar-mayan-next-tzolkin-date’)。
‘g m p t’
     tzolkinカレンダーの前の周期の日付に移動します
     (‘calendar-mayan-previous-tzolkin-date’)。
‘g m n h’
     haabカレンダーの次の周期の日付に移動します
     (‘calendar-mayan-next-haab-date’)。
‘g m p h’
     haabカレンダーの前の周期の日付に移動します
     (‘calendar-mayan-previous-haab-date’)。
‘g m n c’
     マヤ暦の次の周期の日付に移動します
     (‘calendar-mayan-next-calendar-round-date’)。
‘g m p c’
     マヤ暦の前の周期の日付に移動します
     (‘calendar-mayan-previous-calendar-round-date’)。

   これらのコマンドを理解するためには、マヤ暦(Mayan calendars)を理解する
必要があります。“long count”は以下の単位にもとづいて日数を計算します:

     1 kin = 1日   1 uinal = 20 kin   1 tun = 18 uinal
     1 katun = 20 tun   1 baktun = 20 katun

したがってlong countの日付12.16.11.16.6は、12baktunの16katunの11tunの
16uinalの6kinを意味します。Emacsのカレンダーはマヤ暦のlong countを
7.17.18.13.3まで遡ることができます。‘g m l’コマンドを使うときはマヤ暦の
long countの日付baktun、katun、tun、uinal、kinをピリオドで区切って入力し
ます。

   マヤ暦のtzolkinは、13日と20日の独立した周期を組み合わせた形式からなる
260日周期のカレンダーです。この周期が永遠に繰り替えされるので、Emacsはこ
のサイクルの前または次の位置に、後方または前方に移動するコマンドを提供し
ます。‘g m p t’は前のtzolkin日付に移動します。Emacsはtzolkin日付の入力を
求め、前の周期のその日付にポイントを移動します。同様に、‘g m n t’とタイ
プすると、次の周期のtzolkin日付に移動します。

   マヤ暦のhaabは、20日からなる18の月と、月に属さない5日間からなる365日
周期のカレンダーです。tzolkinの周期と同様に、この周期は永遠に繰り返され
るので、この周期の前または次の位置へ後方または前方に移動するコマンドがあ
ります。‘g m p h’は前のhaab日付に移動します。Emacsはhaab日付の入力を求め
、前の周期のその日付にポイントを移動します。同様に、‘g m n h’とタイプす
ると次の周期のhaab日付に移動します。

   マヤ暦ではtzolkin日付とhaab日付を組み合わせた日付も使用されていました
。この組み合わせや_calendar round_と呼ばれる、約52年の周期です。‘g m p
c’とタイプすると、Emacsはhaab日付とtzolkin日付の入力を求め、前の周期のそ
の組み合わせの日付にポイントを移動します。‘g m n c’を使用すると、次の周
期のsぽの組み合わせの日付にポイントを移動します。あり得ないhaab日付と
tzolkin日付の組み合わせをタイプした場合は、エラーをシグナルします。

   EmacsはMaya暦の名前の入力を求めるときは強い補完 (*note Completion
Exit::を参照してください) を使うので、スペルについて心配する必要はありま
せん。


File: emacs-ja.info,  Node: Date Display Format,  Next: Time Display Format,  Prev: Mayan Calendar,  Up: Advanced Calendar/Diary Usage

31.15.4 日付の表示フォーマット
------------------------------

‘calendar-date-display-form’をセットすることにより、ダイアリー、モードラ
イン、メッセージに表示される日付をカスタマイズできます。この変数は、文字
列形式の数字をもつ変数‘month’、‘day’、‘year’と、アルファベット文字列をも
つ‘monthname’、‘dayname’を含む式のリストを保持します。アメリカ様式では、
このリストのデフォルト値は以下のようになります:

     ((if dayname (concat dayname ", ")) monthname " " day ", " year)

ヨーロッパ様式では、この値のデフォルトは以下のようになります:

     ((if dayname (concat dayname ", ")) day " " monthname " " year)

デフォルトのISO日付は以下のようになります:

     ((format "%s-%.2d-%.2d" year (string-to-number month)
              (string-to-number day)))

他の典型的なアメリカ様式は以下のものです:

     (month "/" day "/" (substring year -2))


File: emacs-ja.info,  Node: Time Display Format,  Next: Diary Customizing,  Prev: Date Display Format,  Up: Advanced Calendar/Diary Usage

31.15.5 時刻の表示フォーマット
------------------------------

カレンダーとダイアリーは、デフォルトで1日の時刻を、‘am’または‘pm’と、1か
ら12の時刻と分によるアメリカ様式の慣習にしたがって表示します。00から23の
時刻による、ヨーロッパ様式(US軍用様式とも呼ばれる)にしたい場合は、変数
‘calendar-time-display-form’を変更することができます。この変数は式のリス
トです。このリストには文字列形式の数字をもつ変数‘12-hours’、‘24-hours’、
‘minutes’と、アルファベット文字列をもつ‘am-pm’、‘time-zone’を含めること
ができます。デフォルト値は以下のとおりです:

     (12-hours ":" minutes am-pm
               (if time-zone " (") time-zone (if time-zone ")"))

以下の値はヨーロッパ形式の時刻を提供します:

     (24-hours ":" minutes
               (if time-zone " (") time-zone (if time-zone ")"))

   1日の時刻を返すカレンダー関数は少ないことに注意してください(現在のと
ころsolar関数のみ)。


File: emacs-ja.info,  Node: Diary Customizing,  Next: Non-Gregorian Diary,  Prev: Time Display Format,  Up: Advanced Calendar/Diary Usage

31.15.6 ダイアリーのカスタマイズ
--------------------------------

ダイアリーウィンドウは通常、ダイアリーエントリーの日付が休日に相当する場
合は、モードラインとバッファー自身にそれを示します。休日をチェックするプ
ロセスは時間がかかることがあり、それは定義された休日に依存します。このよ
うな場合、‘diary-show-holidays-flag’を‘nil’にセットすることにより、ダイ
アリーの表示を速くすることができます。

   変数‘diary-number-of-entries’は、1度に表示されるダイアリーエントリー
の日数を制御します。これは‘calendar-view-diary-initially-flag’が‘t’のと
きの初期表示と、コマンド‘M-x diary’に影響します。たとえば値1(デフォルト
)は、その日のダイアリーエントリーだけを表示し、値2は翌日のエントリーも表
示します。値には7つの整数のvectorも指定できます。たとえば値が‘[0 2 2 2 2
4 1]’の場合、日曜日にはダイアリーエントリーは表示されず、月曜日から木曜
日までは当日と翌日のダイアリーエントリーが表示され、金曜日には金曜日から
月曜日のエントリーが表示され、土曜日にはその日のエントリーだけが表示され
ます。

   変数‘diary-date-forms’をセットすることにより、ダイアリーファイルの日
付形式をカスタマイズできます。この変数は日付を認識するパターンのリストで
す。各日付パターンは、要素が正規表現(*note (elisp)Regular Expressions::を
参照してください)、またはシンボル‘month’、‘day’、‘year’、‘monthname’、
‘dayname’のリストです。これらすべての要素は、ダイアリーファイルの特定の
種類のテキストにマッチするパターンに供されます。日付パターン全体がマッチ
するためには、リストの各要素が連続してマッチしなければなりません。

   日付パターンの正規表現は、標準の構文テーブルを変更してそれ自身の通常
の方法でマッチするので、‘*’は単語の構成要素になります。

   シンボル‘month’、‘day’、‘year’、‘monthname’、‘dayname’は、日付と考え
られる月番号、日付番号、年番号、月の名前、曜日名にマッチします。数字にマ
ッチするシンボルは、0で開始することもできます。名前にマッチするものは、
大文字名と、(‘calendar-month-abbrev-array’と
‘calendar-day-abbrev-array’で指定されるような)省略形を許容します。ダイア
リーエントリーの‘*’は“任意の月”の‘任意の日付”などを意味するので、すべて
のシンボルは‘*’にマッチすることができ、日付とみなされないものにもマッチ
するべきです。

   アメリカ様式での‘diary-date-forms’のデフォルト値は、
‘diary-american-date-forms’により提供されます:

     ((month "/" day "[^/0-9]")
      (month "/" day "/" year "[^0-9]")
      (monthname " *" day "[^,0-9]")
      (monthname " *" day ", *" year "[^0-9]")
      (dayname "\\W"))

変数‘diary-european-date-forms’および‘diary-iso-date-forms’は、他のデフ
ォルト様式を提供します。

   このリストの日付パターンは、_相互排他的(mutually exclusive)_でなけれ
ばならず、ダイアリーエントリーの任意の部分にマッチせず、日付と1文字の空
白文字だけにマッチしなければなりません。相互排他的であるならば、パターン
は日付を終端する空白文字を越えて、ダイアリーエントリーの一部にマッチしな
ければならず、日付パターンの最初の要素は‘バックアップ(backup)’されなけれ
ばなりません。これにより日付識別処理はマッチお終えた後、ダイアリーエント
リーの先頭の単語をバックアップします。‘backup’を使う場合でも、日付パター
ンはダイアリーエントリーの最初の単語の部分を越えてマッチしてはなりません
。たとえば‘diary-european-date-forms’は以下のようなデフォルト値です:

     ((day "/" month "[^/0-9]")
      (day "/" month "/" year "[^0-9]")
      (backup day " *" monthname "\\W+\\<\\([^*0-9]\\|\\([0-9]+[:aApP]\\)\\)")
      (day " *" monthname " *" year "[^0-9]")
      (dayname "\\W"))

3番目のパターンでの‘backup’の使用に注目してください。これは4番目のパター
ンと区別するために、日付自体を越えて単語の一部にマッチする必要があるから
です。


File: emacs-ja.info,  Node: Non-Gregorian Diary,  Next: Diary Display,  Prev: Diary Customizing,  Up: Advanced Calendar/Diary Usage

31.15.7 非グレゴリオ暦を使用するカレンダーエントリー
----------------------------------------------------

グレゴリオ暦にもとづくエントリーと同様に、ダイアリーはBahá’í、Hebrew、
Islamicの日付にもとづくエントリーをもつことができます。そのようなエント
リーの識別は時間がかかる場合がありますが、これらを使用する人はほとんどい
ないので、使用する場合は明示的に有効にしなければなりません。ダイアリーが
、ダイアリーエントリーのHebrew日付を識別するようにしたい場合、たとえば以
下のようにして、これを行なわなければなりません:

     (add-hook 'diary-nongregorian-listing-hook 'diary-hebrew-list-entries)
     (add-hook 'diary-nongregorian-marking-hook 'diary-hebrew-mark-entries)

同様にIslamicとBahá’íのエントリーにたいしては、
‘diary-islamic-list-entries’と‘diary-islamic-mark-entries’、または
‘diary-bahai-list-entries’と‘diary-bahai-mark-entries’を追加します。

   これらのダイアリーエントリーは、グレゴリオ日付のダイアリーエントリー
と同じフォーマットをもちます。例外は、Bahá’í日付の前には
‘diary-bahai-entry-symbol’(デフォルトは‘B’)、Hebrew日付の前には
‘diary-hebrew-entry-symbol’(デフォルトは‘H’)、Islamic日付の前には
‘diary-islamic-entry-symbol’(デフォルトは‘I’)が前置されなければならない
ことです。さらに、非グレゴリオの月の名前は省略できません(最初の3文字では
一意にならないものがあるからです。一般的なHebrew年のAdarを使いたい場合は
、“Adar I”を使わなければならないことにも注意してください。) たとえば
Hebrew日付のHeshvan 25にたいするダイアリーエントリーは、以下のようになり
ます:

     HHeshvan 25 Happy Hebrew birthday!

これはヘブライ暦のHeshvan 25に対応する日付のダイアリーに表示されます。以
下はIslamic日付のDhu al-Qada 25にマッチするダイアリーエントリーです:

     IDhu al-Qada 25 Happy Islamic birthday!

   グレゴリオ日付のダイアリーエントリーのように、非グレゴリオのエントリ
ーも前に‘diary-nonmarking-symbol’(デフォルトは‘&’)が前置されている場合は
マークされません。

   以下は、選択された日付または他の日付にたいして、Bahá’í、Hebrew、
Islamicの日付によるダイアリーエントリーを作成するコマンドの表です:

‘i h d’
     ‘diary-hebrew-insert-entry’
‘i h m’
     ‘diary-hebrew-insert-monthly-entry’
‘i h y’
     ‘diary-hebrew-insert-yearly-entry’
‘i i d’
     ‘diary-islamic-insert-entry’
‘i i m’
     ‘diary-islamic-insert-monthly-entry’
‘i i y’
     ‘diary-islamic-insert-yearly-entry’
‘i B d’
     ‘diary-bahai-insert-entry’
‘i B m’
     ‘diary-bahai-insert-monthly-entry’
‘i B y’
     ‘diary-bahai-insert-yearly-entry’

   これらのコマンドは、通常のダイアリーエントリーの対応するコマンドに似
ています。これらはカレンダーウィンドウのポイント位置の日付に適用され、こ
れらのコマンドが行なうのはダイアリーファイルの最後にダイアリーエントリー
の日付部分を挿入することだけです。その後、ダイアリーエントリーの残りを挿
入しなければなりません。特定の非グレゴリオ日付のエントリーを追加する基本
的なコマンドとして、与えられた非グレゴリオ日を各月に追加する‘monthly’コ
マンド、与えられた非グレゴリオの月日を各年に追加する‘yearly’コマンドがあ
ります。


File: emacs-ja.info,  Node: Diary Display,  Next: Fancy Diary Display,  Prev: Non-Gregorian Diary,  Up: Advanced Calendar/Diary Usage

31.15.8 ダイアリーの表示
------------------------

ダイアリーの表示は、ダイアリーエントリーのリストを準備して、変数
‘diary-display-function’で指定された関数を実行することにより機能します。
デフォルト値の‘diary-fancy-display’は、ダイアリーエントリーを表示するた
めだけに存在する特別なバッファーにコピーして、ダイアリーエントリーと休日
を表示します。ダイアリーエントリーを別のバッファーにコピーすることにより
、表示されるテキストの見栄えをよくする機会 — たとえばダイアリーエントリ
ーに適用される日付順にソートするなど — が提供されます。

   通常、fancy diary(装飾的なダイアリー)バッファーは、たとえその日が休日
であっても、ダイアリーエントリーがない日は表示しません。そのような日を
fancy diaryバッファーに表示したいときは、変数
‘diary-list-include-blanks’を‘t’にセットします。

   fancy diaryバッファーはViewモードを有効にします (*note View Mode::を
参照してください)。

   他の表示方法の‘diary-simple-display’は、実際のダイアリーバッファーを
表示して、適合しないエントリーを隠すために非表示のテキストを使います。休
日はモードラインに表示されます。この方法の有利な点は、ダイアリーファイル
を直接編集して、変更を保存できることです。しかし、この方法はfancy方式の
ように柔軟ではありません。たとえば、これはエントリーのソートはできません
。他の不利な点としては、非表示のテキストが混乱の元となることがある点です
。たとえば、他の場所に張り付けるためにリージョンのテキストをコピーした場
合、非表示のテキストも含まれます。同様に、目に見えるダイアリーバッファー
は一種の幻影なので、単にバッファーを印刷しても、スクリーンで表示されてい
るものが印刷されるわけではありません。

   この理由により、ダイアリーバッファーのハードコピーを_見た通りに_印刷
する特別なコマンド‘M-x diary-print-entries’があります。これは、どちらの
表示方式でも機能します(たとえfancy displayバッファーが他のバッファーと同
じようにプリントできるとしても)。週の各曜日のハードコピーを印刷するには
、ポイントを週の初めの曜日に移動して‘7 d’とタイプし、それから‘M-x
diary-print-entries’を実行します。通常のように、休日が含まれる場合、表示
は若干遅くなります。変数‘diary-show-holidays-flag’を‘nil’にセットするこ
とにより、速度を改善することができます。

   このコマンドは、ダイアリーバッファーで現在可視なダイアリーエントリー
だけを含んだ一時的なバッファーを作成します。単なる表示とは異なり、他の無
関係なエントリーは隠されるだけではなく、まったく含まれません。バッファー
を作成したら、フック‘diary-print-entries-hook’が実行されます。このフック
のデフォルト値はコマンド‘lpr-buffer’で、これはデータを直接プリンターに送
信します (*note Printing::を参照してください)。 違うコマンドを印刷に使い
たい場合は、単にこのフックの値を変更するだけです。他のコマンドには、たと
えば行を日付と時刻順に再配置することなどが含まれるかもしれません。

   simpleダイアリーウィンドウで表示されているときと同じように、ダイアリ
ーエントリーを編集できますが、表示されているバッファーには、表示から隠さ
れている部分が含まれていることを覚えておくのは重要です。これは、たとえば
‘C-f’ (‘forward-char’)は表示されている最後の行にポイントを移動できますが
、実際は隠されている行の途中かもしれないことを意味します。

   _simple表示でダイアリーエントリーを編集するときは注意してください。
_表示されている行の途中での行の追加、文字の追加や削除は問題になりません
が、行の最後で編集する場合は、意図した通りにはならないでしょう。行の削除
は、それに続く他の非表示のエントリーを削除するかもしれません。simple
diaryバッファーで編集する前に、‘s’ (‘diary-show-all-entries’)でファイル
全体を表示するのが最善です。


File: emacs-ja.info,  Node: Fancy Diary Display,  Next: Sexp Diary Entries,  Prev: Diary Display,  Up: Advanced Calendar/Diary Usage

31.15.9 Fancy Diary表示
-----------------------

以下の機能は、fancy diary表示だけで機能します。

   ノーマルフック‘diary-list-entries-hook’を使用して、各曜日のダイアリー
エントリーを日時順でソートできます。以下はその方法です:

     (add-hook 'diary-list-entries-hook 'diary-sort-entries t)

これは各曜日にたいして、認識可能は日時で始まるダイアリーエントリーをソー
トします。時刻がないダイアリーエントリーは、各曜日の最初に配置されます。
ソートコマンドがフックリストの最後に配置されているわけに注意してください
。リストの最初の方に配置されている場合、これはダイアリーエントリーの順序
を変更したり、アイテムを追加します。

   コメント区切りとなる文字列を‘diary-comment-start’と
‘diary-comment-end’にセットすることにより、ダイアリーエントリーに‘コメン
ト’を記述できます。fancy表示はコメントを印刷しません。他のパッケージ(た
とえばappointmentパッケージ。 *note Appointments::を参照してください) で
使用するメタデータをコメント内に記述したいと思うかもしれません。

   メインとなるダイアリーファイルに、他のファイルをインクルードできます
。これにより、グループのメンバー全員に適用されるイベント用のダイアリーフ
ァイルを、共有することができます。ダイアリーファイルで、
‘diary-include-string’で開始される行:

     #include "FILENAME"

は、ファイルFILENAMEからダイアリーエントリーをfancy diaryバッファーにイ
ンクルードします。インクルードの仕組みは再帰的なので、インクルードされた
ファイルは他のファイルをインクルードできます(もちろん循環的なインクルー
ドについては注意しなければなりません)。インクルード機能を有効にするには
、以下のようにします:

     (add-hook 'diary-list-entries-hook 'diary-include-other-diary-files)
     (add-hook 'diary-mark-entries-hook 'diary-mark-included-diary-files)

   インクルード機能はfancy diaryだけで機能します。なぜならsimple diary表
示は、エントリーをダイアリーファイルから直接表示するからです。


File: emacs-ja.info,  Node: Sexp Diary Entries,  Prev: Fancy Diary Display,  Up: Advanced Calendar/Diary Usage

31.15.10 sexpエントリーとFancy Diary表示
----------------------------------------

sexp( s-expression: S式)ダイアリーエントリーにより、どのダイアリーエント
リーに適用するか、複雑な条件判定以上のことができます。sexpエントリーは、
ダイアリーファイルで‘diary-sexp-entry-symbol’(デフォルトは‘%%’)が前置さ
れている行です。fancy diary表示では、sexpエントリーはエントリーの日付に
応じて、エントリーのテキストを生成できます。

   たとえば記念日のダイアリーエントリーでは、記念日から経過した年数をダ
イアリーエントリーのテキストに挿入できます。したがって、以下のダイアリー
エントリーの‘%d’:

     %%(diary-anniversary 10 31 1948) Arthur's birthday (%d years old)

は年齢に置換されるので、1990年10月31日のfancy diaryバッファーでは、以下
のように表示されます:

     Arthur's birthday (42 years old)

かわりに、ダイアリーファイルに以下のようなエントリーが含まれている場合:

     %%(diary-anniversary 10 31 1948) Arthur's %d%s birthday

は1990年10月31日のfancy diaryバッファーで、以下のように表示されます:

     Arthur's 42nd birthday

   同様に、周期的なダイアリーエントリーは、それが繰り返し発生した回数を
挿入できます:

     %%(diary-cyclic 50 1 1 2012) Renew medication (%d%s time)

これは以下のように表示されます:

     Renew medication (5th time)

これは2012年9月7日のfancy diary表示です。

   発生する日付だけでなく、それより前のダイアリーエントリーを含めるため
の、“事前リマインダー”となるsexpダイアリーエントリーもあります。たとえば
記念日の1週間前にリマインダーが欲しいときは、以下を使用します

     %%(diary-remind '(diary-anniversary 12 22 1968) 7) Ed's anniversary

これにより、fancy diaryは12月15日と12月22日に、‘Ed's anniversary’を表示
します。

   関数‘diary-date’は、整数または‘t’(すべての値を意味します)からなる
month、day、yearの組み合わせで日付を指定します。たとえば、

     %%(diary-date '(10 11 12) 22 t) Rake leaves

これによりfancy diaryは

     Rake leaves

を毎年10月22日、11月22日、12月22日に表示します。

   関数‘diary-float’を使って、11月の第3金曜日や、4月の最後の火曜日といっ
た日付をダイアリーエントリーに記述することができます。パラメーターは
MONTH、DAYNAME、およびインデックスNです。エントリーはMONTHの最初の日の後
のN番目の曜日DAYNAMEに表示されます。ここでDAYNAME=0は日曜日、1は月曜日、
...です。Nが負の場合、MONTHの最後から後方に数えます。MONTHの値に指定でき
るのは、月のリスト、単一の月、‘t’の場合はすべての月を意味します。オプシ
ョンのパラメーターDAYを使用して、MONTHのDAY日目の後または前の、N番目の曜
日DAYNAMEを指定することもできます。DAYのデフォルト値は、Nが正のときは1で
、Nが負のときはと気はの最後の日です。たとえば、

     %%(diary-float t 1 -1) Pay rent

これによりfancy diaryは

     Pay rent

を毎月最後の月曜日に表示します。

   sexpダイアリーエントリーの一般性により、アルゴリズム的に記述したダイ
アリーエントリーを指定できます。sexpダイアリーエントリーには、任意の与え
られた日付にたいして、エントリーを適用するかどうかを計算する式が含まれま
す。値が非‘nil’の場合はその日付にエントリーが適用され、そうでない場合は
適用されません。式では判定する日付を変数‘date’で使用することができます。
この変数の値は、グレゴリオ暦を参照するリスト(MONTH DAY YEAR)です。

   sexpダイアリーエントリーは、式の値が非‘nil’のときはその日付に適用され
ますが、いくつかの値は特別な意味をもちます。値が文字列の場合、その文字列
はその日に発生するイベントを説明する文字列です。値は‘(MARK . STRING)’と
いう形式をもつこともできます。MARKは、カレンダーでその日をどのようにマー
クするかを指定し、STRINGはそのイベントの説明です。MARKが1文字の文字列の
場合、その文字はカレンダーの日付の隣に表示されます。MARKがフェイス名の場
合、その日はそのフェイスで表示されます。MARKが‘nil’の場合、その日を特に
ハイライト表示しません。

   21日がウィークデイのときは21日、21日が週末のときは前の日の金曜日に給
料が支払われるとしましょう。以下はそのような日付にマッチするsexpダイアリ
ーエントリーです:

     &%%(let ((dayname (calendar-day-of-week date))
              (day (cadr date)))
           (or (and (= day 21) (memq dayname '(1 2 3 4 5)))
               (and (memq day '(19 20)) (= dayname 5)))
              ) Pay check deposited

   以下のsexpダイアリーエントリーは、(fancy diary表示において)日付により
異なるテキストをもつダイアリーエントリーを作成することができます:

‘%%(diary-sunrise-sunset)’
     地方時で、今日の日の出と日の入りの時刻のダイアリーエントリーを作成
     します。
‘%%(diary-lunar-phases)’
     月の位相にたいするダイアリーエントリーを作成します。
‘%%(diary-day-of-year)’
     その年での通算日数と、その年の残り日数でダイアリーエントリーを作成
     します。
‘%%(diary-iso-date)’
     今日と等価な、ISO商用日付のダイアリーエントリーを作成します。
‘%%(diary-julian-date)’
     今日と等価な、ユリウス暦日のダイアリーエントリーを作成します。
‘%%(diary-astro-day-number)’
     今日と等価な、天文日(ユリウス日)のダイアリーエントリーを作成します
     。
‘%%(diary-bahai-date)’
     今日と等価な、Bahá’í暦日のダイアリーエントリーを作成します。
‘%%(diary-chinese-date)’
     今日と等価な、旧暦日のダイアリーエントリーを作成します。
‘%%(diary-coptic-date)’
     今日と等価な、Copticカレンダー日のダイアリーエントリーを作成します
     。
‘%%(diary-ethiopic-date)’
     今日と等価な、エチオピア暦日のダイアリーエントリーを作成します。
‘%%(diary-french-date)’
     今日と等価な、フランス革命暦の日付のダイアリーエントリーを作成しま
     す。
‘%%(diary-hebrew-date)’
     今日と等価な、ヘブライ暦の日付のダイアリーエントリーを作成します。
‘%%(diary-islamic-date)’
     今日と等価な、イスラム暦の非助のダイアリーエントリーを作成します。
‘%%(diary-mayan-date)’
     今日と等価な、マヤ暦の日付のダイアリーエントリーを作成します。
‘%%(diary-persian-date)’
     今日と等価な、Persian calendarの日付のダイアリーエントリーを作成し
     ます。

例えば、以下のようなダイアリーエントリーを含めると

     &%%(diary-hebrew-date)

fancy diary表示を使用している場合は、毎日のダイアリー表示に、その日に対
応するヘブライ暦の日付が含まれるようになります(simple diary表示を使用し
ている場合は、任意の日付のダイアリーにリテラル行
‘&%%(diary-hebrew-date)’が表示されます)。

   以下の関数は、特定の標準的なヘブライsexpダイアリーエントリーを構築す
るために使用されます:

‘%%(diary-hebrew-rosh-hodesh)’
     新しいヘブライ月にたいして、礼拝の発生と告知を告げるダイアリーエン
     トリーを作成します。
‘%%(diary-hebrew-parasha)’
     毎週のシナゴーグ経典(synagogue scripture)の読書会を告げる、土曜日の
     ダイアリーエントリーを作成します。
‘%%(diary-hebrew-sabbath-candles)’
     安息日のキャンドルライトを告げる、_地方時_のダイアリーエントリーを
     作成します。
‘%%(diary-hebrew-omer)’
     適切な場合は、omerを数えるダイアリーエントリーを作成します。
‘%%(diary-hebrew-yahrzeit MONTH DAY YEAR) NAME’
     命日をマークするダイアリーエントリーを作成します。命日の日付はグレ
     ゴリオ暦の日付です。ダイアリーエントリーは適切なヘブライ暦の命日、
     およびその前日に表示されます(カレンダーの日付様式に対応してパラメー
     ターの順序は変化します。たとえばヨーロッパ標識ではDAY、MONTH、
     YEARの順です)。
‘%%(diary-hebrew-birthday MONTH DAY YEAR)’
     ヘブライ暦での誕生日のダイアリーエントリーを作成します。

   上記でドキュメントされたすべての関数は、オプションの引数MARKを受け取
ります。これはカレンダー表示で、その日をどのようにマークするかを指定しま
す。上記の関数の1つが特定の日付に適用されると決定された場合、上述したよ
うにMARKを含んだ値を戻します。


File: emacs-ja.info,  Node: Sending Mail,  Next: Rmail,  Prev: Calendar/Diary,  Up: Top

32 メールの送信
***************

Emacsから電子メールのメッセージを送信するには、‘C-x m’とタイプします。こ
れはメッセージのテキストとヘッダーを編集できる、‘*unsent mail*’という名
前のバッファーに切り替えます。編集が終了したら‘C-c C-s’または‘C-c C-c’と
タイプして、それを送信します。

‘C-x m’
     メールの作成を開始します(‘compose-mail’)。
‘C-x 4 m’
     同様ですが、他のウィンドウで行ないます
     (‘compose-mail-other-window’)。
‘C-x 5 m’
     同様ですが、新しいフレームで行ないます
     (‘compose-mail-other-frame’)。
‘C-c C-s’
     メールバッファーでは、メッセージを送信します(‘message-send’)。
‘C-c C-c’
     メールバッファーでは、メッセージを送信して、そのバッファーを隠し
     (bury)ます(‘message-send-and-exit’)。

   メールバッファーは通常のEmacsバッファーなので、メールの作成中に他のバ
ッファーに切り替えることができます。現在のメールを終了する前に他のメール
を送信したい場合は、再度‘C-x m’とタイプして新しいメールバッファーを開き
ます、このバッファーは異なる数字が後ろについた名前をもちます(*note Misc
Buffer::を参照してください)。‘C-u C-x m’のように、プレフィクス引数を指定
してコマンドを呼び出した場合、Emacsは最後のメールバッファーに戻って、そ
のバッファーのメッセージを削除したいか尋ねます。これにnoと答えると、中止
した場所から編集を再開できます。

   コマンド‘C-x 4 m’ (‘compose-mail-other-window’)は、‘C-x m’と同じこと
を行ないますが、これはメールバッファーを別のウィンドウに表示します。コマ
ンド‘C-x 5 m’ (‘compose-mail-other-frame’)は、新しいフレームでこれを行な
います。

   ‘C-c C-c’または‘C-c C-s’とタイプしてメールを送信するとき、Emacsはどの
ようにしてメールを送信するべきか — SMTPを通じて直接送信するか、またはほ
かの方法を使うか — を尋ねます。詳細は、*note Mail Sending::を参照してく
ださい。

* Menu:

* Format: Mail Format.       メールメッセージのフォーマット。
* Headers: Mail Headers.     いくつかの標準的なメールヘッダーフィールドの詳細。
* Aliases: Mail Aliases.     メールアドレスの短縮とグループ化。
* Commands: Mail Commands.   作成するメールを編集するための特別なコマンド。
* Signature: Mail Signature.  各メッセージに署名を追加する。
* Amuse: Mail Amusements.    NSAを混乱させるキーワードや、fortuneのメッセージを累加する。
* Methods: Mail Methods.     他のメール作成方法を使用する。


File: emacs-ja.info,  Node: Mail Format,  Next: Mail Headers,  Up: Sending Mail

32.1 メールバッファーのフォーマット
===================================

以下はメールバッファーの内容の例です:

     To: subotai@example.org
     CC: mongol.soldier@example.net, rms@gnu.org
     Subject: Re: What is best in life?
     From: conan@example.org
     --text follows this line--
     To crush your enemies, see them driven before you, and to
     hear the lamentation of their women.

メールバッファーのトップは、一連の“ヘッダーフィールド(header fields)”で
す。これは電子メールの受取人、subject(題目)などに関する情報を指定するの
に使用されます。上記のバッファー例には‘To’、‘Cc’、‘Subject’、‘From’のヘ
ッダーフィールドが含まれています。いくつかのヘッダーフィールドは、それが
適切なときは、事前に自動的に初期化されます。

   ‘--text follows this line--’という行は、ヘッダーフィールドとメッセー
ジの“body”(本文、または“text”)を分割します。この行の上にあるすべては、ヘ
ッダーの一部として扱われます。下にあるすべては、bodyとして扱われます。区
切り行自体は、実際に送信されるメッセージには含まれません。

   通常の編集コマンドで、ヘッダーフィールドの挿入と編集ができます。ヘッ
ダーフィールドを編集するための特定のコマンドについては、*note Header
Editing::を参照してください。‘Date’や‘Message-Id’のような特定のヘッダー
は、通常はメールバッファーでは省略され、メッセージを送信するとき自動的に
作成されます。


File: emacs-ja.info,  Node: Mail Headers,  Next: Mail Aliases,  Prev: Mail Format,  Up: Sending Mail

32.2 メールヘッダーフィールド
=============================

メールバッファーのヘッダーフィールドは、行の最初がフィールド名で始まりま
す。フィールド名はコロンで終端されます。フィールド名で大文字小文字は区別
されません。コロンとオプションの空白文字の後に、フィールドの内容を記述し
ます。

   好きな名前のヘッダーフィールドを使用できますが、多くの人は通常、一般
に認められた意味をもつは、標準的なフィールド名だけを使用します。

   ヘッダーフィールド‘From’は、電子メールを送信した人(あとえばあなた)を
識別します。これは有効なメールアドレスである必要があります。なぜなら、通
常はそのアドレスに返信されるからです。このヘッダーフィールドのデフォルト
の内容は、変数‘user-full-name’(あなたのフルネームを指定します)と
‘user-mail-address’(あなたの電子メールアドレス)から計算されます。いくつ
かのオペレーティングシステムでは、Emacsはこの2つの変数を環境変数から初期
化します(*note General Variables::を参照してください)。この情報が利用不
可能か間違っている場合、変数を自分でカスタマイズする必要があります(*note
Easy Customization::を参照してください)。

   変数‘mail-from-style’の値は、‘From’フィールドの内容をどのようにフォー
マットするかを指定します:

‘nil’
     ‘king@grassland.com’のように、アドレスだけを使用します。
‘parens’
     ‘king@grassland.com (Elvis Parsley)’のように、アドレスとフルネーム
     の両方を使用します。
‘angles’
     ‘Elvis Parsley <king@grassland.com>’のように、アドレスとフルネーム
     の両方を使用します。
any other value
     通常は‘angles’を使用します。しかし‘angles’では、構文的に有効にする
     ためにアドレスを“クォート”しなければならないときは、かわりに
     ‘parens’を使用します。これがデフォルトです。

   以下は‘From’以外の、一般的に使用されるフィールドの表です:

‘To’
     メッセージを送信するメールアドレスです。複数のアドレスを記述するに
     は、それらを区切るのにカンマを使用します。

‘Subject’
     メッセージのsubjectです。

‘CC’
     メッセージを送信する追加のメールアドレスです。これは‘To’と似ていま
     すが、受取人はそのメッセージが自分宛だと思うべきではありません。

‘BCC’
     実際に送信するメッセージのヘッダーには現れない、追加のメッセージ送
     信先のメールアドレスです。“BCC”は“blind carbon copies”が由来です。

‘FCC’
     送信されたメッセージのコピーが追加されるべき、ファイルの名前です。
     ファイルがBabyl形式(Emacs23以前のRmailで使用されていました)の場合、
     EmacsはBabyl形式で書き込み、それ以外はmbox形式で書き込みます。
     Rmailバッファーがそのファイルをvisitしている場合、Emacsはそれに合わ
     せて更新します。複数のファイルを指定するには、複数の‘FCC’フィールド
     を使用して、各フィールドに1つのファイル名を記述します。

‘Reply-to’
     ‘From’のかわりとなる、返信が送信されるべきアドレスです。これは何ら
     かの理由により、‘From’のアドレスが返信を受け取れないときに使用しま
     す。

‘Mail-reply-to’
     このフィールドは‘Reply-to’より優先されます。メーリングリストの中に
     は、‘Reply-to’を独自の目的(問題の多い、何らかの方法)のために使用し
     ているものがあるため、これが使用されます。

‘Mail-followup-to’
     follow-upメッセージのための、デフォルトの受取人のために使用する1つ
     以上のアドレスです。これは通常、登録しているメーリングリストからメ
     ッセージを受信するとき、余分なコピーを送らせないようにしたいときに
     使用します。

‘In-reply-to’
     返信するメッセージのための識別子です。ほとんどのメールリーダーは、
     関連するメッセージをまとめてグループ化するためにこの情報を使用しま
     す。このヘッダーは通常、Emacsに組み込まれた任意のメールプログラムで
     メッセージに返信するとき、自動的に充填されます。

‘References’
     以前の関連するメッセージのための識別子です。‘In-reply-to’と同じよう
     に、これは通常、自動的に充填されます。

‘To’、‘CC’、‘BCC’のフィールドは何回記述してもよく、また各フィールドには
カンマで括って複数のアドレスを含めることができます。この方法により、メッ
セージを送信する複数の場所を指定できます。これらのフィールドには継続行も
使用できます。フィールドの開始行に続く、空白文字で始まる1行以上の行は、
そのフィールドの一部とみなされます。以下は継続行を使用した‘To’フィールド
の例です:

     To: foo@example.net, this@example.net,
       bob@example.com

   変数‘mail-default-headers’に文字列をセットすることにより、特定のデフ
ォルトヘッダーを挿入するよう、Emacsに指示できます。これにより‘C-x m’でメ
ッセージヘッダーにその文字列が挿入されます。たとえば以下は、各メッセージ
にヘッダー‘Reply-to’と‘FCC’を追加する例です:

     (setq mail-default-headers
           "Reply-to: foo@example.com\nFCC: ~/Mail/sent")

デフォルトのヘッダーフィールドが、特定のメッセージにたいして適切でない場
合、メッセージを送信する前にそれらを編集する必要があります。


File: emacs-ja.info,  Node: Mail Aliases,  Next: Mail Commands,  Prev: Mail Headers,  Up: Sending Mail

32.3 メールエイリアス
=====================

“メールエイリアス(mail aliases)”を定義することができます。これは1つ以上
のメールアドレスを意味する短い呼び名です。デフォルトでは、メールエイリア
スはファイル‘~/.mailrc’で定義されます。変数‘mail-personal-alias-file’を
セットすることにより、異なるファイル名を指定できます。

   ‘.mailrc’でエイリアスを定義するには、以下のように記述します:

     alias NICK FULLADDRESSES

これはNICKがFULLADDRESSESに展開されるという意味で、FULLADDRESSESは単一の
アドレス、またはスペースで区切られた複数のアドレスです。たとえば
‘maingnu’が、‘gnu@gnu.org’とあなた自身のローカルのアドレスを意味するよう
定義するには、以下の行を記述します:

     alias maingnu gnu@gnu.org local-gnu

アドレスにスペースが含まれる場合は、以下のようにダブルクォートでアドレス
全体をクォートします:

     alias jsmith "John Q. Smith <none@example.com>"

その人の名前の部分などのような、アドレスの特定の部分をダブルクォートで括
る必要はないことに注意してください。Emacsは必要に応じてそれらを挿入しま
す。たとえば上記のアドレスは‘"John Q. Smith" <none@example.com>’のように
挿入されます。

   Emacsは、‘.mailrc’での“include”コマンドも識別します。これらは以下のよ
うなものです:

     source FILENAME

ファイル‘.mailrc’は、Emacsだけのものではありません。他の多くのメールを閲
覧するプログラムが、メールアドレスのためにこれを使用し、他にもさまざまな
コマンドが含まれます。しかしEmacsは、エイリアスの定義とインクルードコマ
ンド以外のすべてを無視します。

   メールエイリアスはabbrevのように — つまり、エイリアスの後で単語区切り
文字をタイプするとすぐに — 展開されます。この展開はヘッダーフィールド
‘To’、‘From’、‘CC’、‘BCC’、‘Reply-to’(およびそれらの‘Resent-’の変種)だけ
で展開されます。‘Subject’のような、他のヘッダーフィールドでは展開されま
せん。

   コマンド‘M-x mail-abbrev-insert-alias’を使って、エイリアスされたアド
レスを直接挿入することもできます。これは補完つきでエイリアス名を読み取り
、ポイント位置にそれの定義を挿入します。


File: emacs-ja.info,  Node: Mail Commands,  Next: Mail Signature,  Prev: Mail Aliases,  Up: Sending Mail

32.4 メールコマンド
===================

‘*mail*’バッファーのデフォルトのメジャーモードは、Messageモードと呼ばれ
ます。これはTextモードのように振る舞いますが、メッセージをより快適に編集
するために、‘C-c’プレフィクスを伴う、追加のコマンドをいくつか提供します
。

   このセクションでは、Messageモードで利用可能な、もっとも一般的に使用さ
れるコマンドを説明します。 Messageモードにはそれ自身のマニュアルがあり、
その機能についてより詳細に説明されています。*note Message:
(message)Top.を参照してください。

* Menu:

* Mail Sending::             メッセージを送信するコマンド。
* Header Editing::           ヘッダーフィールドに移動して編集するコマンド。
* Citing Mail::              返信するメッセージのクォート。
* Mail Misc::                ファイル添付、スペルチェックなど。


File: emacs-ja.info,  Node: Mail Sending,  Next: Header Editing,  Up: Mail Commands

32.4.1 メールの送信
-------------------

‘C-c C-c’
     そのメッセージを送信して、メールバッファーを隠し(bury)ます
     (‘message-send-and-exit’)。
‘C-c C-s’
     そのメッセージを送信して、メールバッファーを選択されたまま残します
     (‘message-send’)。

   メッセージを送信するために通常使用されるコマンドは、‘C-c C-c’
(‘mail-send-and-exit’)です。これはメッセージを送信して、メールバッファー
を“隠す(bury)” — つまりバッファーを再選択するときもっとも低い優先順位に
なるようにします。かわりにメールバッファーをkillしたい場合は、変数
‘message-kill-buffer-on-exit’を‘t’に変更してください。

   コマンド‘C-c C-s’ (‘message-send’)はメッセージを送信して、そのバッフ
ァーを選択されたまま残します。(たとえば新しい送信先のために)メッセージを
変更して、再度送信したい場合に、このコマンドを使用します。

   メッセージの送信により、フック‘message-send-hook’が実行されます。メー
ルバッファーがファイルをvisitしているバッファーの場合をのぞき、送信によ
りメールバッファーは変更なし(unmodified)とマークされます(ファイルを
visitしている場合は、そのファイルを保存したときだけ変更なしとマークされ
ます。このため、同じメッセージを2回送信しても警告はされません)。

   変数‘send-mail-function’は、メッセージの配送方法を制御します。値には
、以下の関数のどれか1つを指定します:

‘sendmail-query-once’
     配送方法(このリストの他の項目のうちの1つ)を尋ね、このメッセージにそ
     の方法を使用します。‘smtpmail-send-it’を通じてすでにメールの配送方
     法を変数にセットしていない場合(以下参照)、これがデフォルトです。

‘smtpmail-send-it’
     インターネットサービスプロバイダーの対外SMTPメールサーバーのような
     、外部のメールホストを通じてメールを送信します。そのSMTPサーバーに
     接続する方法をEmacsに指示していない場合、コマンドはこの情報の入力を
     求め、それは変数‘smtpmail-smtp-server’と、ファイル‘~/.authinfo’に保
     存されます。*note Emacs SMTP Library: (smtpmail)Top.を参照してくだ
     さい。

‘sendmail-send-it’
     システムのデフォルトの‘sendmail’プログラム、またはそれと等価なプロ
     グラムを使用してメールを送信します。これは、そのシステムがSMTPで直
     接メールを配送できるように、セットアップされている必要があります。

‘mailclient-send-it’
     メールバッファーを、システムで指定されたメールクライアントに渡しま
     す。詳細はファイル‘mailclient.el’の、コメントセクションを参照してく
     ださい。

‘feedmail-send-it’
     これは‘sendmail-send-it’と同様ですが、後で送信するためにメッセージ
     をキューできます。詳細は、ファイル‘feedmail.el’の、コメントセクショ
     ンを参照してください。

   非ASCII文字を含むメッセージを送信する場合、それらはコーディングシステ
ムでエンコードされる必要があります。コーディングシステムは通常、選択され
た言語環境(*note Language Environments::を参照してください)により、自動
的に指定されます。変数‘sendmail-coding-system’をセットすることにより、対
外に送信するメールのコーディングシステムを明示的に指定することができます
(*note Recognize Coding::を参照してください)。そのようにして決定されたコ
ーディングシステムで扱えない文字が、特定のメッセージに含まれる場合、
Emacsは利用可能なコーディングシステムのリストを表示して、使用するコーデ
ィングシステムの選択を求めます。


File: emacs-ja.info,  Node: Header Editing,  Next: Citing Mail,  Prev: Mail Sending,  Up: Mail Commands

32.4.2 メールヘッダーの編集
---------------------------

Messageモードは、特定のヘッダーフィールドに移動したり、ヘッダーのアドレ
スを補完する、以下の特別なコマンドを提供します。

‘C-c C-f C-t’
     ‘To’ヘッダーに移動します(‘message-goto-to’)。
‘C-c C-f C-s’
     ‘Subject’ヘッダーに移動します(‘message-goto-subject’)。
‘C-c C-f C-c’
     ‘CC’ヘッダーに移動します(‘message-goto-cc’)。
‘C-c C-f C-b’
     ‘BCC’ヘッダーに移動します(‘message-goto-bcc’)。
‘C-c C-f C-r’
     ‘Reply-To’ヘッダーに移動します(‘message-goto-reply-to’)。
‘C-c C-f C-f’
     ‘Mail-Followup-To’ヘッダーフィールドに移動します
     (‘message-goto-followup-to’)。
‘C-c C-f C-w’
     ファイル名の補完つきで、新しい‘FCC’ヘッダーフィールドを追加します
     (‘message-goto-fcc’)。
‘C-c C-b’
     メッセージ本文の先頭に移動します(‘message-goto-body’)。
‘<TAB>’
     メールアドレスを補完します(‘message-tab’)。

   特定のヘッダーフィールドにポイントを移動するコマンドは、すべて‘C-c
C-f’というプレフィクスを指定します(‘C-f’は“field”が由来です)。指定したフ
ィールドが存在しない場合、コマンドは新たにそれを作成します(例外は
‘mail-fcc’で、これは毎回新たなフィールドを作成します)。

   コマンド‘C-c C-b’ (‘message-goto-body’)は、ポイントをヘッダー区切り行
の下 — つまり本文の先頭にポイントを移動します。

   ‘To:’、‘CC:’、‘BCC:’のようなアドレスを含むヘッダーフィールドを編集し
ているときは、<TAB> (‘message-tab’)をタイプすることにより、アドレスを補
完できます。これは2つの方法にもとづいて、そのアドレスにタイプするフルネ
ームを挿入しようと試みます。まず複数のディレクトリーサーバープロトコルを
認識するEUDCライブラリーを試み(*note EUDC: (eudc)Top.を参照してください
)、それに失敗したときはメールエイリアスによりアドレスの展開を試みます
(*note Mail Aliases::を参照してください)。メール本文のような、アドレスを
要求しないヘッダーフィールドにポイントがあるとき、<TAB>はタブ文字を挿入
するだけです。


File: emacs-ja.info,  Node: Citing Mail,  Next: Mail Misc,  Prev: Header Editing,  Up: Mail Commands

32.4.3 メールの引用
-------------------

‘C-c C-y’
     選択されたメッセージを、引用のためにメールリーダーからyankします
     (‘message-yank-original’)。
‘C-c C-q’
     他のメッセージから引用された各パラグラフをフィルします
     (‘message-fill-yanked-message’)。

   ‘C-c C-y’ (‘message-yank-original’)を使用して、返信するメッセージから
“引用(cite)”することができます。これは、そのメッセージのテキストをメール
バッファーに挿入します。このコマンドは、Rmailのように、Emacsから実行され
るメールリーダーから呼び出されたときだけ機能します。

   デフォルトでは、Emacsは引用されたテキストの各行の前に、文字列‘>’を挿
入します。このプレフィクス文字列は、変数‘message-yank-prefix’で指定され
ます。プレフィクス引数を指定して‘message-yank-original’を呼び出した場合
、引用のためのプレフィクスは挿入されません。

   ‘C-c C-y’を使用した後で、‘C-c C-q’ (‘message-fill-yanked-message’)と
タイプして、引用されたメッセージのパラグラフをフィルできます。‘C-c C-q’の
1つの使い方としては、そのようなパラグラフのすべてを個別にフィルすること
です。クォートされたメッセージの1つのパラグラフをフィルするには、‘M-q’を
使います。フィルが、あなたが使用している引用プレフィクスを自動的に処理し
ない場合は、フィルプレフィクスを明示的にセットしてみてください。*note
Filling::を参照してください。

   フック‘mail-citation-hook’を通じて、メールの引用をカスタマイズできま
す。たとえば、より柔軟な引用を提供するSuperciteパッケージを使うことがで
きます(*note (sc)Introduction::を参照してください)。


File: emacs-ja.info,  Node: Mail Misc,  Prev: Citing Mail,  Up: Mail Commands

32.4.4 メール、その他
---------------------

メールバッファーで‘C-c C-a’ (‘mml-attach-file’)とタイプすることにより、
送信するメッセージに、ファイルを“添付(attach)”できます。添付は、
MIME(Multipurpose Internet Mail Extensions)標準を使って行なわれます。

   ‘mml-attach-file’コマンドはファイル名と、添付ファイルの“content
type(内容のタイプ)”、“description(説明)”、“disposition(性質)”の入力を求
めます。通常content typeは自動的に検知されます。単に<RET>とタイプすると
、そのデフォルトが適用されます。descriptionは1行のテキストで、そのメール
の受取人には添付ファイルの隣に表示されます。これは空にすることもできます
。dispositionは‘inline’(デフォルト)、または‘attachment’のどちらかです。
‘inline’の場合、メッセージ本文に添付ファイルへのリンクが表示され、
‘attachment’の場合は、本文とは別にリンクが表示されます。

   ‘mml-attach-file’コマンドは、Messageモードに特有なコマンドです。
Mailモードではかわりに、‘mail-add-attachment’を使用します。これはファイ
ル名の入力だけを求め、content typeとdispositionは自動的に決定されます。
添付ファイルの説明を含めたい場合は、それをメッセージの本文にタイプしてく
ださい。

   添付ファイルの実際の内容は、メールバッファーには挿入されません。かわ
りに、以下のような代替テキストがメールバッファーに挿入されます:

     <#part type="text/plain" filename="~/foo.txt" disposition=inline>
     <#/part>

‘C-c C-c’または‘C-c C-s’でメッセージを送信するとき、それと一緒に添付ファ
イルも送信されます。

   メッセージを作成しているとき、‘M-x ispell-message’とタイプして、メッ
セージテキストのスペル訂正を行なうことができます。受信メッセージから送信
用の下書きにyankした場合、このコマンドはyankされたテキストをスキップして
、あなた自身が挿入したテキストだけをチェックします(このコマンドはインデ
ント、またはあなたの入力と引用された行を区別する‘mail-yank-prefix’を調べ
ます)。*note Spelling::を参照してください。

   Messageモードをオンに切り替えると(‘C-x m’は自動的にこれを行ないます
)、ノーマルフックの‘text-mode-hook’と‘message-mode-hook’が自動的に実行さ
れます。新しい送信メッセージの初期化では、ノーマルフック
‘message-setup-hook’が実行されます。メールバッファーの外観を変更したい場
合は、このフックを使うことができます。*note Hooks::を参照してください。

   これらのフックの主な違いは、それらが呼び出されるタイミングだけです。
‘C-x m’, ‘message-mode-hook’とタイプしたときは、メールバッファーが作成さ
れた直後に‘message-mode-hook’が実行されます。その後‘message-setup’関数が
そのバッファーのデフォルトの内容を挿入します。これらのデフォルトの内容が
挿入された後に、‘message-setup-hook’が実行されます。

   既存のメッセージにたいして、‘C-x m’で作成を継続する場合、そのメールバ
ッファーに切り替えた直後に、‘message-mode-hook’が実行されます。バッファ
ーが変更されていない場合、またはそれを削除して新たに作成を開始する場合に
は、デフォルトの内容が挿入された後に、‘message-setup-hook’が実行されます
。


File: emacs-ja.info,  Node: Mail Signature,  Next: Mail Amusements,  Prev: Mail Commands,  Up: Sending Mail

32.5 メール署名
===============

各メッセージの最後に標準的なテキストの断片 — “メール署名(mail
signature)” — を追加できます。この署名には、あなたの電話番号や住所などの
情報を含めることができます。変数‘message-signature’は、Emacsがメール署名
を扱う方法を決定します。

   ‘message-signature’のデフォルト値は‘t’です。これはメール署名をファイ
ル‘~/.signature’から探すことを意味します。ファイルが存在する場合、そのフ
ァイルの内容がメールバッファーの最後に自動的に挿入されます。変数
‘message-signature-file’を通じて署名ファイルを変更できます。

   ‘message-signature’を文字列に変更すると、それは署名のテキストを直接指
定することになります。

   ‘message-signature’を‘nil’に変更した場合、Emacsはメール署名を自動的に
挿入しません。メールバッファーで‘C-c C-w’ (‘message-insert-signature’)と
タイプすることにより、メール署名を挿入できます。この場合も、Emacsは署名
ファイルから署名を探します。

   メールを作成するのにMessageモードではなくMailモードを使用する場合、ど
のようにして署名を送るか決定する変数は、‘mail-signature’と
‘mail-signature-file’になります。

   慣例により、メール署名は行の内容が‘-- ’であることによりマークされるべ
きです。署名にこのプレフィクスがない場合、このプレフィクスが追加されます
。署名は4行を超えないようにするべきです。


File: emacs-ja.info,  Node: Mail Amusements,  Next: Mail Methods,  Prev: Mail Signature,  Up: Sending Mail

32.6 アミューズメント
=====================

‘M-x spook’は、送信するメールメッセージに、ランダムに選択されたキーワー
ドの行を追加します。これらのキーワードは、あなたが何らかの破壊活動を企て
ていると思わせるような単語のリストから選択されます。

   この機能の背後にあるアイデアは、NSA(1)や他の情報機関が、かれらが関心
をもつキーワードを含むすべてのインターネットメールのメッセージを監視して
いるという疑惑です(そのような政府機関は、“やっていない”と言いますが、も
ちろんかれらはそう言うでしょう)。このアイデアは、もし多くの人々がメッセ
ージに不審な単語を含めれば、政府機関は不審な入力で手一杯になり、やがて最
後はそれらを読むのを止めるだろうというものです。これが本当かどうかはわか
りませんが、少なくとも人々を楽しませることができます。

   ‘fortune’プログラムを使用して、送信メールに“フォーチューンクッキー
(fortune cookie)”メッセージを追加できます。これを行なうには
‘mail-setup-hook’に‘fortune-to-signature’を追加してください。

     (add-hook 'mail-setup-hook 'fortune-to-signature)

多分、これを使う前に変数‘fortune-file’をセットする必要があるでしょう。

   ---------- Footnotes ----------

   (1) The US National Security Agency.


File: emacs-ja.info,  Node: Mail Methods,  Prev: Mail Amusements,  Up: Sending Mail

32.7 メール作成方法
===================

このチャプターでは、メールを編集したり送信する通常のEmacsモードである、
Messageモードを説明してきました。これは、いくつかの利用可能なモードのう
ちの1つに過ぎません。Emacs23.2以前では、デフォルトのモードはMailモードで
、これは多くの点でMessageモードに似ていますが、MIMEサポートのような機能
がありません。その他の利用可能なモードはMH-Eです(*note MH-E: (mh-e)Top.を
参照してください)。

   これらの“メールユーザーエージェント(mail user agents)”から、メールを
編集したり送信するための、好みの方法を選択できます。コマンド‘C-x m’、
‘C-x 4 m’、‘C-x 5 m’は指定されたエージェントを使用するので、Emacsでメー
ルを送信する他の様々な部分(たとえばバグリポーターなど、*note Bugs::を参
照してください)もこれを行ないます。メールユーザーエージェントを指定する
には、変数‘mail-user-agent’をカスタマイズします。現在のところ、正式な値
には‘message-user-agent’(Messageモード)、‘sendmail-user-agent’(Mailモー
ド)、‘gnus-user-agent’、‘mh-e-user-agent’が含まれます。

   他のメール作成方法を選択した場合、メールバッファーとMessageモードに関
するこのチャプターの情報は適用できません。他の方法は違うバッファーで異な
るフォーマットのテキストを使用し、コマンドも異なります。

   同様に、メールを読むための好みの方法を指定するには、変数
‘read-mail-command’をカスタマイズします。デフォルトは‘rmail’です(*note
Rmail::を参照してください)。


File: emacs-ja.info,  Node: Rmail,  Next: Gnus,  Prev: Sending Mail,  Up: Top

33 Rmailでメールを読む
**********************

Rmailは、メールを閲覧したり処理するための、Emacsのサブシステムです。
Rmailは、Rmailファイルを呼ばれるファイルに、メールメッセージを保存します
。Rmailファイルの中のメッセージの閲覧は、Rmailモードという特別なメジャー
モードで行なわれます。このモードはメールを管理するために実行するコマンド
のために、多くの文字を再定義します。
* Menu:

* Basic: Rmail Basics.       Rmailの基本的な概念と簡単な使い方。
* Scroll: Rmail Scrolling.   メッセージをスクロールする。
* Motion: Rmail Motion.      他のメッセージへの移動。
* Deletion: Rmail Deletion.  メッセージの削除と完全な削除。
* Inbox: Rmail Inbox.        メールがRmailファイルに取り込まれる方法。
* Files: Rmail Files.        複数のRmailファイルの使用。
* Output: Rmail Output.      ファイルの外へメッセージをコピーする。
* Labels: Rmail Labels.      メッセージにラベルをつけて分類する。
* Attrs: Rmail Attributes.   属性と呼ばれる標準的なラベル。
* Reply: Rmail Reply.        閲覧しているメッセージにたいして返信する。
* Summary: Rmail Summary.    多くのメッセージの簡単な情報の要約。
* Sort: Rmail Sorting.       Rmailでのメッセージのソート。
* Display: Rmail Display.    Rmailがメッセージを表示する方法とカスタマイズ。
* Coding: Rmail Coding.      Rmailがデコードされた文字セットを扱う方法。
* Editing: Rmail Editing.    Rmailでのメッセージのテキストとヘッダーの編集。
* Digest: Rmail Digest.      メッセージのダイジェストからメッセージを抽出する。
* Rot13: Rmail Rot13.        rot13コードでエンコードされたメッセージの閲覧。
* Movemail::                 新たなメールのフェッチに関する詳細。
* Remote Mailboxes::         リモートmailboxからのメールの取得について。
* Other Mailbox Formats::    さまざまなフォーマットのローカルmailboxからのメールの取得。


File: emacs-ja.info,  Node: Rmail Basics,  Next: Rmail Scrolling,  Up: Rmail

33.1 Rmailの基本的な概念
========================

もっとも簡単な方法でRmailを使用するには、メールが保存される‘~/RMAIL’とい
うRmailファイルを使用します。これは“プライマリーRmailファイル(primary
Rmail file)”と呼ばれます。コマンド‘M-x rmail’はプライマリーRmailファイル
を読み込み、inbox(受信箱)から新しいメールをマージして、未読の最初のメッ
セージを表示して、それを閲覧出きるようにします。変数‘rmail-file-name’は
プライマリーRmailファイルの名前を指定します。

   Rmailは、Rmailファイルのメッセージを、1度に1つだけ表示します。表示さ
れているメッセージは、“カレントメッセージ(current message: 現在のメッセ
ージ)”と呼ばれます。Rmailモードの特別なコマンドは、カレントメッセージの
削除、他のファイルへのコピー、返信、他のメッセージへの移動を行なうことが
できます。複数のRmailファイルを作成して、それらの間でメッセージの移動を
するのに、Rmailを使用することができます。

   Rmailファイルでは通常、メッセージは受信した順になっています。それらを
ソートする他の方法を指定できます(*note Rmail Sorting::を参照してください
)。メッセージは連続する整数で識別され、それは“メッセージナンバー(message
numbers)”と呼ばれます。カレントメッセージのナンバーはRmailのモードライン
に表示され、その後にはファイル内のメッセージの総数が続きます。‘j’でメッ
セージナンバーを指定して、そのメッセージに移動できます(*note Rmail
Motion::を参照してください)。

   通常のEmacsの慣例にしたがい、Rmailでの変更は、そのファイルを保存した
ときだけ永続化されます。‘s’ (‘rmail-expunge-and-save’)で、ファイルを保存
することができます、これは最初に削除されたメッセージをファイルから完全に
削除します(*note Rmail Deletion::を参照してください)。完全な削除を行なわ
ずにファイルを保存するには、‘C-x C-s’を使用します。Rmailは、inboxファイ
ルから新しいメールをマージした後にも、Rmailファイルを保存します。

   Rmailをexitするには、‘q’ (‘rmail-quit’)を使用します。これはRmailにた
いして完全な削除と保存を行い、Rmailバッファーと、(表示されていれば)サマ
リーバッファーを隠します(*note Rmail Summary::を参照してください)。しか
し正式に“exit”する必要はありません。Rmailから他のバッファーを編集するた
めに切り替えて、2度とRmailに戻らなければ、それはexitしたことになります。
(他の変更したファイルと同様に)最終的にRmailファイルを確実に保存すること
だけが重要です。これを行なうには‘C-x s’が適しています(*note Save
Commands::を参照してください)。Rmailコマンドの‘b’ ‘rmail-bury’は、
Rmailファイルにたいする完全な削除と保存を行なわずに、Rmailバッファーとサ
マリーを隠します。


File: emacs-ja.info,  Node: Rmail Scrolling,  Next: Rmail Motion,  Prev: Rmail Basics,  Up: Rmail

33.2 メッセージのスクロール
===========================

Rmailが画面に収まらないメッセージを表示しているときは、残りを読むために
スクロールしなければなりません。‘C-v’、‘M-v’、‘M-<’などでこれを行なうこ
とができますが、Rmailでのスクロールは頻繁に行なわれるので、簡単に行なえ
るようにする価値があります。

‘<SPC>’
     前方にスクロールします(‘scroll-up-command’)。
‘<DEL>’
‘S-<SPC>’
     後方にスクロールします(‘scroll-down-command’)。
‘.’
     メッセージの最初にスクロールします(‘rmail-beginning-of-message’)。
‘/’
     メッセージの最後にスクロールします(‘rmail-end-of-message’)。

   メッセージを読むときにもっとも一般的に行なうのは、画面単位でメッセー
ジをスクロールすることなので、Rmailは<SPC>と<DEL>(または‘S-<SPC>’)で、
‘C-v’ (‘scroll-up-command’)と‘M-v’ (‘scroll-down-command’)と同じことを行
なうようにしています。

   コマンド‘.’ (‘rmail-beginning-of-message’)は、選択されたメッセージの
最初に、後方へスクロールします。これは‘M-<’とまったく同じではありません
。このコマンドはマークをセットしません。他にも、カレントメッセージのバッ
ファー境界を変更していた場合は、それをリセットします。同様に、コマンド
‘/’ (‘rmail-end-of-message’)は、選択されたメッセージの最後に、前方へスク
ロールします。


File: emacs-ja.info,  Node: Rmail Motion,  Next: Rmail Deletion,  Prev: Rmail Scrolling,  Up: Rmail

33.3 メッセージ間の移動
=======================

メッセージにたいして行なうもっとも基本的なことは、それを読むことです。
Rmailでこれを行なうために、そのメッセージをカレントにします。通常の方法
はファイルを、受信したメッセージ順に移動していく方法です(その最初のメッ
セージは‘unseen’(未読)の属性をもちます。*note Rmail Attributes::を参照し
てください)。他の新しいメッセージを読むには、前方に移動します。古いメッ
セージを再読するには後方に移動します。

‘n’
     間にある削除されたメッセージをスキップして、次の削除されていないメ
     ッセージに移動します(‘rmail-next-undeleted-message’)。
‘p’
     前の削除されていないメッセージに移動します
     (‘rmail-previous-undeleted-message’)。
‘M-n’
     削除されたメッセージも含めて、次のメッセージに移動します
     (‘rmail-next-message’)。
‘M-p’
     削除されたメッセージも含めて、前のメッセージに移動します
     (‘rmail-previous-message’)。
‘C-c C-n’
     カレントメッセージと同じsubjectの、次のメッセージに移動します
     (‘rmail-next-same-subject’)。
‘C-c C-p’
     カレントメッセージと同じsubjectの、前のメッセージに移動します
     (‘rmail-previous-same-subject’)。
‘j’
     最初のメッセージに移動します。引数Nを指定すると、N番目のメッセージ
     に移動します(‘rmail-show-message’)。
‘>’
     最後のメッセージに移動します(‘rmail-last-message’)。
‘<’
     最初のメッセージに移動します(‘rmail-first-message’)。

‘M-s REGEXP <RET>’
     REGEXPへのマッチを含む、次のメッセージに移動します
     (‘rmail-search’)。

‘- M-s REGEXP <RET>’
     REGEXPへのマッチを含む、前のメッセージに移動します。

   ‘n’と‘p’は、Rmailでメッセージを移動する通常の方法です。これらは、(通
常そうしたいように)削除されたメッセージをスキップして、メッセージを順番
に移動していきます。これらのコマンドの定義には、
‘rmail-next-undeleted-message’および‘rmail-previous-undeleted-message’と
いう名前がつけられています。削除されたメッセージをスキップしたくない場合
— たとえばメッセージの削除を取り消すために — は、変種の‘M-n’と
‘M-p’(‘rmail-next-message’と‘rmail-previous-message’)を使います。これら
のコマンドへの数引数は、繰り返し回数を指定します。

   Rmailでは数引数の指定は、単に数字をタイプして行なうことができます。最
初に‘C-u’をタイプする必要はありません。

   ‘M-s’ (‘rmail-search’)は、Rmail版の検索コマンドです。通常のインクリメ
ンタル検索‘C-s’は機能しますが、これはカレントメッセージだけを検索します
。‘M-s’の目的は、他のメッセージにたいする検索です。これは非インクリメン
タルに正規表現(*note Regexps::を参照してください)を読み取り、後続のメッ
セージの先頭から検索を開始して、見つかったらそのメッセージを選択します。
REGEXPが空の場合、‘M-s’は前回使用したregexpを再使用します。

   ファイルの中の他のメッセージにたいして後方に検索するには、‘M-s’に負の
引数を与えます。Rmailでは‘- M-s’でこれを行なうことができます。これは前の
メッセージの最後から検索を開始します。

   ラベルにもとづく検索も可能です。*note Rmail Labels::を参照してくださ
い。

   ‘C-c C-n’ (‘rmail-next-same-subject’)コマンドは、カレントメッセージと
同じsubjectをもつ、次のメッセージに移動します。プレフィクス引数は繰り返
し回数として使用されます。負の引数を指定すると、‘C-c C-p’
(‘rmail-previous-same-subject’)のように、後方に移動します。subjectを比較
するとき、subjectへの返信に通常付加されるようなプレフィクスは無視します
。

   メッセージの絶対番号を指定してメッセージに移動するには、メッセージ番
号を引数として、‘j’ (‘rmail-show-message’)を使用します。引数を与えない場
合、‘j’は最初のメッセージに移動します。‘<’ (‘rmail-first-message’)も最初
のメッセージを選択します。‘>’ (‘rmail-last-message’)は最後のメッセージを
選択します。


File: emacs-ja.info,  Node: Rmail Deletion,  Next: Rmail Inbox,  Prev: Rmail Motion,  Up: Rmail

33.4 メッセージの削除
=====================

メッセージを残す必要がなくなったとき、それを“削除(delete)”できます。これ
はそのメッセージを無視するフラグをつけ、いくつかのRmailコマンドは、その
メッセージが存在しないかのように振る舞います。しかし、そのメッセージはま
だRmailファイルの中にあり、メッセージ番号ももっています。

   Rmailファイルにたいして“完全な削除(expunging)”を行なうことにより、削
除されたメッセージを実際に消去します。残ったメッセージには新たに連番が振
られます。

‘d’
     カレントメッセージを削除して、次の削除されていないメッセージに移動
     します(‘rmail-delete-forward’)。
‘C-d’
     カレントメッセージを削除して、前の削除されていないメッセージに移動
     します(‘rmail-delete-backward’)。
‘u’
     カレントメッセージの削除を取り消すか、前の削除されたメッセージに後
     方へ移動して、そのメッセージの削除を取り消します
     (‘rmail-undelete-previous-message’)。
‘x’
     Rmailファイルにたいして完全な削除を行ないます(‘rmail-expunge’)。

   Rmailには、メッセージを削除するためのコマンドが2つあります。両方とも
カレントメッセージを削除して、他のメッセージを選択します。‘d’
(‘rmail-delete-forward’)は、すでに削除されたメッセージをスキップして次の
メッセージに移動し、‘C-d’ (‘rmail-delete-backward’)は、前の削除されてい
ないメッセージに移動します。指定方向に、移動先となる削除されていないメッ
セージが存在しない場合は、単にそのメッセージを削除するだけで、カレントメ
ッセージはそのメッセージのままです。プレフィクス引数を指定した‘d’は、
‘C-d’と等価です。これらのコマンドのRmailサマリー版は、若干異なる動作をす
ることに注意してください(*note Rmail Summary Edit::を参照してください)。

   Rmailがメッセージを削除するときは、フック
‘rmail-delete-message-hook’が実行されます。フック関数が呼び出されるとき
、そのメッセージは削除とマークされますが、そのメッセージがRmailバッファ
ーのカレントメッセージのままです。

   すべての削除されたメッセージを最終的にRmailファイルから消すには、‘x’
(‘rmail-expunge’)とタイプします。これを行なうまでは、削除されたメッセー
ジの“削除を取り消す(undelete)”ことができます。削除の取り消しコマンド‘u’
(‘rmail-undelete-previous-message’)は、ほとんどのケースにおいて‘d’コマン
ドの効果を取り消すようにデザインされています。カレントメッセージが削除さ
れている場合は、カレントメッセージの削除を取り消します。そうでない場合は
、削除されたメッセージが見つかるまで後方に移動して、そのメッセージの削除
を取り消します。

   通常、‘d’を‘u’で取り消すことができます。なぜなら‘u’は後方に移動して、
‘d’で削除されたメッセージの削除を取り消すからです。しかしこれは、削除す
るメッセージの前にすでに削除されたメッセージがある場合、‘d’はこれらのメ
ッセージをスキップするのでうまく機能しません。その後で‘u’コマンドを実行
すると、スキップされた最後のメッセージの削除を取り消すからです。この問題
を避ける明解な方法はありません。しかし‘u’コマンドを繰り返すことにより、
削除を取り消したいメッセージに戻ることができます。‘M-p’コマンドで特定の
削除されたメッセージを選択してから、‘u’をタイプして削除を取り消すことも
できます。

   削除されたメッセージは‘deleted’の属性をもち、結果として、カレントメッ
セージが削除されている場合はモードラインに‘deleted’が表示されます。実際
のところ、メッセージの削除と削除の取り消しは、この属性の追加または削除に
過ぎません。*note Rmail Attributes::を参照してください。


File: emacs-ja.info,  Node: Rmail Inbox,  Next: Rmail Files,  Prev: Rmail Deletion,  Up: Rmail

33.5 Rmailファイルとinbox
=========================

ローカルでメールを受信したとき、オペレーティングシステムは受信メールを、
私たちが“inbox”と呼ぶファイルに配します。Rmailを開始したとき、
‘movemail’と呼ばれるCプログラムを実行して、ローカルのinboxから新しいメッ
セージを、RmailセッションのRmailファイルにコピーします。このRmailファイ
ルには、以前のRmailセッションの他のメッセージも含まれています。Rmailで実
際に読むメールは、このファイルの中にあります。この操作は“新しいメールの
取得(getting new mail)”と呼ばれます。‘g’とタイプすることにより、いつでも
新しいメールを取得できます。

   変数‘rmail-primary-inbox-list’は、プライマリーRmailファイルにたいする
inboxファイルのリストを含みます。この変数を明示的にセットしない場合、
Rmailは環境変数‘MAIL’を使用するか、最後の手段として
‘rmail-spool-directory’にもとづく、デフォルトのinboxを使用します。デフォ
ルトのinboxはオペレーティングシステムに依存し、それは
‘/var/mail/USERNAME’、‘/var/spool/mail/USERNAME’、
‘/usr/spool/mail/USERNAME’などです。

   コマンド‘set-rmail-inbox-list’で、カレントセッションでの任意のRmailフ
ァイルにたいするinboxファイルを指定できます。*note Rmail Files::を参照し
てください。

   inboxとは別にRmailファイルをもつべき理由が2つあります。

  1. inboxファイルのフォーマットは、オペレーティングシステムと、それを使
     用する他のメールソフトによりさまざまです。Rmailの一部だけがそれらの
     候補を理解していればよく、それらすべてをRmail自身のフォーマットに変
     換する方法だけを理解すればよいからです。

  2. メールを紛失せずにinboxにアクセスするのは厄介です。なぜならそれはメ
     ール配信とインターロック(連動)する必要があるからです。さらにオペレ
     ーティングシステムごとに、異なるインターロック技術が使用されていま
     す。inboxから別のRmailファイルに1度メールを移動する方法により、
     Rmailの残りのすべてがインターロックの必要性を無視できます。なぜなら
     RmailはRmailファイルだけを操作すればよいからです。

   Rmailのオリジナルは、内部形式としてBabylフォーマットを使用して記述さ
れていました。その後、わたしたちはUnixおよびGNUシステムの通常のinboxフォ
ーマット(‘mbox’)が処理に適していると気づき、Emacs23以降のRmailでは内部形
式としてmboxを使用しています。それらのフォーマットは同じになりましたが、
Rmailファイルの形式はまだmboxフォーマットとは異なります。 (実際のところ
、mboxフォーマットとは若干の違いがあります。その違いは重要ではありません
が、変数‘rmail-mbox-format’をセットすることにより、あなたのシステムが使
用するフォーマットをRmailに指定できます。詳細は、変数のドキュメントを参
照してください)。

   新しいメールを受信したとき、Rmailは最初にその新しいメールをinboxファ
イルからRmailファイルにコピーします。それからRmailファイルを保存して、そ
の後でinboxファイルからそれをクリアーします。この方法では、システムのク
ラッシュにより、inboxとRmailファイルの間でメールの重複は発生するかもしれ
ませんが、メールを失うことはあり得ません。‘rmail-preserve-inbox’が非
‘nil’の場合、Rmailは新しいメールを受信したときにinboxファイルをクリアー
しません。旅行の際など、携帯用のコンピューターでPOPを通じてメールをチェ
ックするときは、この変数をセットすれば、メールはサーバーに残るので、あと
であなたのワークステーションに保存することができます。

   Rmailがinboxファイルから間接的に新しいメールをコピーするケースがあり
ます。最初に‘movemail’プログラムを実行してinboxから、Rmailファイルと同じ
ディレクトリーにある、‘.newmail-INBOXNAME’と呼ばれる中間ファイルにメール
を移動します。その後、Rmailは、そのファイルから新しいメールをマージして
、Rmailファイルを保存し、中間ファイルの削除はその後にだけ行なわれます。
悪いタイミングでクラッシュが発生した場合、中間ファイルは残っているので、
Rmailは次にinboxファイルから新しいメールを取得するとき、それを再使用しま
す。

   Rmailが‘.newmail-INBOXNAME’の中のデータをmbox形式に変換できない場合、
ファイルを‘RMAILOSE.N’(Nはファイル名を一意にするために選ばれます)にリネ
ームするので、Rmailはそのデータで再度問題を起こすことはなくなります。メ
ッセージの何がRmailを混乱させたか調べて、それを削除すべきです(大抵は8進
コード037のcontrol-underscoreがメッセージに含まれている場合です)。その後
、修正されたファイルから‘1 g’を使って新しいメールを取得できます。


File: emacs-ja.info,  Node: Rmail Files,  Next: Rmail Output,  Prev: Rmail Inbox,  Up: Rmail

33.6 複数のRmailファイル
========================

Rmailはデフォルトで、あなたの“プライマリーRmailファイル(primary Rmail
file)”を操作します。これは‘~/RMAIL’というファイルで、inboxファイルからメ
ールを受け取ります。しかし他のRmailファイルを所有して。Rmailでそれを編集
することができます。これらのファイルは、それら自身のinboxからメールを受
け取ったり、明示的なRmailコマンドでメッセージを移動することができます
(*note Rmail Output::を参照してください)。

‘i FILE <RET>’
     FILEをEmacsに読み込んで、それにたいしてRmailを実行します
     (‘rmail-input’)。

‘M-x set-rmail-inbox-list <RET> FILES <RET>’
     カレントRmailファイルにたいしてinboxファイル名を指定して、それから
     メールを取得します。

‘g’
     カレントRmailファイルのinboxから、新しいメールをマージします
     (‘rmail-get-new-mail’)。

‘C-u g FILE <RET>’
     inboxファイルFILEから新しいメールをマージします。

   プライマリーRmailファイル以外のファイルでRmailを実行するために、
Rmailで‘i’ (‘rmail-input’)コマンドを使用できます。これは、そのファイルを
Rmailモードでvisitします。Rmailの外からでも‘M-x rmail-input’を使用するこ
とができますが、同じことを行なう‘C-u M-x rmail’の方が簡単にタイプできま
す。

   通常‘i’で読み込むファイルは、有効なmboxファイルであるべきです。そうで
ない場合、Rmailはそのファイルのテキストをmbox形式に変換しようと試み、そ
のバッファーで変換されたテキストをvisitします。バッファーを保存すると、
そのファイルが変換されます。

   存在しないファイル名を指定した場合、‘i’は新しいRmailファイルを作成す
るために、新しいバッファーを初期化します。

   メニューからRmailファイルを選択することもできます。メニューClassifyの
、アイテムInput Rmail Fileを選択して、Rmailファイルを選択します。変数
‘rmail-secondary-file-directory’および‘rmail-secondary-file-regexp’は、
メニューがどのファイルを表示するかを指定します。最初の変数はファイルを探
すディレクトリーを指定し、2番目の変数はそのディレクトリーのどのファイル
(正規表現にマッチするファイルすべて)を表示するかを指定します。マッチする
ファイルがない場合、このメニューアイテムは選択できません。これらの変数は
、出力するファイルの選択にも適用されます(*note Rmail Output::を参照して
ください)。

   使用するinboxファイルは変数‘rmail-inbox-list’により指定され、これは
Rmailモードではバッファーローカルな変数です。特別な例外として、プライマ
リーRmailファイルにinboxを指定していない場合、これは環境変数‘MAIL’、また
はシステム標準のinboxを使用します。

   ‘g’ (‘rmail-get-new-mail’)コマンドは、inboxのメールを、カレント
Rmailファイルにマージします。Rmailファイルにinboxがない場合、‘g’は何もし
ません。コマンド‘M-x rmail’も、新しいメールをプライマリーRmailファイルに
マージします。

   通常のinboxではないファイルからメールをマージするには、‘C-u g’のよう
に‘g’キーに数引数を与えます。するとファイル名を読み取り、そのファイルか
らメールをマージします。引数を使用して‘g’を使用しても、inboxファイルの削
除・変更はされません。したがって、これはあるファイルのメッセージを、他の
ファイルにマージする一般的な方法です。


File: emacs-ja.info,  Node: Rmail Output,  Next: Rmail Labels,  Prev: Rmail Files,  Up: Rmail

33.7 外部ファイルへのメッセージのコピー
=======================================

以下はRmailファイルから他のファイルにメッセージをコピーするコマンドです
。

‘o FILE <RET>’
     カレントメッセージの完全なコピーを、ファイルFILEに追加します
     (‘rmail-output’)。

‘C-o FILE <RET>’
     カレントメッセージの表示にしたがい、ファイルFILEに追加します
     (‘rmail-output-as-seen’)。

‘w FILE <RET>’
     メッセージの本文だけをファイルFILEに出力します。デフォルトのファイ
     ル名は、そのメッセージの‘Subject’ヘッダーからとられます。

   コマンド‘o’および‘C-o’は、カレントメッセージのコピーを指定したファイ
ルの最後に追加します。2つのコマンドの主な違いは、どれだけコピーするかで
す。‘C-o’が現在表示されているヘッダーだけをコピーするのにたいし、‘o’はヘ
ッダーがすべて表示されていなくても、メッセージヘッダーを完全にコピーしま
す。*note Rmail Display::を参照してください。加えて、ファイルがBabylフォ
ーマットのとき、‘o’はメッセージをBabylフォーマットに変換しますが、
‘C-o’はBabylファイルを出力できません。

   Emacsバッファーで出力ファイルをvisitしていた場合、出力コマンドはメッ
セージをそのバッファーに追加します。最終的にそのバッファーをファイルに保
存するかは、あなた次第です。

   本文にファイル内容がそのまま記載されているようなメッセージを受信する
ことがあるかもしれません。そのような場合、‘w’
(‘rmail-output-body-to-file’)コマンドで、本文を(メッセージヘッダーを除い
て)ファイルに保存できます。そのようなメッセージは‘Subject’フィールドにフ
ァイル名を意図した内容を含んでいる場合があるので、‘w’コマンドはデフォル
トの出力ファイル名に‘Subject’フィールドを使用します。しかし、ファイル名
はミニバッファーを使って読み取られるので、異なる名前を指定できます。

   メニューからRmailファイルを選択して、メッセージを出力することもできま
す。メニューClassifyの、メニューアイテムOutput Rmail Fileを選択して、出
力したいRmailファイルを選択します。これは‘o’コマンドのように、カレントメ
ッセージをそのファイルに出力します。変数
‘rmail-secondary-file-directory’および‘rmail-secondary-file-regexp’は、
メニューがどのファイルを表示するかを指定します。最初の変数はファイルを探
すディレクトリーを指定し、2番目の変数はそのディレクトリーのどのファイル
(正規表現にマッチするファイルすべて)を表示するかを指定します。マッチする
ファイルがない場合、このメニューアイテムは選択できません。

   ‘o’または‘C-o’でメッセージをコピーすることにより、メッセージのオリジ
ナルコピーには属性‘filed’が与えられるので、そのメッセージがカレントのと
きは、モードラインに‘filed’が表示されます。

   各メールメッセージにたいして1つのコピーを保持したい場合は、変数
‘rmail-delete-after-output’に‘t’をセットします。その場合、コマンド‘o’、
‘C-o’および‘w’は、コピー後にオリジナルのメッセージを削除します(望むなら
後で削除を取り消すことができます)。

   変数‘rmail-output-file-alist’は、カレントメッセージの内容にもとづいて
、理にかなったデフォルトの出力ファイルを指定できます。値は以下の形式をも
つ要素のリストです:

     (REGEXP . NAME-EXP)

カレントメッセージにREGEXPにたいするマッチが存在する場合、デフォルトの出
力ファイルはNAME-EXPになります。複数の要素がそのメッセージにマッチする場
合、最初にマッチした要素がデフォルトのファイル名を決定します。式
NAME-EXPは使用するファイル名を与える文字列定数、またはより一般的に、ファ
イル名を文字列として返す任意のLisp式を指定できます。
‘rmail-output-file-alist’は、‘o’と‘C-o’の両方に適用されます。

   Rmailは、(‘rmail-file-name’で指定される)プライマリーRmailファイルから
、(変数‘rmail-automatic-folder-directives’の値にもとづいて)他のファイル
にメッセージを自動的に保存できます。この変数は、どのメッセージをどこに保
存するかを指定する要素(‘directives’)のリストです。各directiveは出力ファ
イルからなるリストで、ヘッダー名と正規表現の組が1つ以上後に続きます。メ
ッセージのヘッダーが指定された正規表現にマッチする場合、そのメッセージは
与えられたファイルに保存されます。directiveが複数のヘッダーエントリーを
もつ場合、それらすべてがマッチしなければなりません。Rmailはファイル
‘rmail-file-name’からメッセージを表示するときdirectiveをチェックして、
(もしあれば)最初のマッチに適用します。出力ファイルが‘nil’の場合、そのメ
ッセージは削除され、保存されません。たとえば特定のアドレスや、特定の
subjectのメッセージを保存するのに、この機能を使用することができます。


File: emacs-ja.info,  Node: Rmail Labels,  Next: Rmail Attributes,  Prev: Rmail Output,  Up: Rmail

33.8 ラベル
===========

各メッセージは、分類(classification)のために割り当てられる、さまざまな
“ラベル(labels)”をもつことができます。各ラベルは名前をもち、名前が異なる
と違うラベルになります。任意のラベルは、特定のメッセージにたいして、付い
ているか付いていないかのどちらかです。標準的な意味をもつラベル名がいくつ
かあり、それが適切なときは、Rmailにより自動的にメッセージに付与されます
。これらの特別なラベルは、“属性(attribute)”と呼ばれます (*note Rmail
Attributes::を参照してください)。 それ以外のすべてのラベルは、ユーザーに
より付与されます。

‘a LABEL <RET>’
     カレントメッセージに、ラベルLABELを割り当てます
     (‘rmail-add-label’)。
‘k LABEL <RET>’
     カレントメッセージから、ラベルLABELを外します(‘rmail-kill-label’)。
‘C-M-n LABELS <RET>’
     複数のラベルLABELSのどれか1つをもつ、次のメッセージに移動します
     (‘rmail-next-labeled-message’)。
‘C-M-p LABELS <RET>’
     複数のラベルLABELSのどれか1つをもつ、前のメッセージに移動します
     (‘rmail-previous-labeled-message’)。
‘l LABELS <RET>’
‘C-M-l LABELS <RET>’
     複数のラベルLABELSのどれかを含む、すべてのメッセージのサマリーを作
     成します(‘rmail-summary-by-labels’)。

   コマンド‘a’ (‘rmail-add-label’)および‘k’ (‘rmail-kill-label’)で、カレ
ントメッセージにたいして任意のラベルを割り当てたり、外すことができます。
引数LABELが空の場合、もっとも最近割り当てられた(または外された)ラベルと
同じラベルを、割り当てる(または外す)ことを意味します。

   メッセージを分類するためにラベルを割り当てた後、ラベルを使用する3つの
方法 — 移動、サマリー、ソート — があります。

   ‘C-M-n LABELS <RET>’ (‘rmail-next-labeled-message’)は、複数のラベル
LABELSのうちどれか1つをもつ、次のメッセージに移動します。引数LABELSには
、カンマで区切られた1つ以上のラベル名を指定します。‘C-M-p’
(‘rmail-previous-labeled-message’)も同様ですが、前のメッセージに後方へ移
動します。どちらのコマンドも、数引数は繰り返し回数を指定します。

   コマンド‘C-M-l LABELS <RET>’ (‘rmail-summary-by-labels’)は、指定され
た複数のラベルのうち、少なくとも1つをもつメッセージだけを含むサマリーを
表示します。引数LABELSはカンマで区切られた1つ以上のラベル名です。サマリ
ーについての詳細は、*note Rmail Summary::を参照してください。

   ‘C-M-n’、‘C-M-p’、‘C-M-l’にたいして引数LABELSが空の場合は、それらのコ
マンドにたいして、もっとも最近に指定されたLABELSを使うことを意味します。

   ラベルでメッセージをソートする情報については、*note Rmail Sorting::を
参照してください。


File: emacs-ja.info,  Node: Rmail Attributes,  Next: Rmail Reply,  Prev: Rmail Labels,  Up: Rmail

33.9 Rmailの属性
================

‘deleted’や‘filed’のようないくつかのラベルはビルトインの意味をもち、
Rmailは適切なときに、それらをメッセージに割り当てます。これらのラベルは
“属性(attributes)”と呼ばれます。以下はRmailの属性のリストです:

‘unseen’
     そのメッセージが1度もカレントになっていないことを意味します。
     inboxからメッセージが到着したとき割り当てられ、そのメッセージがカレ
     ントになったときに外されます。Rmailを開始したとき、この属性をもつメ
     ッセージを最初に表示します。
‘deleted’
     メッセージが削除されたことを意味します。削除コマンドにより割り当て
     られ、削除を取り消すコマンドで外されます(*note Rmail Deletion::を参
     照してください)。
‘filed’
     そのメッセージが他のファイルにコピーされたことを意味します。ファイ
     ル出力コマンド‘o’および‘C-o’により割り当てられます(*note Rmail
     Output::を参照してください)。
‘answered’
     メッセージへの返信をメールしたことを意味します。‘r’
     (‘rmail-reply’)コマンドにより割り当てられます。*note Rmail Reply::を
     参照してください。
‘forwarded’
     メッセージを転送したことを意味します。‘f’ (‘rmail-forward’)コマンド
     により割り当てられます。*note Rmail Reply::を参照してください。
‘edited’
     メッセージのテキストをRmailで編集したことを意味します。*note Rmail
     Editing::を参照してください。
‘resent’
     メッセージを再送したことを意味します。コマンド‘M-x rmail-resend’に
     より割り当てられます。*note Rmail Reply::を参照してください。
‘retried’
     送信に失敗したメッセージを再試行したことを意味します。コマンド‘M-x
     rmail-retry-failure’により割り当てられます。*note Rmail Reply::を参
     照してください。

   これ以外のすべてのラベルは、ユーザーだけが割り当てたり外すことができ
、それらのラベルは標準的な意味をもちません。


File: emacs-ja.info,  Node: Rmail Reply,  Next: Rmail Summary,  Prev: Rmail Attributes,  Up: Rmail

33.10 返信の送信
================

Rmailには、送信メールを送るための複数のコマンドがあります。Messageモード
の使い方(Rmailでも動作する特別な機能を含む)に関する情報は、*note Sending
Mail::を参照してください。このセクションではmailバッファーに入るための、
Rmailの特別なコマンドを説明します。メールを送信するための通常のキー —
‘C-x m’、‘C-x 4 m’、‘C-x 5 m’ — は、Rmailモードでも通常どおり機能するこ
とに注意してください。

‘m’
     メッセージを送信します(‘rmail-mail’)。
‘c’
     すでに編集を開始した送信メッセージの編集を続けます
     (‘rmail-continue’)。
‘r’
     カレントRmailメッセージにたいする返信を送信します(‘rmail-reply’)。
‘f’
     カレントメッセージを他のユーザーに転送します(‘rmail-forward’)。
‘C-u f’
     カレントメッセージを他のユーザーに再送します(‘rmail-resend’)。
‘M-m’
     送信に失敗して戻ってきたメッセージにたいして、2回目の送信を試みます
     (‘rmail-retry-failure’)。

   Rmailにいるときにメッセージを送信する理由でもっとも一般的なのは、読ん
でいるメールに返信するときでしょう。これを行なうには、‘r’
(‘rmail-reply’)とタイプします。これは‘C-x 4 m’のように、別ウィンドウにメ
ール作成バッファーを表示しますが、ヘッダーフィールド‘Subject’、‘To’、
‘CC’、‘In-reply-to’、‘References’は、返信するメッセージにもとづいて、事
前に初期化されています。‘To’フィールドには、返信するメッセージを送信した
人のアドレスがセットされ、‘CC’にはそのメッセージを受け取った、他のすべて
の人のアドレスがセットされます。

   変数‘mail-dont-reply-to-names’を使用して、自動的に返信に含まれる受信
者から、特定の受信者を除外することができます。この変数の値には正規表現を
指定します。正規表現にマッチする受信者は、‘CC’フィールドから除外されます
。その受信者を除外することにより‘To’フィールドが空になる場合を除き、
‘To’フィールドからも除外されます。この変数が‘nil’の場合、最初に返信を作
成するときに、あなた自身のアドレスにマッチするデフォルト値に初期化されま
す。

   特定の返信にたいして‘CC’フィールドを完全に省略するには、‘C-u r’または
‘1 r’のように、返信コマンドに数引数を指定します。これは、元のメッセージ
を送信した人だけに返信することを意味します。

   1度メール作成バッファーが初期化されると、後は通常どおりメールの編集と
送信を行なうことができます(*note Sending Mail::を参照してください)。事前
にセットされたヘッダーフィールドが適切でない場合は、それを編集することが
できます。‘C-c C-y’のようなコマンドを使うこともできます。これは返信する
メッセージをyankします(*note Mail Commands::を参照してください)。Rmailバ
ッファーに切り替えて、異なるメッセージを選択してから、また戻って新しいカ
レントメッセージにyankすることもできます。

   メッセージが送信先に届かないこともあります。そのような場合メーラーは
通常、“失敗メッセージ(failure message)”をあなたに返信します。Rmailコマン
ドの‘M-m’ (‘rmail-retry-failure’)は、同じメッセージの2回目の送信を準備を
します。これは前と同じテキストとヘッダーフィールドで、メール作成バッファ
ーをセットアップします。そこですぐに‘C-c C-c’をタイプすると、初回とまっ
たく同じメッセージを再送します。テキストやヘッダーを編集してから送信する
こともできます。変数‘rmail-retry-ignored-headers’は、失敗したメッセージ
を再試行するとき除外するヘッダーを制御し、フォーマットは
‘rmail-ignored-headers’ (*note Rmail Display::を参照してください)と同じ
です。

   Rmailからメールを送信する他のよくある理由に、カレントメッセージを他の
ユーザーに“転送(forward)”することです。‘f’ (‘rmail-forward’)は、メール作
成バッファーのテキストとsubjectを、カレントメッセージで事前に初期化する
ことにより、これを簡単に行なえるようにします。subjectは‘[FROM:
SUBJECT]’という形式で初期化されます。FROMとSUBJECTには、元のメッセージの
送信者とsubjectが入ります。あなたが行なう必要があるのは、送信先を記述し
て、それを送信することだけです。メッセージを転送するとき、受信者が受け取
るメッセージの“from”はあなたになり、メールの内容は元のメッセージと同じに
なります。

   Rmailは転送メッセージにたいして2つのフォーマットを提供します。デフォ
ルトはMIMEフォーマットを使用します(*note Rmail Display::を参照してくださ
い)。これは元のメッセージを別の部分に含めます。変数
‘rmail-enable-mime-composing’を‘nil’にセットすることにより、もっと簡単な
フォーマットを使うこともできます。この場合、Rmailは元のメッセージを2つの
区切り行で囲むだけです。これは各行の行頭に‘- ’を挿入することにより、各行
の変更も行ないます。このフォーマットによる転送メッセージを受信した場合、
それに普通のテキスト以外の何か — たとえばプログラムのソースコード — が含
まれている場合、この変更を取り消せたら便利だと思うかもしれません。これを
行なうには、転送されたメッセージを選択して、‘M-x
unforward-rmail-message’とタイプします。このコマンドは、挿入された文字列
‘- ’を削除して、転送されたメッセージのオリジナルを抽出し、カレントメッセ
ージの直後に、別のメッセージとしてRmailファイルに挿入します。

   “再送(Resending)”は、転送と似た別の方法です。違いは、再送により送信さ
れるメッセージは、あなたが受け取ったときのように、元の送信者が“from”にな
り、追加のヘッダーフィールド(‘Resent-From’と‘Resent-To’)により、それがあ
なたを通じて送られたことを示すことです。Rmailでメッセージを再送するには
、‘C-u f’を使用します(‘f’は‘rmail-forward’を実行し、数引数を指定すると
‘rmail-resend’を呼び出します)。

   ‘m’ (‘rmail-mail’)を使用することにより、返信ではない送信用のメールの
編集を開始します。これはヘッダーフィールドを空のままにします。‘C-x 4 m’と
の違いは、‘r’のように‘C-c C-y’でRmailにアクセスできることです。

   ‘c’ (‘rmail-continue’)コマンドは、既に編集を開始した送信用メッセージ
の編集を終えるために、または送信したメッセージを変更するために、メール作
成バッファーでの編集を再開します。

   変数‘rmail-mail-new-frame’を非‘nil’にセットした場合、メッセージの送信
を開始するすべてのコマンドは、それを編集するために新しいフレームを作成し
ます。このフレームは、そのメッセージを送信すると削除されます。

   メッセージを送信するすべてのRmailコマンドは、選択されたメール作成方法
を使用します(*note Mail Methods::を参照してください)。


File: emacs-ja.info,  Node: Rmail Summary,  Next: Rmail Sorting,  Prev: Rmail Reply,  Up: Rmail

33.11 サマリー
==============

“サマリー(summary)”は、Rmailファイルのメールを概観するために、メッセージ
ごとに1つの行を含むバッファーです。各行にはメッセージ番号、日付、送信者
、行数、ラベル、subjectが表示されます。サマリーバッファーでポイントを移
動することにより、そのサマリー行のメッセージを選択することができます。ほ
とんどのRmailコマンドはサマリーバッファーでも有効です。それらのコマンド
を使うと、サマリーのカレント行に記述されているメッセージに適用されます。

   サマリーバッファーは、1つのRmailファイルだけに適用されます。複数の
Rmailファイルを編集している場合、それぞれが自身のサマリーバッファーをも
つことができます。サマリーバッファーの名前は、Rmailバッファーの名前に
‘-summary’を追加して作成されます。通常は1度に1つだけのサマリーバッファー
が表示されます。

* Menu:

* Rmail Make Summary::       さまざまな種類のサマリーの作成。
* Rmail Summary Edit::       サマリーからのメッセージの操作。


File: emacs-ja.info,  Node: Rmail Make Summary,  Next: Rmail Summary Edit,  Up: Rmail Summary

33.11.1 サマリーの作成
----------------------

以下は、カレントRmailバッファーでサマリーを作成するコマンドです。Rmailバ
ッファーが1度サマリーされると、Rmailバッファーでの変更(メッセージの削除
や完全な削除、新しいメールの受信など)により、サマリーも自動的に更新され
ます。

‘h’
‘C-M-h’
     すべてのメッセージをサマリーします(‘rmail-summary’)。
‘l LABELS <RET>’
‘C-M-l LABELS <RET>’
     1つ以上の指定したラベルをもつメッセージをサマリーします
     (‘rmail-summary-by-labels’)。
‘C-M-r RCPTS <RET>’
     指定した受信者にマッチするメッセージをサマリーします
     (‘rmail-summary-by-recipients’)。
‘C-M-t TOPIC <RET>’
     指定した正規表現TOPICにマッチするsubjectをもつメッセージをサマリー
     します(‘rmail-summary-by-topic’)。
‘C-M-s REGEXP <RET>’
     指定した正規表現REGEXPにマッチするヘッダーをもつメッセージをサマリ
     ーします(‘rmail-summary-by-regexp’)。
‘C-M-f SENDERS <RET>’
     指定した送信者にマッチするメッセージをサマリーします
     (‘rmail-summary-by-senders’)。

   コマンド‘h’または‘C-M-h’ (‘rmail-summary’)は、カレントRmailバッファー
にたいする、すべてのメッセージのサマリーを、サマリーバッファーに表示しま
す。その後、別のウィンドウにサマリーバッファーを表示して、それを選択しま
す。

   ‘C-M-l LABELS <RET>’ (‘rmail-summary-by-labels’)は、1つ以上のラベル
LABELSをもつメッセージの、部分的なサマリーを作成します。LABELSには、カン
マで区切られたラベル名を指定します。

   ‘C-M-r RCPTS <RET>’ (‘rmail-summary-by-recipients’)は、正規表現
RCPTSにマッチする、1つ以上の受信者をもつメッセージのサマリーを作成します
。複数の正規表現を区切るためにカンマを使用できます。これらはヘッダー
‘To’、‘From’、‘CC’にたいしてマッチを行ないます(プレフィクス引数を与えた
場合は、これらのヘッダーを除外します)。

   ‘C-M-t TOPIC <RET>’ (‘rmail-summary-by-topic’)は、正規表現TOPICにマッ
チするsubjectをもつメッセージの、部分的なサマリーを作成します。複数の正
規表現を区切るためにカンマを使用できます。プレフィクス引数を指定した場合
、subjectだけでなく、メッセージ全体にたいしてマッチを行ないます。

   ‘C-M-s REGEXP <RET>’ (‘rmail-summary-by-regexp’)は、正規表現REGEXPに
マッチするヘッダー(日付とsubject行を含む)をもつメッセージの、部分的なサ
マリーを作成します。

   ‘C-M-f SENDERS <RET>’ (‘rmail-summary-by-senders’)は、正規表現
SENDERSにマッチする‘From’フィールドをもつメッセージの、部分的なサマリー
を作成します。複数の正規表現を区切るためにカンマを使用できます。

   1つのRmailバッファーにたいして、1つのサマリーしか存在しないことに注意
してください。他の種類のサマリーを作成すると、以前のサマリーは破棄されま
す。

   変数‘rmail-summary-window-size’は、サマリーウィンドウに何行使用するか
を指定します。変数‘rmail-summary-line-count-flag’は、メッセージのサマリ
ー行に、メッセージの総行数を含めるかを制御します。このオプションに
‘nil’をセットすると、サマリーの生成が速くなるかもしれません。


File: emacs-ja.info,  Node: Rmail Summary Edit,  Prev: Rmail Make Summary,  Up: Rmail Summary

33.11.2 サマリーでの編集
------------------------

Rmailバッファーで行なえることのほとんどは、Rmailサマリーバッファーでも使
用できます。実際、1度サマリーバッファーを作成すれば、Rmailバッファーに戻
る必要はありません。

   サマリーバッファーで異なる行にポイントを移動するだけで、サマリーバッ
ファーからメッセージを選択して、Rmailバッファーに表示することができます
。ポイントを移動するEmacsコマンドが何であるかは問題になりません。コマン
ドの最後でポイントのある行のメッセージが、Rmailバッファーに表示されます
。

   ほとんどのRmailコマンドは、Rmailバッファーと同様に機能します。したが
って、サマリーバッファーでは、‘d’がカレントメッセージの削除、‘u’は削除の
取り消し、‘x’で完全に削除します(しかし、サマリーバッファーでは‘d’、
‘C-d’、‘u’にたいする数引数は、繰り返し回数を指定します。負の引数は‘d’と
‘C-d’の意味を逆転します。関連する方向に削除されていないメッセージが存在
しない場合、削除コマンドはカレントメッセージに留まるのではなく、最初また
は最後のメッセージに移動します)。‘o’と‘C-o’は、カレントメッセージをファ
イルに出力します。他にも、‘r’はそれにたいする返信を開始する、などです。
サマリーバッファーで<SPC>と<DEL>を使用することにより、カレントメッセージ
をスクロールできます。

   ‘M-u’ (‘rmail-summary-undelete-many’)は、サマリーで削除されたすべての
メッセージの削除を取り消します。プレフィクス引数を指定した場合、以前に削
除された、指定した数のメッセージの削除を取り消すことを意味します。

   メッセージ間を移動するRmailコマンドはサマリーバッファーでも機能します
が、動作が少し異なります。これらのコマンドはサマリーに含まれる一連のメッ
セージ間を移動します。これらのコマンドは、常にRmailバッファーがスクリー
ンに表示されるようにします(カーソル移動コマンドはRmailバッファーの内容を
更新しますが、これらのコマンドはウィンドウにすでにそれが表示されているの
でなければ、表示しません)。以下はそれらのコマンドのリストです:

‘n’
     ‘deleted’の行をスキップして次の行に移動し、その行のメッセージを選択
     します(‘rmail-summary-next-msg’)。
‘p’
     ‘deleted’の行をスキップして前の行に移動し、その行のメッセージを選択
     します(‘rmail-summary-previous-msg’)。
‘M-n’
     次の行に移動して、その行のメッセージを選択します
     (‘rmail-summary-next-all’)。
‘M-p’
     前の行に移動して、その行のメッセージを選択します
     (‘rmail-summary-previous-all’)。
‘>’
     最後の行に移動して、その行のメッセージを選択します
     (‘rmail-summary-last-message’)。
‘<’
     最初の行に移動して、その行のメッセージを選択します
     (‘rmail-summary-first-message’)。
‘j’
‘<RET>’
     (Rmailバッファーがスクリーンに確実に表示されるようにして)カレント行
     のメッセージを選択します(‘rmail-summary-goto-msg’)。引数Nを指定した
     場合、メッセージ番号Nのメッセージを選択し、サマリーバッファーのその
     メッセージの行に移動します。そのメッセージがサマリーバッファーにリ
     ストされていない場合は、エラーをシグナルします。
‘M-s PATTERN <RET>’
     メッセージからPATTERNを検索します。検索はカレントメッセージから開始
     されます。マッチが見つかったらそのメッセージを選択して、サマリーバ
     ッファーのそのメッセージの行にポイントを移動します
     (‘rmail-summary-search’)。プレフィクス引数は繰り返し回数として機能
     します。負の引数は後方に検索を行なうことを意味します
     (‘rmail-summary-search-backward’と等価です)。
‘C-M-n LABELS <RET>’
     指定した1つ以上のラベルのうち、少なくとも1つをもつ次のメッセージに
     移動します(‘rmail-summary-next-labeled-message’)。LABELSはカンマで
     区切られたラベルのリストです。プレフィクス引数は繰り返し回数として
     機能します。
‘C-M-p LABELS <RET>’
     指定した1つ以上のラベルのうち、少なくとも1つをもつ前のメッセージに
     移動します(‘rmail-summary-previous-labeled-message’)。
‘C-c C-n <RET>’
     カレントメッセージと同じsubjectをもつ、次のメッセージに移動します
     (‘rmail-summary-next-same-subject’)。プレフィクス引数は繰り返し回数
     として機能します。
‘C-c C-p <RET>’
     カレントメッセージと同じsubjectをもつ、前のメッセージに移動します
     (‘rmail-summary-previous-same-subject’)。

   削除、削除の取り消し、新しいメールの取得はもちろん、異なるメッセージ
の選択でも、それらの操作をRmailバッファーで行なったとき、サマリーバッフ
ァーは更新されます。変数‘rmail-redisplay-summary’が非‘nil’の場合、これら
の操作はサマリーバッファーをスクリーンに表示します。

   サマリーの使用を終了するときは、‘Q’ (‘rmail-summary-wipe’)とタイプし
て、サマリーバッファーのウィンドウを削除します。サマリーからRmailを終了
することもできます。‘q’ (‘rmail-summary-quit’)はサマリーウィンドウを削除
して、Rmailファイルを保存してからRmailを終了してから、他のバッファーに切
り替えます。かわりに‘b’ (‘rmail-summary-bury’)とタイプすると、単に
RmailとRmailサマリーバッファーを隠し(bury)ます。


File: emacs-ja.info,  Node: Rmail Sorting,  Next: Rmail Display,  Prev: Rmail Summary,  Up: Rmail

33.12 Rmailファイルのソート
===========================

‘C-c C-s C-d’
‘M-x rmail-sort-by-date’
     カレントRmailバッファーのメッセージを、日付順にソートします。

‘C-c C-s C-s’
‘M-x rmail-sort-by-subject’
     カレントRmailバッファーのメッセージを、subject順にソートします。

‘C-c C-s C-a’
‘M-x rmail-sort-by-author’
     カレントRmailバッファーのメッセージを、送信者順にソートします。

‘C-c C-s C-r’
‘M-x rmail-sort-by-recipient’
     カレントRmailバッファーのメッセージを、受信者名順にソートします。

‘C-c C-s C-c’
‘M-x rmail-sort-by-correspondent’
     カレントRmailバッファーのメッセージを、他の受信者名順にソートします
     。

‘C-c C-s C-l’
‘M-x rmail-sort-by-lines’
     カレントRmailバッファーのメッセージを、行数順にソートします。

‘C-c C-s C-k <RET> LABELS <RET>’
‘M-x rmail-sort-by-labels <RET> LABELS <RET>’
     カレントRmailバッファーのメッセージを、ラベル順にソートします。引数
     LABELSは、カンマで区切られたラベルのリストです。ラベルの順序は、メ
     ッセージの順序を指定します。最初のラベルをもつメッセージが最初に、
     2番目のラベルをもつメッセージが次に、というようになります。ラベルを
     もたないメッセージは最後になります。

   Rmailのソートコマンドは_安定ソート(stable sort)_を行ないます。2つのメ
ッセージのどちらを先にするか特に理由がない場合、メッセージの順序は変更さ
れません。これを使用して複数のソート条件を使用できます。たとえば、
‘rmail-sort-by-date’の後に‘rmail-sort-by-author’を使用すれば、メッセージ
は作者ごとに日付順にソートされます。

   プレフィクス引数を指定した場合、これらのコマンドは逆順で比較をします
。これはメッセージが新しいものから古いものへ、大きいものから小さいものへ
、アルファベットの逆順でソートされることを意味します。

   同じキーをサマリーバッファーで使うと、似た関数が実行されます。たとえ
ば‘C-c C-s C-l’は、‘rmail-summary-sort-by-lines’を実行します。これらのコ
マンドは、たとえサマリーがメッセージの一部しか表示していなくても、
Rmailバッファー全体をソートすることに注意してください。

   ソートのアンドゥはできないことに注意してください。そのため、ソートを
する前にRmailバッファーを保存したいと思うかもしれません。

